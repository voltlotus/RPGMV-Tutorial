//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.86;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.86] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x5a8ff0=_0x4eb7;(function(_0x359456,_0x15e03b){const _0x356bc8=_0x4eb7,_0xe630b3=_0x359456();while(!![]){try{const _0x331d12=parseInt(_0x356bc8(0xa25))/0x1*(parseInt(_0x356bc8(0x14b))/0x2)+-parseInt(_0x356bc8(0x32e))/0x3*(parseInt(_0x356bc8(0x428))/0x4)+parseInt(_0x356bc8(0xbd9))/0x5+parseInt(_0x356bc8(0x4ae))/0x6*(-parseInt(_0x356bc8(0x2ad))/0x7)+-parseInt(_0x356bc8(0xa0d))/0x8+-parseInt(_0x356bc8(0x26b))/0x9+parseInt(_0x356bc8(0x40f))/0xa*(parseInt(_0x356bc8(0xb1c))/0xb);if(_0x331d12===_0x15e03b)break;else _0xe630b3['push'](_0xe630b3['shift']());}catch(_0x234f9d){_0xe630b3['push'](_0xe630b3['shift']());}}}(_0x53b8,0x827f0));var label=_0x5a8ff0(0xbb3),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x5a8ff0(0x6e0)](function(_0x4bb806){const _0x5f45eb=_0x5a8ff0;return _0x4bb806[_0x5f45eb(0x55f)]&&_0x4bb806[_0x5f45eb(0x8fb)][_0x5f45eb(0x597)]('['+label+']');})[0x0];VisuMZ[label][_0x5a8ff0(0xba1)]=VisuMZ[label]['Settings']||{},VisuMZ['ConvertParams']=function(_0x21e48a,_0x150498){const _0x3a58ff=_0x5a8ff0;for(const _0x4c5a88 in _0x150498){if(_0x4c5a88['match'](/(.*):(.*)/i)){const _0x2df448=String(RegExp['$1']),_0x4bad0e=String(RegExp['$2'])[_0x3a58ff(0x692)]()[_0x3a58ff(0xb20)]();let _0x561f06,_0x449129,_0x2bc4ff;switch(_0x4bad0e){case _0x3a58ff(0x9b8):_0x561f06=_0x150498[_0x4c5a88]!==''?Number(_0x150498[_0x4c5a88]):0x0;break;case _0x3a58ff(0xa0b):_0x449129=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):[],_0x561f06=_0x449129[_0x3a58ff(0x5d7)](_0x4e85fe=>Number(_0x4e85fe));break;case _0x3a58ff(0x9cf):_0x561f06=_0x150498[_0x4c5a88]!==''?eval(_0x150498[_0x4c5a88]):null;break;case _0x3a58ff(0x952):_0x449129=_0x150498[_0x4c5a88]!==''?JSON['parse'](_0x150498[_0x4c5a88]):[],_0x561f06=_0x449129['map'](_0x460370=>eval(_0x460370));break;case _0x3a58ff(0x244):_0x561f06=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):'';break;case _0x3a58ff(0x6c5):_0x449129=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):[],_0x561f06=_0x449129[_0x3a58ff(0x5d7)](_0x574681=>JSON[_0x3a58ff(0x54e)](_0x574681));break;case _0x3a58ff(0xa61):_0x561f06=_0x150498[_0x4c5a88]!==''?new Function(JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88])):new Function(_0x3a58ff(0x75b));break;case'ARRAYFUNC':_0x449129=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):[],_0x561f06=_0x449129[_0x3a58ff(0x5d7)](_0xb71d9c=>new Function(JSON['parse'](_0xb71d9c)));break;case _0x3a58ff(0x4f4):_0x561f06=_0x150498[_0x4c5a88]!==''?String(_0x150498[_0x4c5a88]):'';break;case'ARRAYSTR':_0x449129=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):[],_0x561f06=_0x449129[_0x3a58ff(0x5d7)](_0x525dbf=>String(_0x525dbf));break;case _0x3a58ff(0x38b):_0x2bc4ff=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):{},_0x21e48a[_0x2df448]={},VisuMZ[_0x3a58ff(0x288)](_0x21e48a[_0x2df448],_0x2bc4ff);continue;case _0x3a58ff(0x52e):_0x449129=_0x150498[_0x4c5a88]!==''?JSON[_0x3a58ff(0x54e)](_0x150498[_0x4c5a88]):[],_0x561f06=_0x449129[_0x3a58ff(0x5d7)](_0x210c5c=>VisuMZ['ConvertParams']({},JSON[_0x3a58ff(0x54e)](_0x210c5c)));break;default:continue;}_0x21e48a[_0x2df448]=_0x561f06;}}return _0x21e48a;},(_0x55fcc1=>{const _0x3196e9=_0x5a8ff0,_0xe809eb=_0x55fcc1[_0x3196e9(0xa4b)];for(const _0x3f000c of dependencies){if(!Imported[_0x3f000c]){alert(_0x3196e9(0x367)[_0x3196e9(0x907)](_0xe809eb,_0x3f000c)),SceneManager[_0x3196e9(0xad2)]();break;}}const _0x1291e8=_0x55fcc1[_0x3196e9(0x8fb)];if(_0x1291e8[_0x3196e9(0x6d8)](/\[Version[ ](.*?)\]/i)){const _0x58541e=Number(RegExp['$1']);_0x58541e!==VisuMZ[label][_0x3196e9(0x978)]&&(alert(_0x3196e9(0xa47)['format'](_0xe809eb,_0x58541e)),SceneManager[_0x3196e9(0xad2)]());}if(_0x1291e8[_0x3196e9(0x6d8)](/\[Tier[ ](\d+)\]/i)){const _0x350988=Number(RegExp['$1']);_0x350988<tier?(alert(_0x3196e9(0x63e)[_0x3196e9(0x907)](_0xe809eb,_0x350988,tier)),SceneManager['exit']()):tier=Math[_0x3196e9(0x6dd)](_0x350988,tier);}VisuMZ[_0x3196e9(0x288)](VisuMZ[label]['Settings'],_0x55fcc1[_0x3196e9(0x936)]);})(pluginData),VisuMZ[_0x5a8ff0(0x8e5)]=function(_0x4c971e){const _0x58e75b=_0x5a8ff0;let _0x4ccb83=[];for(const _0x2aacd6 of _0x4c971e){_0x4ccb83=_0x4ccb83[_0x58e75b(0xb5d)](VisuMZ['ConvertActionSequenceTarget'](_0x2aacd6));}return _0x4ccb83[_0x58e75b(0x6e0)](_0xa66a2e=>_0xa66a2e);},VisuMZ[_0x5a8ff0(0x790)]=function(_0xc88335){const _0x4909ca=_0x5a8ff0,_0x599864=BattleManager['allBattleMembers']()[_0x4909ca(0x6e0)](_0x5b32f9=>_0x5b32f9&&_0x5b32f9[_0x4909ca(0x4c5)]()),_0x35c764=BattleManager[_0x4909ca(0xbee)],_0x29497b=BattleManager['_target'],_0x12f1c1=BattleManager[_0x4909ca(0x35b)]?BattleManager[_0x4909ca(0x35b)][_0x4909ca(0x152)](0x0):_0x599864;_0xc88335=_0xc88335[_0x4909ca(0x44e)]()[_0x4909ca(0xb20)]();if(_0xc88335===_0x4909ca(0x92c))return[_0x35c764];else{if(_0xc88335===_0x4909ca(0x839))return[_0x29497b];else{if(_0xc88335===_0x4909ca(0x4a2)){if(_0x29497b){const _0x3402b3=_0x12f1c1['indexOf'](_0x29497b);return _0x3402b3>=0x0?[_0x12f1c1[_0x3402b3-0x1]||_0x29497b]:[_0x29497b];}}else{if(_0xc88335===_0x4909ca(0x51d)){if(_0x29497b){const _0x2bf362=_0x12f1c1[_0x4909ca(0x70f)](_0x29497b);return _0x2bf362>=0x0?[_0x12f1c1[_0x2bf362+0x1]||_0x29497b]:[_0x29497b];}}else{if(_0xc88335===_0x4909ca(0xbbb))return _0x12f1c1;else{if(_0xc88335===_0x4909ca(0x33e))return[_0x35c764][_0x4909ca(0xb5d)](_0x12f1c1);else{if(_0xc88335===_0x4909ca(0x667))return _0x599864['filter'](_0x5ce0f8=>_0x5ce0f8!==_0x35c764&&!_0x12f1c1[_0x4909ca(0x597)](_0x5ce0f8)&&_0x5ce0f8[_0x4909ca(0x5b8)]());else{if(_0xc88335===_0x4909ca(0x4c6))return[VisuMZ[_0x4909ca(0x2ee)]()];else{if(_0xc88335[_0x4909ca(0x6d8)](/SPECIAL (.*)>/i)){const _0x18e96c=String(RegExp['$1'])['split'](',')[_0x4909ca(0x5d7)](_0x2c9475=>_0x2c9475[_0x4909ca(0xb20)]());return[VisuMZ[_0x4909ca(0x6b3)](_0x18e96c)];}}}}}}}}}if(_0x35c764){if(_0xc88335==='alive\x20friends')return _0x35c764[_0x4909ca(0x6b8)]()[_0x4909ca(0x4c4)]();else{if(_0xc88335===_0x4909ca(0x327))return _0x35c764['friendsUnit']()[_0x4909ca(0x4c4)]()['filter'](_0x3f10a8=>_0x3f10a8!==_0x35c764);else{if(_0xc88335===_0x4909ca(0x11d))return _0x35c764['friendsUnit']()[_0x4909ca(0x4c4)]()[_0x4909ca(0x6e0)](_0x4c9e97=>_0x4c9e97!==_0x29497b);else{if(_0xc88335===_0x4909ca(0x19a))return _0x35c764['friendsUnit']()['deadMembers']();else{if(_0xc88335['match'](/FRIEND INDEX (\d+)/i)){const _0x342107=Number(RegExp['$1']);return[_0x35c764[_0x4909ca(0x6b8)]()['members']()[_0x342107]];}}}}}if(_0xc88335==='alive\x20opponents')return _0x35c764[_0x4909ca(0xa3a)]()['aliveMembers']();else{if(_0xc88335===_0x4909ca(0x869))return _0x35c764[_0x4909ca(0xa3a)]()[_0x4909ca(0x4c4)]()['filter'](_0x16dce4=>_0x16dce4!==_0x29497b);else{if(_0xc88335===_0x4909ca(0x794))return _0x35c764['opponentsUnit']()['deadMembers']();else{if(_0xc88335[_0x4909ca(0x6d8)](/OPPONENT INDEX (\d+)/i)){const _0x1ccafc=Number(RegExp['$1']);return[_0x35c764['opponentsUnit']()['members']()[_0x1ccafc]];}}}}}if(_0xc88335===_0x4909ca(0x14f))return $gameParty[_0x4909ca(0x4c4)]();else{if(_0xc88335===_0x4909ca(0x8f1))return $gameParty['aliveMembers']()[_0x4909ca(0x6e0)](_0x455316=>_0x455316!==_0x35c764);else{if(_0xc88335===_0x4909ca(0x7e5))return $gameParty[_0x4909ca(0x4c4)]()['filter'](_0x7aa617=>_0x7aa617!==_0x29497b);else{if(_0xc88335==='dead\x20actors')return $gameParty['deadMembers']();else{if(_0xc88335[_0x4909ca(0x6d8)](/ACTOR INDEX (\d+)/i)){const _0x8b2c9e=Number(RegExp['$1']);return[$gameParty['members']()[_0x8b2c9e]];}else{if(_0xc88335['match'](/ACTOR ID (\d+)/i)){const _0x2d0dc5=Number(RegExp['$1']);return[$gameActors[_0x4909ca(0x749)](_0x2d0dc5)];}}}}}}if(_0xc88335===_0x4909ca(0x763))return $gameTroop[_0x4909ca(0x4c4)]();else{if(_0xc88335===_0x4909ca(0xb21))return $gameTroop[_0x4909ca(0x4c4)]()[_0x4909ca(0x6e0)](_0x3d092d=>_0x3d092d!==_0x35c764);else{if(_0xc88335===_0x4909ca(0x584))return $gameTroop[_0x4909ca(0x4c4)]()[_0x4909ca(0x6e0)](_0x465830=>_0x465830!==_0x29497b);else{if(_0xc88335==='dead\x20enemies')return $gameTroop[_0x4909ca(0x246)]();else{if(_0xc88335[_0x4909ca(0x6d8)](/ENEMY INDEX (\d+)/i)){const _0x1b7697=Number(RegExp['$1']);return[$gameTroop[_0x4909ca(0x2c0)]()[_0x1b7697]];}else{if(_0xc88335[_0x4909ca(0x6d8)](/ENEMY ID (\d+)/i)){const _0x5ea71d=Number(RegExp['$1']);return $gameTroop[_0x4909ca(0x4c4)]()[_0x4909ca(0x6e0)](_0x323b48=>_0x323b48[_0x4909ca(0x2b8)]()===_0x5ea71d);}}}}}}if(_0xc88335===_0x4909ca(0x68c))return _0x599864[_0x4909ca(0x6e0)](_0x375797=>_0x375797[_0x4909ca(0x6b2)]());else{if(_0xc88335==='alive\x20battlers\x20not\x20user')return _0x599864[_0x4909ca(0x6e0)](_0x15ff64=>_0x15ff64[_0x4909ca(0x6b2)]()&&_0x15ff64!==_0x35c764);else{if(_0xc88335===_0x4909ca(0x7d0))return _0x599864['filter'](_0x535941=>_0x535941[_0x4909ca(0x6b2)]()&&_0x535941!==_0x29497b);else{if(_0xc88335==='dead\x20battlers')return _0x599864[_0x4909ca(0x6e0)](_0x1a3049=>_0x1a3049['isDead']());}}}return[];},VisuMZ['GetActionSequenceSpecialTarget']=function(){const _0x34609a=_0x5a8ff0;return BattleManager[_0x34609a(0x571)];},VisuMZ['GetActionSequenceSpecialTargetWithFlags']=function(_0x2c111e){const _0x39b88c=_0x5a8ff0;return BattleManager[_0x39b88c(0x571)];},PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x301),_0x2520e4=>{const _0x1170c2=_0x5a8ff0;if(!SceneManager[_0x1170c2(0x5c8)]())return;VisuMZ[_0x1170c2(0x288)](_0x2520e4,_0x2520e4);const _0x5b6b8d=$gameTemp[_0x1170c2(0x985)](),_0x3c9765=BattleManager['_action'],_0x59336c=BattleManager[_0x1170c2(0xbee)],_0xe63703=BattleManager[_0x1170c2(0x35b)]?BattleManager[_0x1170c2(0x35b)][_0x1170c2(0x152)](0x0):[],_0x208d01=BattleManager[_0x1170c2(0xb61)];if(!_0x5b6b8d||!_0x3c9765||!_0x59336c)return;if(!_0x3c9765[_0x1170c2(0x12a)]())return;if(_0x2520e4[_0x1170c2(0x6a8)])_0x208d01[_0x1170c2(0x708)](_0x59336c,_0x3c9765['item']());_0x2520e4['ApplyImmortal']&&_0x208d01[_0x1170c2(0x23b)](_0x1170c2(0x2ac),_0x59336c,_0xe63703,!![]);if(_0x2520e4[_0x1170c2(0x4ba)])_0x208d01[_0x1170c2(0x23b)](_0x1170c2(0x304),_0x59336c,_0x3c9765);if(_0x2520e4[_0x1170c2(0x69a)])_0x208d01[_0x1170c2(0x23b)](_0x1170c2(0x3d1));if(_0x2520e4['CastAnimation'])_0x208d01['push'](_0x1170c2(0x73f),_0x59336c,_0x3c9765);if(_0x2520e4[_0x1170c2(0x418)])_0x208d01[_0x1170c2(0x23b)]('waitForAnimation');_0x5b6b8d[_0x1170c2(0x66a)](_0x1170c2(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Set_WholeActionSet',_0x1c8b14=>{const _0x43f33a=_0x5a8ff0;if(!SceneManager[_0x43f33a(0x5c8)]())return;VisuMZ[_0x43f33a(0x288)](_0x1c8b14,_0x1c8b14);const _0x5dc7a7=$gameTemp[_0x43f33a(0x985)](),_0x5da519=BattleManager[_0x43f33a(0x1f8)],_0x2d4110=BattleManager[_0x43f33a(0xbee)],_0x4cae5b=BattleManager['_allTargets']?BattleManager[_0x43f33a(0x35b)][_0x43f33a(0x152)](0x0):[],_0xf02548=BattleManager[_0x43f33a(0xb61)],_0x460a89=_0x1c8b14[_0x43f33a(0x556)]??![];if(!_0x5dc7a7||!_0x5da519||!_0x2d4110)return;if(!_0x5da519[_0x43f33a(0x12a)]())return;let _0x59902d=_0x460a89?_0xf02548[_0x43f33a(0x590)](_0x2d4110):0x1;for(let _0x4999b6=0x0;_0x4999b6<_0x59902d;_0x4999b6++){_0x460a89&&_0x2d4110[_0x43f33a(0x34b)]()&&_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x725),_0x2d4110,_0x4999b6);if(_0x1c8b14[_0x43f33a(0x4fb)])_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x7e7),_0x2d4110,_0x5da519);if(_0x1c8b14[_0x43f33a(0xa3d)]>0x0)_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x340),_0x1c8b14['WaitCount']);if(_0x1c8b14[_0x43f33a(0x88b)])_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x412),_0x2d4110,_0x4cae5b,_0x5da519[_0x43f33a(0x12a)]()[_0x43f33a(0x759)]);if(_0x1c8b14['WaitForAnimation'])_0xf02548['push']('waitForAnimation');for(const _0x5ceda1 of _0x4cae5b){if(!_0x5ceda1)continue;if(_0x1c8b14[_0x43f33a(0x657)])_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x820),_0x2d4110,_0x5ceda1);}}_0x460a89&&_0x2d4110[_0x43f33a(0x34b)]()&&_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x31d),_0x2d4110);if(_0x1c8b14['ApplyImmortal'])_0xf02548[_0x43f33a(0x23b)](_0x43f33a(0x2ac),_0x2d4110,_0x4cae5b,![]);_0x5dc7a7['setWaitMode'](_0x43f33a(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x383),_0xe73966=>{const _0x265f1a=_0x5a8ff0;if(!SceneManager[_0x265f1a(0x5c8)]())return;VisuMZ['ConvertParams'](_0xe73966,_0xe73966);const _0x4b85d9=$gameTemp[_0x265f1a(0x985)](),_0x55ae05=BattleManager['_action'],_0xf1b9d=BattleManager[_0x265f1a(0xbee)],_0xa6fc05=BattleManager[_0x265f1a(0x35b)]?BattleManager[_0x265f1a(0x35b)][_0x265f1a(0x152)](0x0):[],_0x341183=BattleManager[_0x265f1a(0xb61)],_0x503497=_0xe73966[_0x265f1a(0x556)]??![];if(!_0x4b85d9||!_0x55ae05||!_0xf1b9d)return;if(!_0x55ae05['item']())return;let _0x4c3089=_0x503497?_0x341183[_0x265f1a(0x590)](_0xf1b9d):0x1;for(let _0x56c32b=0x0;_0x56c32b<_0x4c3089;_0x56c32b++){for(const _0x1cda55 of _0xa6fc05){if(!_0x1cda55)continue;_0x503497&&_0xf1b9d[_0x265f1a(0x34b)]()&&_0x341183[_0x265f1a(0x23b)](_0x265f1a(0x725),_0xf1b9d,_0x56c32b);if(_0xe73966[_0x265f1a(0x4fb)])_0x341183[_0x265f1a(0x23b)]('performAction',_0xf1b9d,_0x55ae05);if(_0xe73966[_0x265f1a(0x2fd)]>0x0)_0x341183[_0x265f1a(0x23b)](_0x265f1a(0x340),_0xe73966[_0x265f1a(0x2fd)]);if(_0xe73966[_0x265f1a(0x88b)])_0x341183['push'](_0x265f1a(0x412),_0xf1b9d,[_0x1cda55],_0x55ae05[_0x265f1a(0x12a)]()[_0x265f1a(0x759)]);if(_0xe73966['WaitCount2']>0x0)_0x341183['push'](_0x265f1a(0x340),_0xe73966[_0x265f1a(0x1bd)]);if(_0xe73966[_0x265f1a(0x657)])_0x341183[_0x265f1a(0x23b)](_0x265f1a(0x820),_0xf1b9d,_0x1cda55);}}_0x503497&&_0xf1b9d['isActor']()&&_0x341183['push'](_0x265f1a(0x31d),_0xf1b9d);if(_0xe73966[_0x265f1a(0x4e9)])_0x341183['push'](_0x265f1a(0x2ac),_0xf1b9d,_0xa6fc05,![]);_0x4b85d9[_0x265f1a(0x66a)](_0x265f1a(0x193));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x8a9),_0xf9720e=>{const _0x2a8355=_0x5a8ff0;if(!SceneManager[_0x2a8355(0x5c8)]())return;VisuMZ[_0x2a8355(0x288)](_0xf9720e,_0xf9720e);const _0x518811=$gameTemp[_0x2a8355(0x985)](),_0x511d63=BattleManager[_0x2a8355(0x1f8)],_0x4bb234=BattleManager[_0x2a8355(0xbee)],_0x34c718=BattleManager[_0x2a8355(0x35b)]?BattleManager[_0x2a8355(0x35b)][_0x2a8355(0x152)](0x0):[],_0xac4ef2=BattleManager['_logWindow'];if(!_0x518811||!_0x511d63||!_0x4bb234)return;if(!_0x511d63['item']())return;if(_0xf9720e[_0x2a8355(0x4e9)])_0xac4ef2[_0x2a8355(0x23b)](_0x2a8355(0x2ac),_0x4bb234,_0x34c718,![]);if(_0xf9720e['WaitForNewLine'])_0xac4ef2[_0x2a8355(0x23b)](_0x2a8355(0x80c));if(_0xf9720e['WaitForEffect'])_0xac4ef2[_0x2a8355(0x23b)](_0x2a8355(0x4f1));if(_0xf9720e[_0x2a8355(0xac5)])_0xac4ef2['push'](_0x2a8355(0x9c3));if(_0xf9720e[_0x2a8355(0x52b)])_0xac4ef2[_0x2a8355(0x23b)](_0x2a8355(0x9c6),_0x4bb234);if(_0xf9720e[_0x2a8355(0x69a)])_0xac4ef2[_0x2a8355(0x23b)](_0x2a8355(0x3d1));_0x518811['setWaitMode'](_0x2a8355(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_ChangeAngle',_0x12005e=>{const _0x44221f=_0x5a8ff0;if(!SceneManager[_0x44221f(0x5c8)]())return;if(!Imported[_0x44221f(0x9f4)])return;VisuMZ[_0x44221f(0x288)](_0x12005e,_0x12005e);const _0x5c1b8d=$gameTemp[_0x44221f(0x985)](),_0x1181f9=_0x12005e['WaitForAngle'];if(!_0x5c1b8d)return;$gameScreen[_0x44221f(0x744)](_0x12005e[_0x44221f(0x2db)],_0x12005e[_0x44221f(0x8a5)],_0x12005e[_0x44221f(0xad3)]);if(_0x1181f9)_0x5c1b8d[_0x44221f(0x66a)](_0x44221f(0x8d5));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x53c),_0xb19146=>{const _0x5195da=_0x5a8ff0;if(!SceneManager[_0x5195da(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x5195da(0x288)](_0xb19146,_0xb19146);const _0x138ac6=$gameTemp[_0x5195da(0x985)](),_0x5a777c=_0xb19146['WaitForAngle'];if(!_0x138ac6)return;$gameScreen[_0x5195da(0x744)](0x0,_0xb19146[_0x5195da(0x8a5)],_0xb19146['EasingType']);if(_0x5a777c)_0x138ac6[_0x5195da(0x66a)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x6ac),_0x1ce570=>{const _0x590393=_0x5a8ff0;if(!SceneManager[_0x590393(0x5c8)]())return;if(!Imported[_0x590393(0x9f4)])return;const _0x448847=$gameTemp[_0x590393(0x985)]();if(!_0x448847)return;_0x448847[_0x590393(0x66a)](_0x590393(0x8d5));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x47e),_0x71c309=>{const _0x36a266=_0x5a8ff0;if(!SceneManager[_0x36a266(0x5c8)]())return;VisuMZ['ConvertParams'](_0x71c309,_0x71c309);const _0x47c340=$gameTemp[_0x36a266(0x985)](),_0x5da046=BattleManager['_action'],_0x5d6bf2=BattleManager['_subject'],_0x2d9460=VisuMZ[_0x36a266(0x8e5)](_0x71c309[_0x36a266(0x885)]),_0x93f7f9=_0x71c309[_0x36a266(0x588)],_0x18e57a=BattleManager[_0x36a266(0xb61)];if(!_0x47c340||!_0x5da046||!_0x5d6bf2)return;if(!_0x5da046[_0x36a266(0x12a)]())return;let _0x349a08=_0x5da046['item']()['animationId'];if(_0x349a08<0x0)_0x349a08=_0x5d6bf2[_0x36a266(0xbfe)]();$gameTemp[_0x36a266(0xb09)](_0x2d9460,_0x349a08,_0x93f7f9),_0x71c309['WaitForAnimation']&&_0x47c340[_0x36a266(0x66a)](_0x36a266(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x13f),_0x127f13=>{const _0x51de39=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x51de39(0x288)](_0x127f13,_0x127f13);const _0x46bd51=$gameTemp['getLastPluginCommandInterpreter'](),_0x4818fe=BattleManager[_0x51de39(0xbee)],_0x4d2951=VisuMZ['CreateActionSequenceTargets'](_0x127f13[_0x51de39(0x885)]),_0x2e1324=_0x127f13[_0x51de39(0x588)],_0x560a70=BattleManager[_0x51de39(0xb61)];if(!_0x46bd51||!_0x4818fe)return;const _0x49439a=_0x4818fe[_0x51de39(0xbfe)]();$gameTemp[_0x51de39(0xb09)](_0x4d2951,_0x49439a,_0x2e1324),_0x127f13[_0x51de39(0x418)]&&_0x46bd51[_0x51de39(0x66a)](_0x51de39(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Animation_AttackAnimation2',_0x19658e=>{const _0x791435=_0x5a8ff0;if(!SceneManager[_0x791435(0x5c8)]())return;VisuMZ[_0x791435(0x288)](_0x19658e,_0x19658e);const _0x5befe8=_0x5496c4[_0x791435(0x26a)](_0x19658e[_0x791435(0x29a)]);if(_0x5befe8<=0x0)return;const _0xee4a73=$gameTemp[_0x791435(0x985)](),_0x5496c4=BattleManager['_subject'],_0x40799e=VisuMZ[_0x791435(0x8e5)](_0x19658e['Targets']),_0x235794=_0x19658e[_0x791435(0x588)],_0x3c14e5=BattleManager['_logWindow'];if(!_0xee4a73||!_0x5496c4)return;$gameTemp[_0x791435(0xb09)](_0x40799e,_0x5befe8,_0x235794),_0x19658e[_0x791435(0x418)]&&_0xee4a73['setWaitMode'](_0x791435(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x93b),_0x530f8b=>{const _0x76eb47=_0x5a8ff0;if(!SceneManager[_0x76eb47(0x5c8)]())return;VisuMZ[_0x76eb47(0x288)](_0x530f8b,_0x530f8b);const _0x30ef4d=$gameTemp[_0x76eb47(0x985)](),_0x145888=VisuMZ[_0x76eb47(0x8e5)](_0x530f8b[_0x76eb47(0x885)]),_0xbdd213=_0x530f8b[_0x76eb47(0x6cf)];let _0x30b193=0x0;switch(_0xbdd213[_0x76eb47(0x692)]()[_0x76eb47(0xb20)]()){case'!':case'EXCLAMATION':_0x30b193=0x1;break;case'?':case _0x76eb47(0xa6f):_0x30b193=0x2;break;case _0x76eb47(0x528):case _0x76eb47(0x435):case _0x76eb47(0x3dd):case _0x76eb47(0x9dd):case'MUSICNOTE':_0x30b193=0x3;break;case'HEART':case'LOVE':_0x30b193=0x4;break;case _0x76eb47(0x37e):case _0x76eb47(0x5a8):_0x30b193=0x5;break;case _0x76eb47(0x752):_0x30b193=0x6;break;case'COBWEB':case _0x76eb47(0x67a):case'FRUSTRATION':_0x30b193=0x7;break;case _0x76eb47(0x76e):case _0x76eb47(0xb77):_0x30b193=0x8;break;case'LIGHT':case _0x76eb47(0x97a):case _0x76eb47(0xac0):case _0x76eb47(0x39d):case _0x76eb47(0x629):_0x30b193=0x9;break;case'Z':case'ZZ':case'ZZZ':case'SLEEP':_0x30b193=0xa;break;case _0x76eb47(0x9e3):_0x30b193=0xb;break;case _0x76eb47(0x417):_0x30b193=0xc;break;case _0x76eb47(0x873):_0x30b193=0xd;break;case'USER-DEFINED\x204':_0x30b193=0xe;break;case _0x76eb47(0x8b1):_0x30b193=0xf;break;}for(const _0x4b6ef1 of _0x145888){if(!_0x4b6ef1)continue;$gameTemp[_0x76eb47(0x43b)](_0x4b6ef1,_0x30b193);}_0x530f8b[_0x76eb47(0x960)]&&_0x30ef4d&&(_0x30ef4d['wait'](0x1),_0x30ef4d['setWaitMode']('battleBalloon'));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x3ad),_0x5647a6=>{const _0x4429e3=_0x5a8ff0;if(!SceneManager[_0x4429e3(0x5c8)]())return;if(!Imported[_0x4429e3(0x5b6)])return;VisuMZ[_0x4429e3(0x288)](_0x5647a6,_0x5647a6);const _0x49b366=$gameTemp[_0x4429e3(0x985)](),_0x1d4a55=VisuMZ[_0x4429e3(0x8e5)](_0x5647a6[_0x4429e3(0x885)]),_0x58fdca=_0x5647a6['IconIndex'];for(const _0x80d4f0 of _0x1d4a55){if(!_0x80d4f0)continue;$gameTemp['requestBattleBalloon'](_0x80d4f0,[_0x58fdca]);}_0x5647a6['WaitComplete']&&_0x49b366&&(_0x49b366['wait'](0x1),_0x49b366[_0x4429e3(0x66a)](_0x4429e3(0x2bc)));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Animation_BalloonIconRange',_0x25b412=>{const _0x3c74df=_0x5a8ff0;if(!SceneManager[_0x3c74df(0x5c8)]())return;if(!Imported[_0x3c74df(0x5b6)])return;VisuMZ[_0x3c74df(0x288)](_0x25b412,_0x25b412);const _0x6077b8=$gameTemp[_0x3c74df(0x985)](),_0xa748bd=VisuMZ[_0x3c74df(0x8e5)](_0x25b412['Targets']),_0x3dc651=Math['min'](Number(_0x25b412[_0x3c74df(0x52d)]||0x0),Number(_0x25b412[_0x3c74df(0x6f5)]||0x0)),_0x2c25f5=Math[_0x3c74df(0x6dd)](Number(_0x25b412['startIcon']||0x0),Number(_0x25b412[_0x3c74df(0x6f5)]||0x0)),_0x529859=[];for(let _0x5ae0f6=_0x3dc651;_0x5ae0f6<=_0x2c25f5;_0x5ae0f6++){_0x529859[_0x3c74df(0x23b)](_0x5ae0f6);}for(const _0x1e48fe of _0xa748bd){if(!_0x1e48fe)continue;$gameTemp['requestBattleBalloon'](_0x1e48fe,_0x529859);}_0x25b412[_0x3c74df(0x960)]&&_0x6077b8&&(_0x6077b8[_0x3c74df(0x914)](0x1),_0x6077b8[_0x3c74df(0x66a)](_0x3c74df(0x2bc)));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x55d),_0x3e319b=>{const _0xddff9=_0x5a8ff0;if(!SceneManager[_0xddff9(0x5c8)]())return;if(!Imported[_0xddff9(0x5b6)])return;VisuMZ[_0xddff9(0x288)](_0x3e319b,_0x3e319b);const _0xccc8f7=$gameTemp[_0xddff9(0x985)](),_0x118b43=VisuMZ['CreateActionSequenceTargets'](_0x3e319b[_0xddff9(0x885)]),_0x30dd21=_0x3e319b['icons'];for(const _0xaf5c44 of _0x118b43){if(!_0xaf5c44)continue;$gameTemp[_0xddff9(0x43b)](_0xaf5c44,_0x30dd21);}_0x3e319b[_0xddff9(0x960)]&&_0xccc8f7&&(_0xccc8f7[_0xddff9(0x914)](0x1),_0xccc8f7['setWaitMode'](_0xddff9(0x2bc)));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x3ae),_0x4ec4e2=>{const _0x175100=_0x5a8ff0;if(!SceneManager[_0x175100(0x5c8)]())return;VisuMZ[_0x175100(0x288)](_0x4ec4e2,_0x4ec4e2);const _0x33aa8f=$gameTemp[_0x175100(0x985)](),_0x5b3622=BattleManager['_action'],_0x13a552=_0x4ec4e2[_0x175100(0x588)],_0x31a179=VisuMZ[_0x175100(0x8e5)](_0x4ec4e2['Targets']);if(!_0x33aa8f||!_0x5b3622)return;if(!_0x5b3622[_0x175100(0x12a)]())return;for(const _0xf0664a of _0x31a179){if(!_0xf0664a)continue;_0xf0664a[_0x175100(0x73f)](_0x5b3622,_0x13a552);}if(_0x4ec4e2['WaitForAnimation'])_0x33aa8f[_0x175100(0x66a)](_0x175100(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Animation_ChangeBattlePortrait',_0x4e5b3b=>{const _0x1372dc=_0x5a8ff0;VisuMZ[_0x1372dc(0x288)](_0x4e5b3b,_0x4e5b3b);const _0x76ab14=$gameTemp[_0x1372dc(0x985)](),_0x59f778=VisuMZ[_0x1372dc(0x8e5)](_0x4e5b3b[_0x1372dc(0x885)]),_0x1ccd0b=_0x4e5b3b['Filename'];if(!_0x1ccd0b)return;for(const _0x32cec5 of _0x59f778){if(!_0x32cec5)continue;if(!_0x32cec5[_0x1372dc(0x34b)]())continue;_0x32cec5[_0x1372dc(0x7a6)](_0x1ccd0b);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x1b5),_0x50c347=>{const _0x57ee08=_0x5a8ff0;VisuMZ['ConvertParams'](_0x50c347,_0x50c347);const _0x26315f=_0x50c347[_0x57ee08(0xae8)](),_0x233ef2=$gameActors['actor'](_0x26315f)||null;if(!_0x233ef2){console['log'](_0x57ee08(0x168));return;}const _0x405110=_0x50c347[_0x57ee08(0xab8)]();_0x233ef2['setBattlePortrait'](_0x405110);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x8ff),_0x5ce1b4=>{const _0x5002fd=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5002fd(0x288)](_0x5ce1b4,_0x5ce1b4);const _0xf20771=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ea416=BattleManager[_0x5002fd(0xbee)],_0x481a8d=VisuMZ[_0x5002fd(0x8e5)](_0x5ce1b4['Targets']),_0x307b3a=_0x5ce1b4[_0x5002fd(0x588)];if(!_0xf20771||!_0x5ea416)return;const _0x5e5cf8=$dataSkilles[_0x5ea416[_0x5002fd(0x58a)]()],_0x38754f=_0x5e5cf8[_0x5002fd(0x759)];$gameTemp[_0x5002fd(0xb09)](_0x481a8d,_0x38754f,_0x307b3a),_0x5ce1b4[_0x5002fd(0x418)]&&_0xf20771['setWaitMode'](_0x5002fd(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x641),_0x17881b=>{const _0x31b789=_0x5a8ff0;if(!SceneManager[_0x31b789(0x5c8)]())return;VisuMZ['ConvertParams'](_0x17881b,_0x17881b);const _0x4be171=$gameTemp[_0x31b789(0x985)](),_0x28ab13=VisuMZ[_0x31b789(0x8e5)](_0x17881b['Targets']),_0x34cbc2=Number(_0x17881b['ItemID']||0x1),_0x4a6f8b=$dataItems[_0x34cbc2],_0x38a6c3=_0x17881b[_0x31b789(0x588)];if(!_0x4be171)return;if(!_0x4a6f8b)return;let _0x3b4b6d=_0x4a6f8b['animationId'];$gameTemp[_0x31b789(0xb09)](_0x28ab13,_0x3b4b6d,_0x38a6c3),_0x17881b[_0x31b789(0x418)]&&_0x4be171[_0x31b789(0x66a)](_0x31b789(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x439),_0x8ce9e=>{const _0x10a27b=_0x5a8ff0;if(!SceneManager[_0x10a27b(0x973)])return;if(!SceneManager[_0x10a27b(0x973)][_0x10a27b(0x566)])return;if(!Imported[_0x10a27b(0x610)])return;VisuMZ['ConvertParams'](_0x8ce9e,_0x8ce9e);const _0x2e1b4f=$gameTemp['getLastPluginCommandInterpreter'](),_0x441603=Math[_0x10a27b(0xb41)](_0x8ce9e[_0x10a27b(0x399)]),_0x5dbf52=Math[_0x10a27b(0xb41)](_0x8ce9e['pointY']);$gameTemp['requestPointAnimation'](_0x441603,_0x5dbf52,_0x8ce9e['AnimationID'],_0x8ce9e['Mirror'],_0x8ce9e[_0x10a27b(0x56b)]),_0x8ce9e[_0x10a27b(0x960)]&&_0x2e1b4f&&(SceneManager[_0x10a27b(0x973)][_0x10a27b(0x566)]['updatePointAnimations'](),_0x2e1b4f[_0x10a27b(0x66a)](_0x10a27b(0x300)));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x154),_0x150fd5=>{const _0x25b25a=_0x5a8ff0;if(!SceneManager[_0x25b25a(0x5c8)]())return;VisuMZ[_0x25b25a(0x288)](_0x150fd5,_0x150fd5);const _0x22b73a=$gameTemp[_0x25b25a(0x985)](),_0x35034e=VisuMZ['CreateActionSequenceTargets'](_0x150fd5[_0x25b25a(0x885)]),_0x42565d=_0x150fd5[_0x25b25a(0x4da)],_0x3cbc60=_0x150fd5['Mirror'];if(!_0x22b73a)return;$gameTemp['requestAnimation'](_0x35034e,_0x42565d,_0x3cbc60);if(_0x150fd5[_0x25b25a(0x418)])_0x22b73a[_0x25b25a(0x66a)](_0x25b25a(0x300));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x46e),_0x40e9aa=>{const _0x5ac786=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5ac786(0x288)](_0x40e9aa,_0x40e9aa);const _0x5b5fba=$gameTemp[_0x5ac786(0x985)](),_0x438e39=VisuMZ[_0x5ac786(0x8e5)](_0x40e9aa['Targets']),_0x1ad20f=Number(_0x40e9aa[_0x5ac786(0x4da)])||0x1,_0x314645=_0x40e9aa['Mirror'];if(!_0x5b5fba)return;$gameTemp[_0x5ac786(0xb09)](_0x438e39,_0x1ad20f,_0x314645);if(_0x40e9aa[_0x5ac786(0x418)])_0x5b5fba['setWaitMode'](_0x5ac786(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Animation_SkillAnimation',_0x397c61=>{const _0x3d3657=_0x5a8ff0;if(!SceneManager[_0x3d3657(0x5c8)]())return;VisuMZ[_0x3d3657(0x288)](_0x397c61,_0x397c61);const _0x3672c9=$gameTemp[_0x3d3657(0x985)](),_0x336696=VisuMZ[_0x3d3657(0x8e5)](_0x397c61[_0x3d3657(0x885)]),_0x578a68=Number(_0x397c61[_0x3d3657(0xa7d)]||0x1),_0x2b9e06=$dataSkills[_0x578a68],_0x5a294b=_0x397c61[_0x3d3657(0x588)];if(!_0x3672c9)return;if(!_0x2b9e06)return;let _0x5ab565=_0x2b9e06['animationId'];$gameTemp[_0x3d3657(0xb09)](_0x336696,_0x5ab565,_0x5a294b),_0x397c61['WaitForAnimation']&&_0x3672c9[_0x3d3657(0x66a)](_0x3d3657(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xa42),_0x1cfa40=>{const _0x3806ad=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x432c2f=$gameTemp[_0x3806ad(0x985)]();if(!_0x432c2f)return;_0x432c2f[_0x3806ad(0x66a)](_0x3806ad(0x300));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x807),_0x361824=>{const _0x519d2f=_0x5a8ff0;if(!SceneManager[_0x519d2f(0x5c8)]())return;VisuMZ[_0x519d2f(0x288)](_0x361824,_0x361824);const _0x23967c=BattleManager[_0x519d2f(0xb61)],_0x263f61=_0x361824[_0x519d2f(0xac8)]&&Imported[_0x519d2f(0xb25)];_0x23967c[_0x519d2f(0xaaf)](_0x361824['Text']),_0x263f61&&Imported[_0x519d2f(0xb25)]&&$gameSystem['addTextToCombatLog'](_0x361824[_0x519d2f(0x502)]||'',_0x361824[_0x519d2f(0x707)]||0x0);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_BattleLog_Clear',_0x1fcc32=>{const _0x27f9ba=_0x5a8ff0;if(!SceneManager[_0x27f9ba(0x5c8)]())return;const _0x3cd150=BattleManager[_0x27f9ba(0xb61)];_0x3cd150[_0x27f9ba(0x9c3)]();}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x1bc),_0xf9661=>{const _0x5305bd=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x14e052=$gameTemp['getLastPluginCommandInterpreter'](),_0x58feb7=BattleManager['_action'],_0x37bd5c=BattleManager[_0x5305bd(0xbee)],_0x22de73=BattleManager[_0x5305bd(0xb61)];if(!_0x14e052||!_0x58feb7||!_0x37bd5c)return;if(!_0x58feb7[_0x5305bd(0x12a)]())return;_0x22de73[_0x5305bd(0x708)](_0x37bd5c,_0x58feb7['item']()),_0x14e052[_0x5305bd(0x66a)](_0x5305bd(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xa89),_0x11d680=>{const _0x246df9=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0xa4f8d7=BattleManager[_0x246df9(0xb61)];_0xa4f8d7[_0x246df9(0x139)]();}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x330),_0x3e5533=>{const _0x4d4869=_0x5a8ff0;if(!SceneManager[_0x4d4869(0x5c8)]())return;const _0x1f05ee=BattleManager[_0x4d4869(0xb61)];_0x1f05ee[_0x4d4869(0x99a)]();}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xbda),_0x15be2a=>{const _0x21a8e3=_0x5a8ff0;if(!SceneManager[_0x21a8e3(0x5c8)]())return;const _0x121f21=BattleManager[_0x21a8e3(0xb61)];_0x121f21[_0x21a8e3(0x38a)]();}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x360),_0x34ce60=>{const _0x5e2485=_0x5a8ff0;if(!SceneManager[_0x5e2485(0x5c8)]())return;VisuMZ[_0x5e2485(0x288)](_0x34ce60,_0x34ce60),SceneManager[_0x5e2485(0x973)][_0x5e2485(0x286)](_0x34ce60['ShowHide']);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xa38),_0x12fc2d=>{const _0x40a103=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x479481=$gameTemp[_0x40a103(0x985)]();_0x479481['setWaitMode'](_0x40a103(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x62c),_0x298298=>{const _0x4dd500=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x2c7dd4=$gameTemp['getLastPluginCommandInterpreter'](),_0x5bc938=BattleManager[_0x4dd500(0xb61)];_0x5bc938[_0x4dd500(0x80c)](),_0x2c7dd4[_0x4dd500(0x66a)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x79a),_0x46c05a=>{const _0x137613=_0x5a8ff0;if(!SceneManager[_0x137613(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x137613(0x288)](_0x46c05a,_0x46c05a);const _0x487835=$gameScreen['battleCameraData']();_0x487835[_0x137613(0x851)]=_0x46c05a['Setting'];}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x24e),_0x296dac=>{const _0x1df5f6=_0x5a8ff0;if(!SceneManager[_0x1df5f6(0x5c8)]())return;if(!Imported[_0x1df5f6(0x9f4)])return;VisuMZ[_0x1df5f6(0x288)](_0x296dac,_0x296dac);const _0xb71a7=$gameTemp[_0x1df5f6(0x985)](),_0x33471f=_0x296dac[_0x1df5f6(0x995)];$gameScreen[_0x1df5f6(0x287)](_0x296dac[_0x1df5f6(0x113)],_0x296dac['FocusY'],_0x296dac['Duration'],_0x296dac[_0x1df5f6(0xad3)]);if(_0x33471f)_0xb71a7[_0x1df5f6(0x66a)](_0x1df5f6(0x1be));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x248),_0x29bc78=>{const _0x3223b3=_0x5a8ff0;if(!SceneManager[_0x3223b3(0x5c8)]())return;if(!Imported[_0x3223b3(0x9f4)])return;VisuMZ[_0x3223b3(0x288)](_0x29bc78,_0x29bc78);const _0x51682a=$gameTemp[_0x3223b3(0x985)](),_0x17f74e=VisuMZ[_0x3223b3(0x8e5)](_0x29bc78[_0x3223b3(0x885)]),_0x42d476=_0x29bc78[_0x3223b3(0x995)];$gameScreen[_0x3223b3(0x2c4)](_0x17f74e,_0x29bc78['Duration'],_0x29bc78[_0x3223b3(0xad3)]);if(_0x42d476)_0x51682a[_0x3223b3(0x66a)](_0x3223b3(0x1be));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Camera_Offset',_0x1d51ba=>{const _0x43446e=_0x5a8ff0;if(!SceneManager[_0x43446e(0x5c8)]())return;if(!Imported[_0x43446e(0x9f4)])return;VisuMZ[_0x43446e(0x288)](_0x1d51ba,_0x1d51ba);const _0x3fa8dc=$gameTemp[_0x43446e(0x985)](),_0x1c34c7=_0x1d51ba['WaitForCamera'];$gameScreen[_0x43446e(0xbaa)](_0x1d51ba[_0x43446e(0x45c)],_0x1d51ba[_0x43446e(0x684)],_0x1d51ba[_0x43446e(0x8a5)],_0x1d51ba[_0x43446e(0xad3)]);if(_0x1c34c7)_0x3fa8dc[_0x43446e(0x66a)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x63c),_0x1b7800=>{const _0x2fccad=_0x5a8ff0;if(!SceneManager[_0x2fccad(0x5c8)]())return;if(!Imported[_0x2fccad(0x9f4)])return;VisuMZ['ConvertParams'](_0x1b7800,_0x1b7800);const _0x5548e0=$gameTemp[_0x2fccad(0x985)](),_0x3cc51b=_0x1b7800[_0x2fccad(0xaa0)],_0x33e45d=_0x1b7800[_0x2fccad(0x433)],_0x567115=_0x1b7800[_0x2fccad(0x995)];if(_0x3cc51b){const _0xe4079e=Math['round'](Graphics[_0x2fccad(0x3fa)]/0x2),_0x2fc731=Math[_0x2fccad(0xb41)](Graphics[_0x2fccad(0x75c)]/0x2);$gameScreen[_0x2fccad(0x287)](_0xe4079e,_0x2fc731,_0x1b7800[_0x2fccad(0x8a5)],_0x1b7800[_0x2fccad(0xad3)]);}_0x33e45d&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x1b7800[_0x2fccad(0x8a5)],_0x1b7800['EasingType']);if(_0x567115)_0x5548e0[_0x2fccad(0x66a)](_0x2fccad(0x1be));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xb9c),_0x3c35f1=>{const _0x4627b7=_0x5a8ff0;if(!SceneManager[_0x4627b7(0x5c8)]())return;if(!Imported[_0x4627b7(0x9f4)])return;const _0x59f31e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x59f31e)return;_0x59f31e['setWaitMode'](_0x4627b7(0x1be));}),VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x7b7)]=function(_0x462954){const _0x9c1977=_0x5a8ff0;_0x462954[_0x9c1977(0xb2a)]='';const _0x54e4a3=VisuMZ['VisualCutinEffect'][_0x9c1977(0x7b7)](_0x462954),_0x561b8f=VisuMZ[_0x9c1977(0x8e5)](_0x462954[_0x9c1977(0x885)])[0x0]||null;return _0x561b8f&&(_0x54e4a3[_0x9c1977(0xb2a)]=_0x561b8f[_0x9c1977(0x43f)](),_0x54e4a3[_0x9c1977(0x748)]=_0x561b8f[_0x9c1977(0x432)](),_0x54e4a3[_0x9c1977(0xb5f)]=_0x561b8f[_0x9c1977(0x3d3)](),_0x54e4a3[_0x9c1977(0xbed)]=_0x561b8f[_0x9c1977(0x90d)](),_0x561b8f[_0x9c1977(0x172)]()&&(_0x561b8f[_0x9c1977(0xa21)]()&&(_0x54e4a3[_0x9c1977(0x9a8)]=!_0x54e4a3['portraitFlipHorz']),_0x561b8f[_0x9c1977(0x637)]()&&(_0x54e4a3['portraitFlipVert']=!_0x54e4a3[_0x9c1977(0x5cd)]),_0x54e4a3[_0x9c1977(0xbed)]==='svActor'&&(_0x54e4a3['portraitFlipHorz']=!_0x54e4a3[_0x9c1977(0x9a8)]),_0x462954['ExtraSettings']['parallaxScrollXinvertEnemy']&&(_0x54e4a3[_0x9c1977(0x51a)]*=-0x1),_0x462954['ExtraSettings']['parallaxScrollYinvertEnemy']&&(_0x54e4a3[_0x9c1977(0x61f)]*=-0x1),_0x54e4a3[_0x9c1977(0x893)]+=_0x462954[_0x9c1977(0x363)]['parallaxHueEnemyModifier']??0x0)),_0x54e4a3;},PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x70c),_0x316199=>{const _0x181c4d=_0x5a8ff0;if(!SceneManager[_0x181c4d(0x5c8)]())return;if(!Imported[_0x181c4d(0x3ca)])return;VisuMZ[_0x181c4d(0x288)](_0x316199,_0x316199);const _0x595b2e=VisuMZ[_0x181c4d(0xbb3)][_0x181c4d(0x7b7)](_0x316199);SceneManager[_0x181c4d(0x973)][_0x181c4d(0x544)](_0x595b2e);const _0xacb560=$gameTemp[_0x181c4d(0x985)]();_0xacb560&&_0x316199[_0x181c4d(0x976)]&&_0xacb560[_0x181c4d(0x66a)]('cutinEnter');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x481),_0x572c67=>{const _0x10edb3=_0x5a8ff0;if(!SceneManager[_0x10edb3(0x5c8)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x10edb3(0x288)](_0x572c67,_0x572c67),SceneManager[_0x10edb3(0x973)][_0x10edb3(0xad9)]();const _0x1e970c=$gameTemp[_0x10edb3(0x985)]();_0x1e970c&&_0x572c67[_0x10edb3(0x6db)]&&_0x1e970c[_0x10edb3(0x66a)](_0x10edb3(0x7ff));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x55b),_0x19f6f2=>{const _0x3081be=_0x5a8ff0;if(!SceneManager[_0x3081be(0x5c8)]())return;if(!Imported[_0x3081be(0x3ca)])return;VisuMZ[_0x3081be(0x288)](_0x19f6f2,_0x19f6f2);const _0x168394=_0x19f6f2[_0x3081be(0xb69)][_0x3081be(0x44e)]()[_0x3081be(0xb20)]();SceneManager[_0x3081be(0x973)][_0x3081be(0xa19)](_0x168394);const _0x4bc8c6=$gameTemp[_0x3081be(0x985)]();_0x4bc8c6&&_0x19f6f2[_0x3081be(0x6db)]&&_0x4bc8c6[_0x3081be(0x66a)](_0x3081be(0x7ff));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Cutin_WaitForEntrance',_0x184535=>{const _0x3193b4=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3193b4(0x3ca)])return;const _0x586ad4=$gameTemp[_0x3193b4(0x985)]();_0x586ad4[_0x3193b4(0x66a)](_0x3193b4(0x1f0));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x242),_0x2a85d9=>{const _0x449a79=_0x5a8ff0;if(!SceneManager[_0x449a79(0x5c8)]())return;if(!Imported[_0x449a79(0x3ca)])return;const _0x5bbb64=$gameTemp[_0x449a79(0x985)]();_0x5bbb64['setWaitMode']('cutinExit');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x52c),_0x303784=>{const _0x38f1f9=_0x5a8ff0;if(!SceneManager[_0x38f1f9(0x5c8)]())return;if(!Imported[_0x38f1f9(0x6bd)])return;VisuMZ[_0x38f1f9(0x288)](_0x303784,_0x303784);const _0x3518b2=VisuMZ[_0x38f1f9(0x8e5)](_0x303784[_0x38f1f9(0x885)]),_0x402921=_0x303784[_0x38f1f9(0x319)]['toLowerCase']()[_0x38f1f9(0xb20)]();for(const _0x1b05b0 of _0x3518b2){if(!_0x1b05b0)continue;_0x1b05b0[_0x38f1f9(0x93f)](_0x402921);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_DB_DragonbonesTimeScale',_0x106c75=>{const _0x94a03=_0x5a8ff0;if(!SceneManager[_0x94a03(0x5c8)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x94a03(0x288)](_0x106c75,_0x106c75);const _0x22d1d6=VisuMZ[_0x94a03(0x8e5)](_0x106c75[_0x94a03(0x885)]),_0x1da1ef=_0x106c75['TimeScale'];for(const _0x1d5b4e of _0x22d1d6){if(!_0x1d5b4e)continue;_0x1d5b4e[_0x94a03(0x704)]()[_0x94a03(0x487)]=_0x1da1ef;}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Element_AddElements',_0x24a9a4=>{const _0x18cbe=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x18cbe(0x9ad)])return;VisuMZ[_0x18cbe(0x288)](_0x24a9a4,_0x24a9a4);const _0x113253=BattleManager[_0x18cbe(0x1f8)],_0x1caf5b=_0x24a9a4[_0x18cbe(0x493)];if(!_0x113253)return;_0x113253[_0x18cbe(0x949)]=_0x1caf5b;}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x604),_0x371050=>{const _0x5e1abe=_0x5a8ff0;if(!SceneManager[_0x5e1abe(0x5c8)]())return;if(!Imported[_0x5e1abe(0x9ad)])return;const _0x50a3bf=BattleManager[_0x5e1abe(0x1f8)];if(!_0x50a3bf)return;_0x50a3bf[_0x5e1abe(0x68d)]();}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xac6),_0x4eb15b=>{const _0x333883=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x333883(0x9ad)])return;VisuMZ[_0x333883(0x288)](_0x4eb15b,_0x4eb15b);const _0x28fba9=BattleManager[_0x333883(0x1f8)],_0x507032=_0x4eb15b[_0x333883(0x493)];if(!_0x28fba9)return;_0x28fba9[_0x333883(0x3d6)]=_0x507032;}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x2ba),_0xe2f03b=>{const _0x1bdf71=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x42b588=BattleManager[_0x1bdf71(0x1f8)];if(!_0x42b588)return;_0x42b588[_0x1bdf71(0x826)]=!![];}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x992),_0x145097=>{const _0x4f2bfa=_0x5a8ff0;VisuMZ[_0x4f2bfa(0x9e8)]['ActSeq_Grid_ActionAnimationAtNode'](_0x145097);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x95e),_0x3cb43c=>{const _0xaafa7a=_0x5a8ff0;VisuMZ['BattleGridSystem'][_0xaafa7a(0x95e)](_0x3cb43c);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x47b),_0x2188c6=>{const _0x342f8a=_0x5a8ff0;VisuMZ[_0x342f8a(0x9e8)][_0x342f8a(0x47b)](_0x2188c6);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x17d),_0x564b72=>{const _0x3877a0=_0x5a8ff0;VisuMZ[_0x3877a0(0x9e8)][_0x3877a0(0x47b)](_0x564b72);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Grid_AnimationIDAtNode',_0x18d63b=>{const _0x2cbdfc=_0x5a8ff0;VisuMZ[_0x2cbdfc(0x9e8)]['ActSeq_Grid_AnimationIDAtNode'](_0x18d63b);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x261),_0x592602=>{const _0x312c55=_0x5a8ff0;VisuMZ['BattleGridSystem'][_0x312c55(0x261)](_0x592602);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xb5a),_0x3eb04f=>{const _0x4117d0=_0x5a8ff0;VisuMZ[_0x4117d0(0x9e8)][_0x4117d0(0xb5a)](_0x3eb04f);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x535),_0x53e1bc=>{const _0x206b04=_0x5a8ff0;VisuMZ[_0x206b04(0x9e8)][_0x206b04(0x535)](_0x53e1bc);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x187),_0x23636a=>{const _0x500331=_0x5a8ff0;VisuMZ[_0x500331(0x9e8)][_0x500331(0x187)](_0x23636a);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Grid_PullToTargetNode',_0x5d2b87=>{const _0x1f1e3b=_0x5a8ff0;VisuMZ[_0x1f1e3b(0x9e8)]['ActSeq_Grid_PullToTargetNode'](_0x5d2b87);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x1b9),_0x3455e6=>{const _0x56f416=_0x5a8ff0;VisuMZ[_0x56f416(0x9e8)]['ActSeq_Grid_PushFromTargetNode'](_0x3455e6);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Grid_RemovePassiveStatesFromNode',_0x10bf67=>{const _0x4b1be2=_0x5a8ff0;VisuMZ[_0x4b1be2(0x9e8)][_0x4b1be2(0x8dd)](_0x10bf67);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xfd),_0x4d6357=>{const _0x416c19=_0x5a8ff0;VisuMZ[_0x416c19(0x9e8)]['ActSeq_Grid_RemoveTriggerFromNode'](_0x4d6357);}),PluginManager['registerCommand'](pluginData['name'],_0x5a8ff0(0x3a9),_0x4f008b=>{const _0x4f8425=_0x5a8ff0;VisuMZ[_0x4f8425(0x9e8)][_0x4f8425(0x3a9)](_0x4f008b);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x2fc),_0x147904=>{const _0x108ae0=_0x5a8ff0;VisuMZ[_0x108ae0(0x9e8)][_0x108ae0(0x2fc)](_0x147904);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Horror_Clear',_0x1143ff=>{const _0x7059e8=_0x5a8ff0;if(!Imported[_0x7059e8(0x6ef)])return;if(!SceneManager[_0x7059e8(0x5c8)]())return;VisuMZ[_0x7059e8(0x288)](_0x1143ff,_0x1143ff);const _0x57050a=VisuMZ[_0x7059e8(0x8e5)](_0x1143ff[_0x7059e8(0x885)]);for(const _0x3f38e8 of _0x57050a){if(!_0x3f38e8)continue;_0x3f38e8[_0x7059e8(0x36c)](_0x7059e8(0x6b5)),_0x3f38e8[_0x7059e8(0x36c)]('glitch'),_0x3f38e8['removeHorrorEffect']('tv'),_0x3f38e8[_0x7059e8(0xb63)]();}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x515),_0x5e6ac1=>{const _0x31bebc=_0x5a8ff0;if(!Imported[_0x31bebc(0x6ef)])return;if(!SceneManager[_0x31bebc(0x5c8)]())return;VisuMZ[_0x31bebc(0x288)](_0x5e6ac1,_0x5e6ac1);const _0x5141be=VisuMZ[_0x31bebc(0x8e5)](_0x5e6ac1['Targets']),_0x1c838d=_0x31bebc(0x31e);_0x5e6ac1[_0x31bebc(0x4ad)]=Math[_0x31bebc(0x447)](_0x5e6ac1[_0x31bebc(0x184)]/0x2),_0x5e6ac1[_0x31bebc(0x847)]=_0x5e6ac1[_0x31bebc(0x184)],_0x5e6ac1[_0x31bebc(0x768)]=!![];for(const _0x4a3dd2 of _0x5141be){if(!_0x4a3dd2)continue;_0x4a3dd2[_0x31bebc(0x54d)](_0x1c838d,_0x5e6ac1);}$gamePlayer[_0x31bebc(0x38a)]();}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Horror_GlitchRemove',_0x90966=>{const _0x334fe6=_0x5a8ff0;if(!Imported[_0x334fe6(0x6ef)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x334fe6(0x288)](_0x90966,_0x90966);const _0x41be51=VisuMZ[_0x334fe6(0x8e5)](_0x90966[_0x334fe6(0x885)]);for(const _0x45508c of _0x41be51){if(!_0x45508c)continue;_0x45508c[_0x334fe6(0x36c)](_0x334fe6(0x31e));}$gamePlayer['refresh']();}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xb2f),_0x59c4b0=>{const _0xed756b=_0x5a8ff0;if(!Imported[_0xed756b(0x6ef)])return;if(!SceneManager[_0xed756b(0x5c8)]())return;VisuMZ['ConvertParams'](_0x59c4b0,_0x59c4b0);const _0x23d19c=VisuMZ['CreateActionSequenceTargets'](_0x59c4b0['Targets']),_0x27b8b0='noise';for(const _0x5c46d8 of _0x23d19c){if(!_0x5c46d8)continue;_0x5c46d8['setHorrorEffectSettings'](_0x27b8b0,_0x59c4b0);}$gamePlayer[_0xed756b(0x38a)]();}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x816),_0x4755d7=>{const _0x4f06ea=_0x5a8ff0;if(!Imported[_0x4f06ea(0x6ef)])return;if(!SceneManager[_0x4f06ea(0x5c8)]())return;VisuMZ['ConvertParams'](_0x4755d7,_0x4755d7);const _0x4f0808=VisuMZ['CreateActionSequenceTargets'](_0x4755d7[_0x4f06ea(0x885)]);for(const _0x1238a1 of _0x4f0808){if(!_0x1238a1)continue;_0x1238a1['removeHorrorEffect']('noise');}$gamePlayer[_0x4f06ea(0x38a)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_TVCreate',_0x27750b=>{const _0x4251d0=_0x5a8ff0;if(!Imported[_0x4251d0(0x6ef)])return;if(!SceneManager[_0x4251d0(0x5c8)]())return;VisuMZ[_0x4251d0(0x288)](_0x27750b,_0x27750b);const _0x4975a0=VisuMZ['CreateActionSequenceTargets'](_0x27750b[_0x4251d0(0x885)]),_0x829ebf='tv';for(const _0x574a53 of _0x4975a0){if(!_0x574a53)continue;_0x574a53[_0x4251d0(0x54d)](_0x829ebf,_0x27750b);}$gamePlayer['refresh']();}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x616),_0xf09700=>{const _0x40079f=_0x5a8ff0;if(!Imported[_0x40079f(0x6ef)])return;if(!SceneManager[_0x40079f(0x5c8)]())return;VisuMZ[_0x40079f(0x288)](_0xf09700,_0xf09700);const _0xc7c183=VisuMZ['CreateActionSequenceTargets'](_0xf09700['Targets']);for(const _0xde2ee6 of _0xc7c183){if(!_0xde2ee6)continue;_0xde2ee6[_0x40079f(0x36c)]('tv');}$gamePlayer[_0x40079f(0x38a)]();}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Impact_BlueRedInvert',_0x25f7b4=>{const _0x221442=_0x5a8ff0;if(!Imported[_0x221442(0xa85)])return;const _0x4cfbe1=SceneManager['_scene'][_0x221442(0x566)];if(!_0x4cfbe1)return;if(VisuMZ[_0x221442(0xb1d)]['version']<=1.04){alert(_0x221442(0xb9e)),SceneManager['exit']();return;}VisuMZ[_0x221442(0x288)](_0x25f7b4,_0x25f7b4);const _0x3aa85a=_0x25f7b4[_0x221442(0x448)];_0x4cfbe1['setupBlueRedInvertImpactFilter'](_0x3aa85a);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Impact_ColorBreak',_0x35b1fd=>{const _0x1149c8=_0x5a8ff0;if(!SceneManager[_0x1149c8(0x5c8)]())return;if(!Imported[_0x1149c8(0xa85)])return;const _0x2f118b=SceneManager[_0x1149c8(0x973)][_0x1149c8(0x566)];if(!_0x2f118b)return;VisuMZ[_0x1149c8(0x288)](_0x35b1fd,_0x35b1fd);const _0x3c4c87=_0x35b1fd[_0x1149c8(0x9a1)]||0x1,_0x3d325f=_0x35b1fd[_0x1149c8(0x8a5)]||0x1,_0x48855a=_0x35b1fd[_0x1149c8(0xad3)]||'Linear';_0x2f118b['setupRgbSplitImpactFilter'](_0x3c4c87,_0x3d325f,_0x48855a);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x4d6),_0x507057=>{const _0xe13d81=_0x5a8ff0;if(!Imported[_0xe13d81(0xa85)])return;const _0x1b8b30=SceneManager[_0xe13d81(0x973)][_0xe13d81(0x566)];if(!_0x1b8b30)return;if(VisuMZ[_0xe13d81(0xb1d)][_0xe13d81(0x978)]<=1.04){alert(_0xe13d81(0xb9e)),SceneManager['exit']();return;}VisuMZ[_0xe13d81(0x288)](_0x507057,_0x507057);const _0x54869e=_0x507057[_0xe13d81(0x448)];_0x1b8b30[_0xe13d81(0x199)](_0x54869e);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x33c),_0x142a4c=>{const _0x7e2ea=_0x5a8ff0;if(!SceneManager[_0x7e2ea(0x5c8)]())return;if(!Imported[_0x7e2ea(0xa85)])return;const _0x59c723=SceneManager['_scene'][_0x7e2ea(0x566)];if(!_0x59c723)return;VisuMZ[_0x7e2ea(0x288)](_0x142a4c,_0x142a4c);const _0x22b85e=Number(_0x142a4c[_0x7e2ea(0x2db)])||0x0,_0x3675c5=Number(_0x142a4c[_0x7e2ea(0x79c)]),_0x3be9f4=_0x142a4c[_0x7e2ea(0x8a5)]||0x1,_0x835544=_0x142a4c[_0x7e2ea(0xad3)]||_0x7e2ea(0x65b);_0x59c723[_0x7e2ea(0xad5)](_0x22b85e,_0x3675c5,_0x3be9f4,_0x835544);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Impact_MotionBlurTarget',_0x3a6033=>{const _0x4b1a82=_0x5a8ff0;if(!SceneManager[_0x4b1a82(0x5c8)]())return;if(!Imported[_0x4b1a82(0xa85)])return;const _0x1e71e2=SceneManager[_0x4b1a82(0x973)]['_spriteset'];if(!_0x1e71e2)return;VisuMZ[_0x4b1a82(0x288)](_0x3a6033,_0x3a6033);const _0x2e4a81=Number(_0x3a6033[_0x4b1a82(0x2db)])||0x0,_0x51f090=Number(_0x3a6033[_0x4b1a82(0x79c)]),_0x484958=_0x3a6033[_0x4b1a82(0x8a5)]||0x1,_0xe5cc4a=_0x3a6033[_0x4b1a82(0xad3)]||_0x4b1a82(0x65b),_0x150eb7=VisuMZ['CreateActionSequenceTargets'](_0x3a6033[_0x4b1a82(0x885)]);for(const _0x564746 of _0x150eb7){if(!_0x564746)continue;if(!_0x564746[_0x4b1a82(0x407)]())continue;_0x564746[_0x4b1a82(0x407)]()[_0x4b1a82(0xad5)](_0x2e4a81,_0x51f090,_0x484958,_0xe5cc4a);}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Impact_MotionTrailCreate',_0x5ba4d0=>{const _0x5256c0=_0x5a8ff0;if(!SceneManager[_0x5256c0(0x5c8)]())return;if(!Imported[_0x5256c0(0xa85)])return;VisuMZ['ConvertParams'](_0x5ba4d0,_0x5ba4d0);const _0xfcc346={'delay':_0x5ba4d0[_0x5256c0(0x1c1)],'duration':_0x5ba4d0[_0x5256c0(0x897)],'hue':_0x5ba4d0[_0x5256c0(0x30a)],'opacityStart':_0x5ba4d0[_0x5256c0(0xa23)],'tone':_0x5ba4d0[_0x5256c0(0x9ee)],'visible':!![]},_0x1e580c=VisuMZ[_0x5256c0(0x8e5)](_0x5ba4d0[_0x5256c0(0x885)]);for(const _0x495eba of _0x1e580c){if(!_0x495eba)continue;_0x495eba[_0x5256c0(0x132)](_0xfcc346);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x84f),_0x37dac9=>{const _0x449345=_0x5a8ff0;if(!SceneManager[_0x449345(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x37dac9,_0x37dac9);const _0x43928d=VisuMZ[_0x449345(0x8e5)](_0x37dac9['Targets']);for(const _0x1f00f4 of _0x43928d){if(!_0x1f00f4)continue;_0x1f00f4[_0x449345(0x54b)]();}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x1ee),_0x3ab50d=>{const _0x30a8e0=_0x5a8ff0;if(!Imported[_0x30a8e0(0xa85)])return;const _0x1c6b0f=SceneManager[_0x30a8e0(0x973)][_0x30a8e0(0x566)];if(!_0x1c6b0f)return;if(VisuMZ['ActSeqImpact'][_0x30a8e0(0x978)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x30a8e0(0x288)](_0x3ab50d,_0x3ab50d);const _0x4a549b=_0x3ab50d[_0x30a8e0(0x448)];_0x1c6b0f['setupNegativeImpactFilter'](_0x4a549b);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x9cd),_0x105318=>{const _0x1b294f=_0x5a8ff0;if(!Imported[_0x1b294f(0xa85)])return;const _0x345db3=SceneManager[_0x1b294f(0x973)][_0x1b294f(0x566)];if(!_0x345db3)return;if(VisuMZ[_0x1b294f(0xb1d)][_0x1b294f(0x978)]<=1.04){alert(_0x1b294f(0xb9e)),SceneManager[_0x1b294f(0xad2)]();return;}VisuMZ[_0x1b294f(0x288)](_0x105318,_0x105318);const _0x55ab19=_0x105318['Enable'];_0x345db3[_0x1b294f(0x20a)](_0x55ab19);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0xa62858=>{const _0x1ef8c2=_0x5a8ff0;if(!Imported[_0x1ef8c2(0xa85)])return;const _0x1a1f0d=SceneManager['_scene'][_0x1ef8c2(0x566)];if(!_0x1a1f0d)return;VisuMZ['ConvertParams'](_0xa62858,_0xa62858);const _0x31b036=_0xa62858['X']||0x0,_0x511fde=_0xa62858['Y']||0x0,_0x3d7945=_0xa62858['Amp']||0x0,_0x545130=_0xa62858[_0x1ef8c2(0x14a)]||0x0,_0x552ee9=_0xa62858[_0x1ef8c2(0x8a5)]||0x1;_0x1a1f0d['setupShockwaveImpactFilter'](_0x31b036,_0x511fde,_0x3d7945,_0x545130,_0x552ee9);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x77d),_0x235ab1=>{const _0x53b2e2=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x10ab30=SceneManager[_0x53b2e2(0x973)][_0x53b2e2(0x566)];if(!_0x10ab30)return;VisuMZ[_0x53b2e2(0x288)](_0x235ab1,_0x235ab1);const _0x18ae13=VisuMZ[_0x53b2e2(0x8e5)](_0x235ab1[_0x53b2e2(0x885)]),_0x5c1c39=_0x235ab1['TargetLocation'],_0x5daaf0=_0x235ab1[_0x53b2e2(0x45c)]||0x0,_0x172efd=_0x235ab1[_0x53b2e2(0x684)]||0x0,_0x5d2f9e=_0x235ab1[_0x53b2e2(0x732)]||0x0,_0x258ba2=_0x235ab1[_0x53b2e2(0x14a)]||0x0,_0x4cfb5a=_0x235ab1[_0x53b2e2(0x8a5)]||0x1;for(const _0x10b523 of _0x18ae13){if(!_0x10b523)continue;if(!_0x10b523[_0x53b2e2(0x407)]())continue;const _0x5af9b1=_0x10b523[_0x53b2e2(0x407)]();let _0x27f20f=_0x5af9b1['_baseX'],_0x1703f8=_0x5af9b1[_0x53b2e2(0x4b6)];_0x27f20f+=(Graphics[_0x53b2e2(0x3fa)]-Graphics[_0x53b2e2(0x650)])/0x2,_0x1703f8+=(Graphics[_0x53b2e2(0x75c)]-Graphics[_0x53b2e2(0x830)])/0x2;if(_0x5c1c39[_0x53b2e2(0x6d8)](/front/i))_0x27f20f+=(_0x10b523['isEnemy']()?0x1:-0x1)*_0x5af9b1['mainSpriteWidth']()/0x2;else _0x5c1c39[_0x53b2e2(0x6d8)](/back/i)&&(_0x27f20f+=(_0x10b523['isEnemy']()?-0x1:0x1)*_0x5af9b1['mainSpriteWidth']()/0x2);if(_0x5c1c39['match'](/head/i))_0x1703f8-=_0x5af9b1[_0x53b2e2(0xb45)]();else _0x5c1c39['match'](/center/i)&&(_0x1703f8-=_0x5af9b1[_0x53b2e2(0xb45)]()/0x2);_0x27f20f+=_0x5daaf0,_0x1703f8+=_0x172efd,_0x10ab30[_0x53b2e2(0x91e)](_0x27f20f,_0x1703f8,_0x5d2f9e,_0x258ba2,_0x4cfb5a);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x9b9),_0x3f48f5=>{const _0x4c93f4=_0x5a8ff0;if(!SceneManager[_0x4c93f4(0x5c8)]())return;if(!Imported[_0x4c93f4(0xa85)])return;const _0x12e655=SceneManager[_0x4c93f4(0x973)][_0x4c93f4(0x566)];if(!_0x12e655)return;VisuMZ['ConvertParams'](_0x3f48f5,_0x3f48f5);const _0x245759=VisuMZ[_0x4c93f4(0x8e5)](_0x3f48f5[_0x4c93f4(0x885)]),_0x580e5e=_0x3f48f5[_0x4c93f4(0x678)],_0x18d0b5=_0x3f48f5[_0x4c93f4(0x45c)]||0x0,_0x48489e=_0x3f48f5[_0x4c93f4(0x684)]||0x0,_0x2587c7=_0x3f48f5[_0x4c93f4(0x732)]||0x0,_0x24d0cf=_0x3f48f5[_0x4c93f4(0x14a)]||0x0,_0x288597=_0x3f48f5[_0x4c93f4(0x8a5)]||0x1,_0x3b0197=Math[_0x4c93f4(0x60d)](..._0x245759[_0x4c93f4(0x5d7)](_0x1de418=>_0x1de418[_0x4c93f4(0x407)]()[_0x4c93f4(0x7bd)]-_0x1de418['battler']()[_0x4c93f4(0x787)]()/0x2)),_0x4bd54c=Math['max'](..._0x245759[_0x4c93f4(0x5d7)](_0x2719c0=>_0x2719c0[_0x4c93f4(0x407)]()[_0x4c93f4(0x7bd)]+_0x2719c0[_0x4c93f4(0x407)]()['mainSpriteWidth']()/0x2)),_0x4cb95a=Math['min'](..._0x245759['map'](_0x19d9de=>_0x19d9de[_0x4c93f4(0x407)]()['_baseY']-_0x19d9de[_0x4c93f4(0x407)]()[_0x4c93f4(0xb45)]())),_0x5209d5=Math[_0x4c93f4(0x6dd)](..._0x245759[_0x4c93f4(0x5d7)](_0x5d805b=>_0x5d805b[_0x4c93f4(0x407)]()[_0x4c93f4(0x4b6)])),_0xdc0e46=_0x245759['filter'](_0x4f4093=>_0x4f4093[_0x4c93f4(0x34b)]())[_0x4c93f4(0x6b9)],_0x3d6f83=_0x245759[_0x4c93f4(0x6e0)](_0x5a9980=>_0x5a9980[_0x4c93f4(0x172)]())[_0x4c93f4(0x6b9)];let _0x143048=0x0,_0x5d25f7=0x0;if(_0x580e5e[_0x4c93f4(0x6d8)](/front/i))_0x143048=_0xdc0e46>=_0x3d6f83?_0x3b0197:_0x4bd54c;else{if(_0x580e5e[_0x4c93f4(0x6d8)](/middle/i))_0x143048=(_0x3b0197+_0x4bd54c)/0x2,melee=-0x1;else _0x580e5e[_0x4c93f4(0x6d8)](/back/i)&&(_0x143048=_0xdc0e46>=_0x3d6f83?_0x4bd54c:_0x3b0197);}if(_0x580e5e['match'](/head/i))_0x5d25f7=_0x4cb95a;else{if(_0x580e5e[_0x4c93f4(0x6d8)](/center/i))_0x5d25f7=(_0x4cb95a+_0x5209d5)/0x2;else _0x580e5e[_0x4c93f4(0x6d8)](/base/i)&&(_0x5d25f7=_0x5209d5);}_0x143048+=(Graphics['width']-Graphics[_0x4c93f4(0x650)])/0x2,_0x5d25f7+=(Graphics['height']-Graphics[_0x4c93f4(0x830)])/0x2,_0x143048+=_0x18d0b5,_0x5d25f7+=_0x48489e,_0x12e655['setupShockwaveImpactFilter'](_0x143048,_0x5d25f7,_0x2587c7,_0x24d0cf,_0x288597);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Impact_TimeScale',_0x24f231=>{const _0x195394=_0x5a8ff0;if(!Imported[_0x195394(0xa85)])return;const _0x537955=SceneManager[_0x195394(0x973)][_0x195394(0x566)];if(!_0x537955)return;if(VisuMZ[_0x195394(0xb1d)][_0x195394(0x978)]<=1.04){alert(_0x195394(0xb9e)),SceneManager[_0x195394(0xad2)]();return;}VisuMZ['ConvertParams'](_0x24f231,_0x24f231);const _0xf55db7=$gameTemp[_0x195394(0x985)](),_0x221aa3=Math[_0x195394(0x6dd)](0.01,_0x24f231['Scale']);$gameTemp[_0x195394(0x1e4)](_0x221aa3,_0xf55db7);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x95c),_0x476255=>{const _0x4187e3=_0x5a8ff0;if(!Imported[_0x4187e3(0xa85)])return;const _0x242789=SceneManager[_0x4187e3(0x973)][_0x4187e3(0x566)];if(!_0x242789)return;if(VisuMZ[_0x4187e3(0xb1d)][_0x4187e3(0x978)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x4187e3(0x288)](_0x476255,_0x476255);const _0x2e15f0=$gameTemp[_0x4187e3(0x985)](),_0x5dfe8f=_0x476255['ms']||0x1;VisuMZ[_0x4187e3(0xb1d)][_0x4187e3(0x3d0)](_0x5dfe8f,_0x2e15f0);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Impact_ZoomBlurPoint',_0x3dd988=>{const _0x46c41e=_0x5a8ff0;if(!Imported[_0x46c41e(0xa85)])return;const _0x1e1291=SceneManager['_scene'][_0x46c41e(0x566)];if(!_0x1e1291)return;VisuMZ[_0x46c41e(0x288)](_0x3dd988,_0x3dd988);const _0x5e9c8d=_0x3dd988['X']||0x0,_0x67b983=_0x3dd988['Y']||0x0,_0x2c952d=_0x3dd988[_0x46c41e(0x60a)]||0x0,_0x3f576a=_0x3dd988[_0x46c41e(0x9f9)]||0x0,_0x2cf306=_0x3dd988[_0x46c41e(0x8a5)]||0x1,_0x244970=_0x3dd988[_0x46c41e(0xad3)]||'Linear';_0x1e1291[_0x46c41e(0x809)](_0x2c952d,_0x5e9c8d,_0x67b983,_0x3f576a,_0x2cf306,_0x244970);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x9b1),_0x59a053=>{const _0xb8cc8c=_0x5a8ff0;if(!Imported[_0xb8cc8c(0xa85)])return;const _0x21e71b=SceneManager[_0xb8cc8c(0x973)][_0xb8cc8c(0x566)];if(!_0x21e71b)return;VisuMZ[_0xb8cc8c(0x288)](_0x59a053,_0x59a053);const _0x30adb6=VisuMZ['CreateActionSequenceTargets'](_0x59a053[_0xb8cc8c(0x885)]),_0xfdc1d3=_0x59a053[_0xb8cc8c(0x678)],_0x403ac2=_0x59a053[_0xb8cc8c(0x45c)]||0x0,_0x431aba=_0x59a053['OffsetY']||0x0,_0x5c7686=_0x59a053[_0xb8cc8c(0x60a)]||0x0,_0x58f7e9=_0x59a053['Radius']||0x0,_0x131af8=_0x59a053[_0xb8cc8c(0x8a5)]||0x1,_0x56e339=_0x59a053[_0xb8cc8c(0xad3)]||_0xb8cc8c(0x65b),_0x3e6833=Math[_0xb8cc8c(0x60d)](..._0x30adb6['map'](_0x250b4b=>_0x250b4b[_0xb8cc8c(0x407)]()['_baseX']-_0x250b4b[_0xb8cc8c(0x407)]()['mainSpriteWidth']()/0x2)),_0x59a37e=Math[_0xb8cc8c(0x6dd)](..._0x30adb6[_0xb8cc8c(0x5d7)](_0x1a9164=>_0x1a9164[_0xb8cc8c(0x407)]()[_0xb8cc8c(0x7bd)]+_0x1a9164[_0xb8cc8c(0x407)]()[_0xb8cc8c(0x787)]()/0x2)),_0x5b5faf=Math[_0xb8cc8c(0x60d)](..._0x30adb6[_0xb8cc8c(0x5d7)](_0x2288a9=>_0x2288a9['battler']()[_0xb8cc8c(0x4b6)]-_0x2288a9['battler']()['mainSpriteHeight']())),_0x5803ff=Math[_0xb8cc8c(0x6dd)](..._0x30adb6[_0xb8cc8c(0x5d7)](_0x9ab1f=>_0x9ab1f[_0xb8cc8c(0x407)]()[_0xb8cc8c(0x4b6)])),_0x593dfb=_0x30adb6[_0xb8cc8c(0x6e0)](_0x14a5fa=>_0x14a5fa[_0xb8cc8c(0x34b)]())[_0xb8cc8c(0x6b9)],_0x14d55b=_0x30adb6['filter'](_0x2c480f=>_0x2c480f[_0xb8cc8c(0x172)]())[_0xb8cc8c(0x6b9)];let _0x4248ad=0x0,_0x286663=0x0;if(_0xfdc1d3[_0xb8cc8c(0x6d8)](/front/i))_0x4248ad=_0x593dfb>=_0x14d55b?_0x3e6833:_0x59a37e;else{if(_0xfdc1d3[_0xb8cc8c(0x6d8)](/middle/i))_0x4248ad=(_0x3e6833+_0x59a37e)/0x2,melee=-0x1;else _0xfdc1d3[_0xb8cc8c(0x6d8)](/back/i)&&(_0x4248ad=_0x593dfb>=_0x14d55b?_0x59a37e:_0x3e6833);}if(_0xfdc1d3[_0xb8cc8c(0x6d8)](/head/i))_0x286663=_0x5b5faf;else{if(_0xfdc1d3[_0xb8cc8c(0x6d8)](/center/i))_0x286663=(_0x5b5faf+_0x5803ff)/0x2;else _0xfdc1d3['match'](/base/i)&&(_0x286663=_0x5803ff);}_0x4248ad+=(Graphics[_0xb8cc8c(0x3fa)]-Graphics['boxWidth'])/0x2,_0x286663+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x4248ad+=_0x403ac2,_0x286663+=_0x431aba,_0x21e71b[_0xb8cc8c(0x809)](_0x5c7686,_0x4248ad,_0x286663,_0x58f7e9,_0x131af8,_0x56e339);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xa7e),_0x63eeb6=>{const _0x3be534=_0x5a8ff0;if(!Imported[_0x3be534(0xa85)])return;const _0x3c0ec2=SceneManager['_scene']['_spriteset'];if(!_0x3c0ec2)return;if(VisuMZ[_0x3be534(0xb1d)][_0x3be534(0x978)]<=1.05){alert(_0x3be534(0xb9e)),SceneManager[_0x3be534(0xad2)]();return;}VisuMZ['ConvertParams'](_0x63eeb6,_0x63eeb6);const _0x332448=VisuMZ['CreateActionSequenceTargets'](_0x63eeb6[_0x3be534(0x885)]),_0x21487b={'filename':_0x63eeb6[_0x3be534(0x34a)],'horzCells':_0x63eeb6['horzCells']||0x1,'vertCells':_0x63eeb6[_0x3be534(0x7bb)]||0x1,'frameDelay':_0x63eeb6['frameDelay']||0x1,'smooth':_0x63eeb6[_0x3be534(0x186)]||![],'anchorX':_0x63eeb6['anchorX']||0x0,'anchorY':_0x63eeb6['anchorY']||0x0,'offsetX':_0x63eeb6[_0x3be534(0x4b0)]||0x0,'offsetY':_0x63eeb6[_0x3be534(0xa79)]||0x0};for(const _0x102412 of _0x332448){if(!_0x102412)continue;if(!_0x102412[_0x3be534(0x407)]())continue;_0x102412[_0x3be534(0x407)]()[_0x3be534(0xb6d)](_0x21487b);}const _0x1ce9ba=$gameTemp[_0x3be534(0x985)]();_0x1ce9ba&&_0x1ce9ba[_0x3be534(0x66a)]('battleInjectPrep');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x391),_0x26ab02=>{const _0x529bec=_0x5a8ff0;if(!Imported[_0x529bec(0xa85)])return;const _0x369f82=SceneManager['_scene'][_0x529bec(0x566)];if(!_0x369f82)return;if(VisuMZ[_0x529bec(0xb1d)]['version']<=1.05){alert(_0x529bec(0xb9e)),SceneManager['exit']();return;}VisuMZ[_0x529bec(0x288)](_0x26ab02,_0x26ab02);const _0x1102f6=VisuMZ[_0x529bec(0x8e5)](_0x26ab02[_0x529bec(0x885)]);for(const _0x498fbd of _0x1102f6){if(!_0x498fbd)continue;if(!_0x498fbd[_0x529bec(0x407)]())continue;_0x498fbd[_0x529bec(0x407)]()[_0x529bec(0x6b1)]();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x48a),_0x26b635=>{const _0x36cad5=_0x5a8ff0;if(!Imported[_0x36cad5(0xa85)])return;const _0x30ad99=SceneManager[_0x36cad5(0x973)][_0x36cad5(0x566)];if(!_0x30ad99)return;if(VisuMZ['ActSeqImpact'][_0x36cad5(0x978)]<=1.05){alert(_0x36cad5(0xb9e)),SceneManager['exit']();return;}VisuMZ[_0x36cad5(0x288)](_0x26b635,_0x26b635);const _0x56cefc=VisuMZ[_0x36cad5(0x8e5)](_0x26b635[_0x36cad5(0x885)]),_0x5ab58a=_0x26b635[_0x36cad5(0x7c5)];for(const _0x56b84a of _0x56cefc){if(!_0x56b84a)continue;if(!_0x56b84a[_0x36cad5(0x407)]())continue;_0x56b84a[_0x36cad5(0x407)]()['pauseInjectAnimation'](_0x5ab58a);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xb24),_0x51fb00=>{const _0x195e7a=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x251572=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x251572)return;_0x251572['setWaitMode'](_0x195e7a(0xbe0));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Mechanics_ActionEffect',_0x128337=>{const _0x3ebdb9=_0x5a8ff0;if(!SceneManager[_0x3ebdb9(0x5c8)]())return;VisuMZ[_0x3ebdb9(0x288)](_0x128337,_0x128337);const _0x5675da=$gameTemp[_0x3ebdb9(0x985)](),_0x29aa04=BattleManager[_0x3ebdb9(0x1f8)],_0x249e1e=BattleManager[_0x3ebdb9(0xbee)],_0x537605=BattleManager['_logWindow'];if(!_0x5675da||!_0x29aa04||!_0x249e1e)return;if(!_0x29aa04[_0x3ebdb9(0x12a)]())return;const _0x5cd109=VisuMZ[_0x3ebdb9(0x8e5)](_0x128337[_0x3ebdb9(0x885)]);for(const _0x1a30f0 of _0x5cd109){if(!_0x1a30f0)continue;_0x537605[_0x3ebdb9(0x23b)](_0x3ebdb9(0x820),_0x249e1e,_0x1a30f0);}_0x5675da[_0x3ebdb9(0x66a)](_0x3ebdb9(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xadd),_0x45c863=>{const _0x42e4e4=_0x5a8ff0;if(!SceneManager[_0x42e4e4(0x5c8)]())return;if(!Imported[_0x42e4e4(0xac3)])return;$gameTemp[_0x42e4e4(0xab1)]=!![];}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x99c),_0x50a5ed=>{const _0x2491e0=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2491e0(0x288)](_0x50a5ed,_0x50a5ed);const _0x5671ac=[_0x2491e0(0x784),_0x2491e0(0x19e),_0x2491e0(0x40b),_0x2491e0(0x19b),_0x2491e0(0x1f1),_0x2491e0(0xb3c),_0x2491e0(0x4fe),_0x2491e0(0x475)],_0x26d209=_0x50a5ed[_0x2491e0(0x592)],_0x28604e=_0x50a5ed[_0x2491e0(0x93a)],_0x11c345=_0x50a5ed[_0x2491e0(0x3b8)],_0x1a5fc5=VisuMZ[_0x2491e0(0x8e5)](_0x50a5ed[_0x2491e0(0x885)]);for(const _0x269255 of _0x1a5fc5){if(!_0x269255)continue;for(const _0x166a16 of _0x26d209){const _0x4bfa09=_0x5671ac[_0x2491e0(0x70f)](_0x166a16[_0x2491e0(0x692)]()[_0x2491e0(0xb20)]());_0x4bfa09>=0x0&&_0x4bfa09<=0x7&&_0x269255[_0x2491e0(0x460)](_0x4bfa09,_0x11c345);}for(const _0x68a4f7 of _0x28604e){const _0x5bbb4c=_0x5671ac[_0x2491e0(0x70f)](_0x68a4f7[_0x2491e0(0x692)]()['trim']());_0x5bbb4c>=0x0&&_0x5bbb4c<=0x7&&_0x269255[_0x2491e0(0x81b)](_0x5bbb4c,_0x11c345);}}}),PluginManager['registerCommand'](pluginData['name'],_0x5a8ff0(0x409),_0x3dd887=>{const _0x114433=_0x5a8ff0;if(!SceneManager[_0x114433(0x5c8)]())return;VisuMZ[_0x114433(0x288)](_0x3dd887,_0x3dd887);const _0x1c6250=_0x3dd887[_0x114433(0x37f)],_0x45d50a=VisuMZ[_0x114433(0x8e5)](_0x3dd887[_0x114433(0x885)]);for(const _0x554b1e of _0x45d50a){if(!_0x554b1e)continue;for(const _0x4a0680 of _0x1c6250){_0x554b1e[_0x114433(0x482)](_0x4a0680);}}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x534),_0x3b10ff=>{const _0x18d425=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x18d425(0x288)](_0x3b10ff,_0x3b10ff);const _0x1f93f3=BattleManager[_0x18d425(0x1f8)],_0x50fbeb={'arPenRate':_0x3b10ff[_0x18d425(0x4bc)],'arPenFlat':_0x3b10ff[_0x18d425(0x96a)],'arRedRate':_0x3b10ff[_0x18d425(0x252)],'arRedFlat':_0x3b10ff['ArRedFlat']};_0x1f93f3['_armorPenetration']=_0x50fbeb;}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Mechanics_AnalyzeWeakness',_0x100f36=>{const _0x40d616=_0x5a8ff0;if(!SceneManager[_0x40d616(0x5c8)]())return;if(!Imported[_0x40d616(0xa13)])return;VisuMZ[_0x40d616(0x288)](_0x100f36,_0x100f36);const _0x5e4aeb=VisuMZ[_0x40d616(0x8e5)](_0x100f36[_0x40d616(0x885)]),_0x158a47=_0x100f36[_0x40d616(0x7bc)]||0x1;for(const _0x5c4351 of _0x5e4aeb){if(!_0x5c4351)continue;if(!_0x5c4351[_0x40d616(0x172)]())continue;_0x5c4351[_0x40d616(0x86b)](_0x158a47);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x525),_0x231e04=>{const _0x3a096a=_0x5a8ff0;if(!SceneManager[_0x3a096a(0x5c8)]())return;if(!Imported[_0x3a096a(0xacb)])return;if(!BattleManager[_0x3a096a(0x5cc)]())return;VisuMZ[_0x3a096a(0x288)](_0x231e04,_0x231e04);const _0x50def1=VisuMZ[_0x3a096a(0x8e5)](_0x231e04[_0x3a096a(0x885)]),_0x42ec27=_0x231e04[_0x3a096a(0x783)],_0x557c51=_0x231e04[_0x3a096a(0x783)],_0x36da71=_0x231e04['Interrupt'];for(const _0x5e92de of _0x50def1){if(!_0x5e92de)continue;if(_0x5e92de[_0x3a096a(0x9d8)]())_0x5e92de['changeAtbChargeTime'](_0x42ec27);else{if(_0x5e92de[_0x3a096a(0x50c)]()){_0x5e92de[_0x3a096a(0x9e1)](_0x557c51);if(_0x36da71)_0x5e92de[_0x3a096a(0x54a)]();}}}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x223),_0x535466=>{const _0x204775=_0x5a8ff0;if(!SceneManager[_0x204775(0x5c8)]())return;if(!Imported[_0x204775(0xb66)])return;VisuMZ[_0x204775(0x288)](_0x535466,_0x535466);const _0x3dde32=VisuMZ[_0x204775(0x8e5)](_0x535466[_0x204775(0x885)]),_0x29376d=_0x535466[_0x204775(0x1e5)];for(const _0x56c000 of _0x3dde32){if(!_0x56c000)continue;_0x56c000[_0x204775(0x39b)](_0x29376d);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x8fa),_0xd8d7ef=>{const _0x23b2d0=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x23b2d0(0xb66)])return;if(!BattleManager[_0x23b2d0(0xbee)])return;VisuMZ[_0x23b2d0(0x288)](_0xd8d7ef,_0xd8d7ef);const _0x55b367=_0xd8d7ef[_0x23b2d0(0x30b)];$gameVariables['setValue'](_0x55b367,BattleManager[_0x23b2d0(0xbee)][_0x23b2d0(0xc07)]());}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x273),_0x54f93d=>{const _0x20a37a=_0x5a8ff0;if(!SceneManager[_0x20a37a(0x5c8)]())return;if(!Imported[_0x20a37a(0x89e)])return;VisuMZ[_0x20a37a(0x288)](_0x54f93d,_0x54f93d);const _0x1f5d40=VisuMZ[_0x20a37a(0x8e5)](_0x54f93d[_0x20a37a(0x885)]),_0x3e5c60=_0x54f93d[_0x20a37a(0x8d9)];for(const _0x39f9f6 of _0x1f5d40){if(!_0x39f9f6)continue;if(_0x39f9f6[_0x20a37a(0x53b)]())continue;if(!_0x39f9f6[_0x20a37a(0x98c)]())continue;_0x39f9f6['alterBreakShield'](_0x3e5c60);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Mechanics_BreakShieldReset',_0x123530=>{const _0x442a14=_0x5a8ff0;if(!SceneManager[_0x442a14(0x5c8)]())return;if(!Imported[_0x442a14(0x89e)])return;VisuMZ[_0x442a14(0x288)](_0x123530,_0x123530);const _0x6318d6=VisuMZ[_0x442a14(0x8e5)](_0x123530[_0x442a14(0x885)]);for(const _0x3a6e4b of _0x6318d6){if(!_0x3a6e4b)continue;if(_0x3a6e4b[_0x442a14(0x53b)]())continue;if(!_0x3a6e4b[_0x442a14(0x98c)]())continue;_0x3a6e4b['resetBreakShield']();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x42b),_0x3ab48d=>{const _0x5737e1=_0x5a8ff0;if(!SceneManager[_0x5737e1(0x5c8)]())return;if(!Imported[_0x5737e1(0xa64)])return;if(!BattleManager[_0x5737e1(0x4a4)]())return;VisuMZ[_0x5737e1(0x288)](_0x3ab48d,_0x3ab48d);const _0x1b4d80=VisuMZ['CreateActionSequenceTargets'](_0x3ab48d[_0x5737e1(0x885)]),_0xa8ff90=_0x3ab48d['BravePoints'];for(const _0x554841 of _0x1b4d80){if(!_0x554841)continue;_0x554841[_0x5737e1(0x41b)](_0xa8ff90);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x65d),_0x5b34a2=>{const _0x307117=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5b34a2,_0x5b34a2);const _0x26b233=$gameTemp[_0x307117(0x985)](),_0x1204ef=BattleManager['_action'],_0x1e97fd=BattleManager[_0x307117(0xbee)];if(!_0x26b233||!_0x1204ef||!_0x1e97fd)return;if(!_0x1204ef['item']())return;const _0x127b3a=VisuMZ[_0x307117(0x8e5)](_0x5b34a2[_0x307117(0x885)]);for(const _0x103976 of _0x127b3a){if(!_0x103976)continue;_0x5b34a2[_0x307117(0xb79)]&&(_0x103976['removeImmortal'](),_0x103976[_0x307117(0x482)](_0x103976['deathStateId']())),_0x103976[_0x307117(0x96c)]()&&_0x103976['performCollapse']();}_0x26b233[_0x307117(0x66a)]('battleEffect');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xb06),_0xbc9dd0=>{const _0x17f8cc=_0x5a8ff0;if(!SceneManager[_0x17f8cc(0x5c8)]())return;if(!Imported[_0x17f8cc(0x775)])return;if(!BattleManager[_0x17f8cc(0x49c)]())return;VisuMZ[_0x17f8cc(0x288)](_0xbc9dd0,_0xbc9dd0);const _0x26da49=VisuMZ[_0x17f8cc(0x8e5)](_0xbc9dd0[_0x17f8cc(0x885)]),_0x15ea22=_0xbc9dd0[_0x17f8cc(0x15a)];for(const _0x3ae9a8 of _0x26da49){if(!_0x3ae9a8)continue;_0x3ae9a8[_0x17f8cc(0x673)](_0x15ea22);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Mechanics_CtbSpeed',_0x23975c=>{const _0x2ff518=_0x5a8ff0;if(!SceneManager[_0x2ff518(0x5c8)]())return;if(!Imported[_0x2ff518(0x775)])return;if(!BattleManager[_0x2ff518(0x49c)]())return;VisuMZ[_0x2ff518(0x288)](_0x23975c,_0x23975c);const _0x5544a5=VisuMZ['CreateActionSequenceTargets'](_0x23975c['Targets']),_0x35c119=_0x23975c['ChargeRate'],_0x20715e=_0x23975c[_0x2ff518(0x783)];for(const _0x52a240 of _0x5544a5){if(!_0x52a240)continue;if(_0x52a240[_0x2ff518(0x587)]===_0x2ff518(0x9a9))_0x52a240[_0x2ff518(0x75e)](_0x35c119);else _0x52a240[_0x2ff518(0x587)]===_0x2ff518(0x22b)&&_0x52a240[_0x2ff518(0xbba)](_0x20715e);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xbdb),_0x253134=>{const _0x628329=_0x5a8ff0;if(!SceneManager[_0x628329(0x5c8)]())return;VisuMZ[_0x628329(0x288)](_0x253134,_0x253134);const _0x804b4a=BattleManager[_0x628329(0x1f8)];if(!_0x804b4a)return;let _0x3c68fe=_0x253134[_0x628329(0xb28)];_0x804b4a[_0x628329(0x163)](_0x3c68fe);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x25a),_0xb92380=>{const _0xb01eda=_0x5a8ff0;if(!SceneManager[_0xb01eda(0x5c8)]())return;VisuMZ[_0xb01eda(0x288)](_0xb92380,_0xb92380);const _0x8a22e=VisuMZ[_0xb01eda(0x8e5)](_0xb92380[_0xb01eda(0x885)]);for(const _0x5ae598 of _0x8a22e){if(!_0x5ae598)continue;if(_0x5ae598['shouldPopupDamage']())_0x5ae598[_0xb01eda(0xbdd)]();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x8c4),_0x28ca33=>{const _0x5db006=_0x5a8ff0;if(!SceneManager[_0x5db006(0x5c8)]())return;VisuMZ[_0x5db006(0x288)](_0x28ca33,_0x28ca33);const _0x315c83=$gameTemp['getLastPluginCommandInterpreter'](),_0x234e9b=BattleManager[_0x5db006(0xbee)],_0x1fb332=_0x28ca33[_0x5db006(0x899)];if(!_0x315c83)return;if(!_0x234e9b)return;_0x234e9b&&_0x234e9b[_0x5db006(0x46a)]()&&_0x1fb332['toUpperCase']()[_0x5db006(0xb20)]()!=='UNTITLED'&&_0x315c83[_0x5db006(0x434)]([_0x1fb332]);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x39e),_0x3431b4=>{const _0x52fb5b=_0x5a8ff0;if(!SceneManager[_0x52fb5b(0x5c8)]())return;VisuMZ[_0x52fb5b(0x288)](_0x3431b4,_0x3431b4);const _0x9c7490=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a338d=BattleManager['_logWindow'];if(!_0x9c7490)return;const _0x2ccc7b=VisuMZ[_0x52fb5b(0x8e5)](_0x3431b4[_0x52fb5b(0xa52)]),_0x39a219=VisuMZ[_0x52fb5b(0x8e5)](_0x3431b4['Targets']);for(const _0x50c13f of _0x2ccc7b){for(const _0x1a81c2 of _0x39a219){if(!_0x1a81c2)continue;const _0x3a3faa=$dataSkills[_0x50c13f['attackSkillId']()];_0x1a338d['push'](_0x52fb5b(0x557),_0x50c13f,_0x1a81c2,_0x3a3faa);}}_0x9c7490[_0x52fb5b(0x66a)](_0x52fb5b(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x3ef),_0x15dd39=>{const _0x4b79c5=_0x5a8ff0;if(!SceneManager[_0x4b79c5(0x5c8)]())return;VisuMZ[_0x4b79c5(0x288)](_0x15dd39,_0x15dd39);const _0x30e47a=$gameTemp[_0x4b79c5(0x985)](),_0x154230=BattleManager[_0x4b79c5(0xb61)];if(!_0x30e47a)return;const _0x1b8423=VisuMZ[_0x4b79c5(0x8e5)](_0x15dd39[_0x4b79c5(0xa52)]),_0x303172=VisuMZ[_0x4b79c5(0x8e5)](_0x15dd39[_0x4b79c5(0x885)]);for(const _0x1a6405 of _0x1b8423){for(const _0x27aa4d of _0x303172){if(!_0x27aa4d)continue;const _0x1f6247=$dataSkills[_0x1a6405[_0x4b79c5(0x58a)]()];_0x154230[_0x4b79c5(0x23b)](_0x4b79c5(0x557),_0x1a6405,_0x27aa4d,_0x1f6247);}}_0x30e47a[_0x4b79c5(0x66a)](_0x4b79c5(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x275),_0x2f310d=>{const _0x57cdcd=_0x5a8ff0;if(!SceneManager[_0x57cdcd(0x5c8)]())return;VisuMZ['ConvertParams'](_0x2f310d,_0x2f310d);const _0x4f74f1=$gameTemp[_0x57cdcd(0x985)](),_0x35147c=BattleManager[_0x57cdcd(0xb61)],_0x23eaa6=Number(_0x2f310d['ItemID']||0x1),_0x212b5e=$dataItems[_0x23eaa6];if(!_0x4f74f1)return;if(!_0x212b5e)return;const _0xf66a8b=VisuMZ['CreateActionSequenceTargets'](_0x2f310d[_0x57cdcd(0xa52)]),_0x185786=VisuMZ['CreateActionSequenceTargets'](_0x2f310d[_0x57cdcd(0x885)]);for(const _0x289161 of _0xf66a8b){for(const _0xe80b4a of _0x185786){if(!_0xe80b4a)continue;_0x35147c[_0x57cdcd(0x23b)]('emulateActionEffect',_0x289161,_0xe80b4a,_0x212b5e);}}_0x4f74f1[_0x57cdcd(0x66a)](_0x57cdcd(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x628),_0x23d6ad=>{const _0xaf76ae=_0x5a8ff0;if(!SceneManager[_0xaf76ae(0x5c8)]())return;VisuMZ[_0xaf76ae(0x288)](_0x23d6ad,_0x23d6ad);let _0x7ed946=Number(_0x23d6ad[_0xaf76ae(0xa7d)]||0x0);if(_0x7ed946<=0x0){const _0x1b2af1=BattleManager[_0xaf76ae(0x1f8)];if(_0x1b2af1&&_0x1b2af1[_0xaf76ae(0x2b4)]())_0x7ed946=_0x1b2af1['item']()['id'];else return;}const _0x6daa47=$dataSkills[_0x7ed946];if(!_0x6daa47)return;const _0xa44f53=VisuMZ['CreateActionSequenceTargets'](_0x23d6ad[_0xaf76ae(0xa52)]);for(const _0x55ff9c of _0xa44f53){_0x55ff9c['paySkillCost'](_0x6daa47);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xa06),_0x2e173b=>{const _0x3a99e7=_0x5a8ff0;if(!SceneManager[_0x3a99e7(0x5c8)]())return;VisuMZ[_0x3a99e7(0x288)](_0x2e173b,_0x2e173b);const _0x2b8c33=$gameTemp[_0x3a99e7(0x985)](),_0x443580=BattleManager[_0x3a99e7(0xb61)],_0x162adf=Number(_0x2e173b[_0x3a99e7(0xa7d)]||0x1),_0x5c3453=$dataSkills[_0x162adf];if(!_0x2b8c33)return;if(!_0x5c3453)return;const _0x3d81d8=VisuMZ[_0x3a99e7(0x8e5)](_0x2e173b['Users']),_0xa2c804=VisuMZ[_0x3a99e7(0x8e5)](_0x2e173b[_0x3a99e7(0x885)]);for(const _0x5d8fd2 of _0x3d81d8){for(const _0x404273 of _0xa2c804){if(!_0x404273)continue;_0x443580[_0x3a99e7(0x23b)]('emulateActionEffect',_0x5d8fd2,_0x404273,_0x5c3453);}}_0x2b8c33['setWaitMode'](_0x3a99e7(0x193));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xba7),_0x451191=>{const _0x13ab73=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x451191,_0x451191);const _0x5895cc=VisuMZ[_0x13ab73(0x8e5)](_0x451191['Targets']);for(const _0x13bfa8 of _0x5895cc){if(!_0x13bfa8)continue;if(!_0x13bfa8[_0x13ab73(0x172)]())continue;_0x13bfa8[_0x13ab73(0x62a)]();}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x3da),_0x81f70b=>{const _0x18b73d=_0x5a8ff0;if(!SceneManager[_0x18b73d(0x5c8)]())return;if(!Imported[_0x18b73d(0x861)])return;if(!BattleManager[_0x18b73d(0xb7a)]())return;VisuMZ[_0x18b73d(0x288)](_0x81f70b,_0x81f70b);const _0x15bfae=_0x81f70b[_0x18b73d(0x883)];BattleManager['_subject']&&BattleManager[_0x18b73d(0xbee)][_0x18b73d(0x6b8)]()[_0x18b73d(0xaef)](_0x15bfae);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x848),_0x8f7ba5=>{const _0x1cdc34=_0x5a8ff0;if(!SceneManager[_0x1cdc34(0x5c8)]())return;if(!Imported[_0x1cdc34(0x690)])return;if(!BattleManager[_0x1cdc34(0x953)]())return;VisuMZ[_0x1cdc34(0x288)](_0x8f7ba5,_0x8f7ba5);const _0x3b78a1=_0x8f7ba5[_0x1cdc34(0x883)];BattleManager[_0x1cdc34(0xbee)]&&BattleManager[_0x1cdc34(0xbee)]['friendsUnit']()['gainCurrentActionsFTB'](_0x3b78a1);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x840),_0x2394e3=>{const _0x12ca66=_0x5a8ff0;if(!SceneManager[_0x12ca66(0x5c8)]())return;VisuMZ['ConvertParams'](_0x2394e3,_0x2394e3);const _0x1c7709=VisuMZ[_0x12ca66(0x8e5)](_0x2394e3[_0x12ca66(0x885)]),_0x369a29=_0x2394e3['HP_Rate'],_0x1a711a=_0x2394e3['HP_Flat'],_0x2236c1=_0x2394e3[_0x12ca66(0x3f1)],_0x162763=_0x2394e3[_0x12ca66(0x45a)],_0x40b169=_0x2394e3[_0x12ca66(0x6c3)],_0x187ffb=_0x2394e3[_0x12ca66(0x15c)],_0x594f4d=_0x2394e3['ShowPopup'];for(const _0x1f8d10 of _0x1c7709){if(!_0x1f8d10)continue;const _0x34611a=_0x1f8d10[_0x12ca66(0x6b2)](),_0x1b3926=Math[_0x12ca66(0xb41)](_0x369a29*_0x1f8d10[_0x12ca66(0xa2a)]+_0x1a711a),_0x15d315=Math[_0x12ca66(0xb41)](_0x2236c1*_0x1f8d10[_0x12ca66(0x2a1)]+_0x162763),_0x39fea9=Math[_0x12ca66(0xb41)](_0x40b169*_0x1f8d10[_0x12ca66(0x3c2)]()+_0x187ffb);if(_0x1b3926!==0x0)_0x1f8d10[_0x12ca66(0xbf7)](_0x1b3926);if(_0x15d315!==0x0)_0x1f8d10[_0x12ca66(0xb0b)](_0x15d315);if(_0x39fea9!==0x0)_0x1f8d10[_0x12ca66(0x567)](_0x39fea9);if(_0x594f4d)_0x1f8d10[_0x12ca66(0xbdd)]();_0x34611a&&_0x1f8d10[_0x12ca66(0x46a)]()&&_0x1f8d10[_0x12ca66(0x13b)]();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x989),_0x2a777c=>{const _0x108a3b=_0x5a8ff0;if(!SceneManager[_0x108a3b(0x5c8)]())return;VisuMZ['ConvertParams'](_0x2a777c,_0x2a777c);const _0x526437=VisuMZ[_0x108a3b(0x8e5)](_0x2a777c['Targets']);for(const _0x223579 of _0x526437){if(!_0x223579)continue;_0x223579[_0x108a3b(0x48b)](_0x2a777c[_0x108a3b(0xa1b)]);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xa5c),_0x2f09ae=>{const _0x5b8f25=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b8f25(0x288)](_0x2f09ae,_0x2f09ae);const _0x555446=BattleManager[_0x5b8f25(0x1f8)],_0x3140c5={'criticalHitRate':_0x2f09ae[_0x5b8f25(0x44f)],'criticalHitFlat':_0x2f09ae[_0x5b8f25(0x2b6)],'criticalDmgRate':_0x2f09ae[_0x5b8f25(0x7aa)],'criticalDmgFlat':_0x2f09ae[_0x5b8f25(0x104)],'damageRate':_0x2f09ae[_0x5b8f25(0x1fb)],'damageFlat':_0x2f09ae[_0x5b8f25(0xac7)],'hitRate':_0x2f09ae[_0x5b8f25(0x95b)],'hitFlat':_0x2f09ae[_0x5b8f25(0x71d)]};_0x555446[_0x5b8f25(0x5c2)]=_0x3140c5;}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x2d3),_0x2e6da8=>{const _0x2ab040=_0x5a8ff0;if(!SceneManager[_0x2ab040(0x5c8)]())return;VisuMZ[_0x2ab040(0x288)](_0x2e6da8,_0x2e6da8);const _0x43113f=_0x2e6da8[_0x2ab040(0x29e)];SceneManager[_0x2ab040(0x973)][_0x2ab040(0xaf0)](_0x43113f);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xa33),_0x3f6e0c=>{const _0x14fae8=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x14fae8(0x288)](_0x3f6e0c,_0x3f6e0c);const _0x4e29c=VisuMZ[_0x14fae8(0x8e5)](_0x3f6e0c['Targets']);for(const _0x27a50c of _0x4e29c){if(!_0x27a50c)continue;let _0x44b8ab=_0x3f6e0c[_0x14fae8(0xa08)],_0x407788=_0x3f6e0c[_0x14fae8(0xabd)],_0x2d6989=_0x3f6e0c[_0x14fae8(0xab3)];BattleManager['_actionBattlers'][_0x14fae8(0x597)](_0x27a50c)?_0x44b8ab+=_0x2d6989:_0x407788+=_0x2d6989,BattleManager['turnOrderChangeOTB'](_0x27a50c,-_0x44b8ab,![]),BattleManager['turnOrderChangeOTB'](_0x27a50c,-_0x407788,!![]);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x84b),_0x55d918=>{const _0xf504c2=_0x5a8ff0;if(!SceneManager[_0xf504c2(0x5c8)]())return;if(!Imported[_0xf504c2(0xaa8)])return;if(!BattleManager[_0xf504c2(0x2f7)]())return;VisuMZ[_0xf504c2(0x288)](_0x55d918,_0x55d918);const _0x4765f5=BattleManager[_0xf504c2(0xbee)][_0xf504c2(0x6b8)](),_0x5675ec=_0x55d918[_0xf504c2(0xaa5)],_0xee1f49=_0x55d918[_0xf504c2(0xa54)]||'unchanged',_0x106f50=_0x55d918[_0xf504c2(0x3f8)]||'unchanged',_0x1821b2=_0x55d918[_0xf504c2(0x47f)]||0x0,_0xa6db3f=_0x55d918['alterPriority']||0x0;(_0x4765f5[_0xf504c2(0x229)]()||_0x5675ec)&&(_0x5675ec&&(_0x4765f5[_0xf504c2(0x6c7)]=_0x4765f5[_0xf504c2(0x6c7)]||{},_0x4765f5[_0xf504c2(0x6c7)][_0xf504c2(0x83d)]=0x0),_0x4765f5['alterActionCostPTB'](_0xee1f49,_0x106f50,_0x1821b2,_0xa6db3f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xc10),_0x4b64ee=>{const _0x5be6a5=_0x5a8ff0;if(!SceneManager[_0x5be6a5(0x5c8)]())return;if(!Imported[_0x5be6a5(0xaa8)])return;if(!BattleManager[_0x5be6a5(0x2f7)]())return;VisuMZ[_0x5be6a5(0x288)](_0x4b64ee,_0x4b64ee);const _0x2ddad8=BattleManager[_0x5be6a5(0xbee)][_0x5be6a5(0x6b8)]();let _0x550d27=Math[_0x5be6a5(0x6dd)](_0x4b64ee[_0x5be6a5(0x6a2)],0x0),_0x49300e=_0x2ddad8[_0x5be6a5(0x136)](),_0x4885eb=_0x2ddad8[_0x5be6a5(0x2ae)]();while(_0x550d27--){if(_0x49300e<=0x0&&_0x4885eb<=0x0)break;else _0x49300e>0x0?(_0x49300e--,_0x4885eb++):_0x4885eb--;}_0x2ddad8[_0x5be6a5(0x5bb)](_0x49300e),_0x2ddad8[_0x5be6a5(0x6a1)](_0x4885eb);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Mechanics_PtbFullHalfAction',_0x593081=>{const _0x4e7716=_0x5a8ff0;if(!SceneManager[_0x4e7716(0x5c8)]())return;if(!Imported[_0x4e7716(0xaa8)])return;if(!BattleManager[_0x4e7716(0x2f7)]())return;VisuMZ[_0x4e7716(0x288)](_0x593081,_0x593081);const _0xa792b0=BattleManager[_0x4e7716(0xbee)][_0x4e7716(0x6b8)]();let _0x15045c=_0x593081[_0x4e7716(0x90e)],_0x35cc9e=_0x593081[_0x4e7716(0x23c)];_0xa792b0[_0x4e7716(0x40a)](_0x15045c),_0xa792b0[_0x4e7716(0x6b6)](_0x35cc9e);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x664),_0x4861c1=>{const _0x347090=_0x5a8ff0;if(!SceneManager[_0x347090(0x5c8)]())return;VisuMZ[_0x347090(0x288)](_0x4861c1,_0x4861c1);const _0xe56724=['MAXHP','MAXMP',_0x347090(0x40b),'DEF','MAT',_0x347090(0xb3c),_0x347090(0x4fe),_0x347090(0x475)],_0x3147df=_0x4861c1[_0x347090(0x592)],_0x238424=_0x4861c1['Debuffs'],_0x45ac45=VisuMZ[_0x347090(0x8e5)](_0x4861c1[_0x347090(0x885)]);for(const _0x34b4a1 of _0x45ac45){if(!_0x34b4a1)continue;for(const _0x234719 of _0x3147df){const _0x2d500b=_0xe56724[_0x347090(0x70f)](_0x234719[_0x347090(0x692)]()['trim']());_0x2d500b>=0x0&&_0x2d500b<=0x7&&_0x34b4a1[_0x347090(0xb55)](_0x2d500b)&&_0x34b4a1['removeBuff'](_0x2d500b);}for(const _0xc0c773 of _0x238424){const _0x1c464e=_0xe56724[_0x347090(0x70f)](_0xc0c773[_0x347090(0x692)]()[_0x347090(0xb20)]());_0x1c464e>=0x0&&_0x1c464e<=0x7&&_0x34b4a1[_0x347090(0x4dd)](_0x1c464e)&&_0x34b4a1[_0x347090(0xa83)](_0x1c464e);}}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x56eafb=>{const _0x4c55ff=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x56eafb,_0x56eafb);const _0x2728d1=_0x56eafb[_0x4c55ff(0x37f)],_0x109059=VisuMZ[_0x4c55ff(0x8e5)](_0x56eafb[_0x4c55ff(0x885)]);for(const _0x403bca of _0x109059){if(!_0x403bca)continue;for(const _0x1f3cb4 of _0x2728d1){_0x403bca[_0x4c55ff(0x959)](_0x1f3cb4);}}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x844),_0x505a9b=>{const _0x58393e=_0x5a8ff0;if(!SceneManager[_0x58393e(0x5c8)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x58393e(0x288)](_0x505a9b,_0x505a9b);const _0x29cd8c=VisuMZ['CreateActionSequenceTargets'](_0x505a9b[_0x58393e(0x885)]),_0x5c8afb=Number(_0x505a9b['StateID']),_0x5ef53d=Number(_0x505a9b[_0x58393e(0x3b8)]),_0x300bd5=_0x505a9b['AutoAddState'];for(const _0x3fef92 of _0x29cd8c){if(!_0x3fef92)continue;_0x300bd5&&!_0x3fef92['isStateAffected'](_0x5c8afb)?(_0x3fef92[_0x58393e(0x482)](_0x5c8afb),_0x3fef92[_0x58393e(0x111)](_0x5c8afb,_0x5ef53d)):_0x3fef92[_0x58393e(0x76a)](_0x5c8afb,_0x5ef53d);}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Mechanics_StateTurnsChangeTo',_0x563b6d=>{const _0x5432f7=_0x5a8ff0;if(!SceneManager[_0x5432f7(0x5c8)]())return;if(!Imported[_0x5432f7(0x6a5)])return;VisuMZ[_0x5432f7(0x288)](_0x563b6d,_0x563b6d);const _0x24e76f=VisuMZ['CreateActionSequenceTargets'](_0x563b6d['Targets']),_0x2bb441=Number(_0x563b6d[_0x5432f7(0x2d5)]),_0x30d462=Math[_0x5432f7(0x6dd)](Number(_0x563b6d[_0x5432f7(0x3b8)]),0x0),_0x123360=_0x563b6d['AutoAddState'];for(const _0xd12f9 of _0x24e76f){if(!_0xd12f9)continue;_0x123360&&!_0xd12f9[_0x5432f7(0x6ea)](_0x2bb441)&&_0xd12f9['addState'](_0x2bb441),_0xd12f9['setStateTurns'](_0x2bb441,_0x30d462);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x9d6),_0x283dfd=>{const _0x8e4c71=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x8e4c71(0x195)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x8e4c71(0x288)](_0x283dfd,_0x283dfd);const _0x2b7994=_0x283dfd[_0x8e4c71(0x34f)],_0x732a44=VisuMZ[_0x8e4c71(0x8e5)](_0x283dfd['Targets']),_0x4ac4ea=_0x283dfd['ForceExploited'],_0x8ed542=_0x283dfd[_0x8e4c71(0x78a)],_0x3ad569=_0x283dfd['ForceExploiter'],_0x707448=BattleManager[_0x8e4c71(0x1f8)];if(_0x2b7994)for(const _0x117f5c of _0x732a44){if(!_0x117f5c)continue;if(_0x117f5c===BattleManager[_0x8e4c71(0xbee)])continue;if(_0x4ac4ea)_0x117f5c['setSTBExploited'](![]);_0x117f5c[_0x8e4c71(0x284)](BattleManager[_0x8e4c71(0xbee)],_0x707448);}if(_0x8ed542&&BattleManager['_subject']){if(_0x3ad569)BattleManager[_0x8e4c71(0xbee)]['setSTBExploited'](![]);const _0x26b568=_0x732a44[0x0];BattleManager['_subject'][_0x8e4c71(0x972)](_0x26b568,_0x707448);}}),PluginManager['registerCommand'](pluginData['name'],_0x5a8ff0(0x157),_0x2ec450=>{const _0x386606=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x386606(0x195)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x386606(0x288)](_0x2ec450,_0x2ec450);const _0x1a31ec=_0x2ec450['Actions'];BattleManager[_0x386606(0xbee)]&&BattleManager[_0x386606(0xbee)][_0x386606(0x8c9)](_0x1a31ec);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x888),_0x4b5779=>{const _0xdc94cb=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0xdc94cb(0x1ad)]())return;VisuMZ[_0xdc94cb(0x288)](_0x4b5779,_0x4b5779);let _0x220895=_0x4b5779['Actions'];if(BattleManager[_0xdc94cb(0xbee)]){BattleManager[_0xdc94cb(0xbee)]['_actions']=BattleManager['_subject']['_actions']||[];while(_0x220895--){if(BattleManager[_0xdc94cb(0xbee)][_0xdc94cb(0x74d)][_0xdc94cb(0x6b9)]<=0x0)break;BattleManager[_0xdc94cb(0xbee)][_0xdc94cb(0x74d)]['shift']();}}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x968),_0x138bef=>{const _0x2319a0=_0x5a8ff0;if(!SceneManager[_0x2319a0(0x5c8)]())return;if(!Imported[_0x2319a0(0x3df)])return;VisuMZ[_0x2319a0(0x288)](_0x138bef,_0x138bef);const _0x235afa=VisuMZ[_0x2319a0(0x8e5)](_0x138bef[_0x2319a0(0x885)]),_0x172d86=_0x138bef[_0x2319a0(0x25d)];for(const _0x4d1ece of _0x235afa){if(!_0x4d1ece)continue;if(!_0x4d1ece['isActor']())continue;_0x4d1ece[_0x2319a0(0x6bc)](_0x172d86);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xb05),_0x4c711d=>{const _0x5f1e18=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5f1e18(0x288)](_0x4c711d,_0x4c711d);const _0x3ba710=VisuMZ[_0x5f1e18(0x8e5)](_0x4c711d[_0x5f1e18(0x885)]),_0x5acab2=_0x4c711d[_0x5f1e18(0x502)],_0x11bd87={'textColor':ColorManager[_0x5f1e18(0x3ba)](_0x4c711d['TextColor']),'flashColor':_0x4c711d[_0x5f1e18(0xaba)],'flashDuration':_0x4c711d[_0x5f1e18(0x2da)]};for(const _0x4615ea of _0x3ba710){if(!_0x4615ea)continue;_0x4615ea[_0x5f1e18(0x31a)](_0x5acab2,_0x11bd87);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xa3b),_0x5b5c38=>{const _0x2cbc9c=_0x5a8ff0;if(!SceneManager[_0x2cbc9c(0x5c8)]())return;VisuMZ[_0x2cbc9c(0x288)](_0x5b5c38,_0x5b5c38);const _0x11365c=VisuMZ[_0x2cbc9c(0x8e5)](_0x5b5c38[_0x2cbc9c(0x885)]);let _0x1a3188=$gameVariables[_0x2cbc9c(0x7de)](_0x5b5c38[_0x2cbc9c(0x833)]);Imported[_0x2cbc9c(0x610)]&&_0x5b5c38[_0x2cbc9c(0x3b3)]&&(_0x1a3188=VisuMZ[_0x2cbc9c(0x507)](_0x1a3188));const _0x303098=String(_0x1a3188),_0x26158d={'textColor':ColorManager[_0x2cbc9c(0x3ba)](_0x5b5c38[_0x2cbc9c(0x484)]),'flashColor':_0x5b5c38[_0x2cbc9c(0xaba)],'flashDuration':_0x5b5c38[_0x2cbc9c(0x2da)]};for(const _0x5010ff of _0x11365c){if(!_0x5010ff)continue;_0x5010ff[_0x2cbc9c(0x31a)](_0x303098,_0x26158d);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xad1),_0x7403c4=>{const _0x238355=_0x5a8ff0;if(!SceneManager[_0x238355(0x5c8)]())return;const _0x25df4a=$gameTemp[_0x238355(0x985)]();if(!_0x25df4a)return;_0x25df4a[_0x238355(0x66a)]('battleEffect');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x5ff),_0x458c51=>{const _0x676767=_0x5a8ff0;if(!SceneManager[_0x676767(0x5c8)]())return;VisuMZ[_0x676767(0x288)](_0x458c51,_0x458c51);const _0x557250=VisuMZ[_0x676767(0x8e5)](_0x458c51[_0x676767(0x885)]);for(const _0x2308a1 of _0x557250){if(!_0x2308a1)continue;_0x2308a1[_0x676767(0x36f)]();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x735),_0xd1fe10=>{const _0x2cadcc=_0x5a8ff0;if(!SceneManager[_0x2cadcc(0x5c8)]())return;VisuMZ[_0x2cadcc(0x288)](_0xd1fe10,_0xd1fe10);const _0x3a8cdb=VisuMZ[_0x2cadcc(0x8e5)](_0xd1fe10[_0x2cadcc(0x885)]),_0x680777=_0xd1fe10[_0x2cadcc(0xb18)][_0x2cadcc(0x44e)]()['trim']();let _0xf426b=_0xd1fe10[_0x2cadcc(0x18b)];const _0x21b715=_0xd1fe10['Frame'];![_0x2cadcc(0x3fb),_0x2cadcc(0x4f6),_0x2cadcc(0x596),_0x2cadcc(0x226)]['includes'](_0x680777)&&(_0xf426b=![]);for(const _0xabf11c of _0x3a8cdb){if(!_0xabf11c)continue;_0xabf11c[_0x2cadcc(0x5da)](_0x680777,_0xf426b,_0x21b715);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x121),_0x6ef850=>{const _0x1fe62e=_0x5a8ff0;if(!SceneManager[_0x1fe62e(0x5c8)]())return;VisuMZ[_0x1fe62e(0x288)](_0x6ef850,_0x6ef850);const _0x528ed2=VisuMZ[_0x1fe62e(0x8e5)](_0x6ef850['Targets']),_0x16042f=_0x6ef850['MotionType'][_0x1fe62e(0x44e)]()[_0x1fe62e(0xb20)](),_0x1109ec=_0x6ef850[_0x1fe62e(0x18b)];for(const _0x25ec73 of _0x528ed2){if(!_0x25ec73)continue;_0x25ec73[_0x1fe62e(0x27e)]=_0x1109ec;if(_0x16042f[_0x1fe62e(0x6d8)](/ATTACK[ ](\d+)/i))_0x25ec73[_0x1fe62e(0x6c0)](Number(RegExp['$1']));else _0x16042f===_0x1fe62e(0x3fb)?_0x25ec73[_0x1fe62e(0x21f)]():_0x25ec73[_0x1fe62e(0x5bd)](_0x16042f);if(!_0x1109ec)_0x25ec73['startWeaponAnimation'](0x0);else{if(_0x1109ec&&[_0x1fe62e(0x4f6),'swing',_0x1fe62e(0x70a)][_0x1fe62e(0x597)](_0x16042f)){}}_0x25ec73['_showWeapon']=undefined;}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xa2d),_0xe0522=>{const _0x3b1e94=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3b1e94(0x288)](_0xe0522,_0xe0522);const _0x7e465f=BattleManager[_0x3b1e94(0x1f8)];if(!_0x7e465f)return;if(!_0x7e465f[_0x3b1e94(0x12a)]())return;const _0x4d8fb6=VisuMZ[_0x3b1e94(0x8e5)](_0xe0522['Targets']);for(const _0x6fb82c of _0x4d8fb6){if(!_0x6fb82c)continue;_0x6fb82c['performAction'](_0x7e465f);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Motion_RefreshMotion',_0xe28757=>{const _0x1ddda8=_0x5a8ff0;if(!SceneManager[_0x1ddda8(0x5c8)]())return;VisuMZ[_0x1ddda8(0x288)](_0xe28757,_0xe28757);const _0x4580e6=VisuMZ[_0x1ddda8(0x8e5)](_0xe28757[_0x1ddda8(0x885)]);for(const _0xd207cc of _0x4580e6){if(!_0xd207cc)continue;if(!_0xd207cc[_0x1ddda8(0x407)]())continue;_0xd207cc['battler']()['refreshMotion']();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x3f4),_0x93de59=>{const _0x1a4c35=_0x5a8ff0;if(!SceneManager[_0x1a4c35(0x5c8)]())return;VisuMZ['ConvertParams'](_0x93de59,_0x93de59);const _0x412100=$gameTemp[_0x1a4c35(0x985)](),_0x1de7e9=_0x93de59[_0x1a4c35(0xb2b)]*Sprite_Battler[_0x1a4c35(0x87a)];_0x412100[_0x1a4c35(0x914)](_0x1de7e9);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x5b1),_0x3b7380=>{const _0x1b1317=_0x5a8ff0;if(!SceneManager[_0x1b1317(0x5c8)]())return;VisuMZ[_0x1b1317(0x288)](_0x3b7380,_0x3b7380);const _0x41eb68=$gameTemp[_0x1b1317(0x985)](),_0x4d7243=BattleManager[_0x1b1317(0x1f8)];if(!_0x41eb68||!_0x4d7243)return;if(!_0x4d7243[_0x1b1317(0x12a)]())return;const _0x5655e5=VisuMZ['CreateActionSequenceTargets'](_0x3b7380[_0x1b1317(0x885)]);for(const _0x45b8a1 of _0x5655e5){if(!_0x45b8a1)continue;_0x45b8a1[_0x1b1317(0x304)](_0x4d7243);}if(_0x3b7380[_0x1b1317(0x69a)])_0x41eb68[_0x1b1317(0x66a)](_0x1b1317(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x4fd),_0x1a3837=>{const _0x550ac4=_0x5a8ff0;if(!SceneManager[_0x550ac4(0x5c8)]())return;if(!$gameSystem[_0x550ac4(0xa92)]())return;VisuMZ[_0x550ac4(0x288)](_0x1a3837,_0x1a3837);const _0x5e1e96=$gameTemp[_0x550ac4(0x985)](),_0x1b0e1b=VisuMZ[_0x550ac4(0x8e5)](_0x1a3837[_0x550ac4(0x885)]),_0x1fd0e3=_0x1a3837[_0x550ac4(0x8d6)],_0x24b836=_0x1a3837[_0x550ac4(0x6e2)],_0x4dd27f=_0x1a3837[_0x550ac4(0x7cb)],_0x1562bd=_0x1a3837['Duration'],_0xaed7b5=_0x1a3837[_0x550ac4(0xb57)],_0x3f819a=_0x1a3837[_0x550ac4(0xad3)],_0x4cc5fa=_0x1a3837['MotionType'],_0x2b342e=_0x1a3837['WaitForMovement'];if(!_0x5e1e96)return;for(const _0x531b4b of _0x1b0e1b){if(!_0x531b4b)continue;let _0x48daae=_0x24b836,_0x25dfb4=_0x4dd27f;if(_0x1fd0e3[_0x550ac4(0x6d8)](/horz/i))_0x48daae*=_0x531b4b[_0x550ac4(0x34b)]()?-0x1:0x1;if(_0x1fd0e3[_0x550ac4(0x6d8)](/vert/i))_0x25dfb4*=_0x531b4b[_0x550ac4(0x34b)]()?-0x1:0x1;_0x531b4b[_0x550ac4(0x586)](_0x48daae,_0x25dfb4,_0x1562bd,_0xaed7b5,_0x3f819a),_0x531b4b['requestMotion'](_0x4cc5fa);}if(_0x2b342e)_0x5e1e96[_0x550ac4(0x66a)](_0x550ac4(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x292),_0x296718=>{const _0x4566e3=_0x5a8ff0;if(!SceneManager[_0x4566e3(0x5c8)]())return;if(!$gameSystem[_0x4566e3(0xa92)]())return;VisuMZ[_0x4566e3(0x288)](_0x296718,_0x296718);const _0x30ad57=$gameTemp[_0x4566e3(0x985)](),_0x567f05=VisuMZ[_0x4566e3(0x8e5)](_0x296718['Targets']),_0x107d24=_0x296718[_0x4566e3(0x5fb)],_0x2cd1f0=_0x296718[_0x4566e3(0x45c)],_0x166a3b=_0x296718[_0x4566e3(0x684)],_0x4c39bb=_0x296718['Duration'],_0x486e3e=_0x296718[_0x4566e3(0xb57)],_0x30fa68=_0x296718[_0x4566e3(0xad3)],_0x17024e=_0x296718[_0x4566e3(0xb18)],_0x3da492=_0x296718['WaitForMovement'];if(!_0x30ad57)return;for(const _0x305958 of _0x567f05){if(!_0x305958)continue;const _0x304a89=_0x296718[_0x4566e3(0x335)](_0x305958)||{'x':0x0,'y':0x0};let _0x4da4a0=_0x304a89['x'],_0x5154dc=_0x304a89['y'];if(_0x107d24[_0x4566e3(0x6d8)](/none/i))_0x4da4a0+=_0x2cd1f0,_0x5154dc+=_0x166a3b;else{if(_0x107d24[_0x4566e3(0x6d8)](/horz/i)&&_0x107d24['match'](/vert/i))_0x4da4a0+=_0x305958[_0x4566e3(0x34b)]()?-_0x2cd1f0:_0x2cd1f0,_0x5154dc+=_0x305958[_0x4566e3(0x34b)]()?-_0x166a3b:_0x166a3b;else{if(_0x107d24[_0x4566e3(0x6d8)](/horz/i))_0x4da4a0+=_0x305958[_0x4566e3(0x34b)]()?-_0x2cd1f0:_0x2cd1f0,_0x5154dc+=_0x166a3b;else _0x107d24[_0x4566e3(0x6d8)](/vert/i)&&(_0x4da4a0+=_0x2cd1f0,_0x5154dc+=_0x305958[_0x4566e3(0x34b)]()?-_0x166a3b:_0x166a3b);}}_0x305958[_0x4566e3(0x9fc)](_0x4da4a0,_0x5154dc,_0x4c39bb,_0x486e3e,_0x30fa68,-0x1),_0x305958['requestMotion'](_0x17024e);}if(_0x3da492)_0x30ad57[_0x4566e3(0x66a)](_0x4566e3(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xb26),_0x5d9171=>{const _0x43dcb4=_0x5a8ff0;if(!SceneManager[_0x43dcb4(0x5c8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x43dcb4(0x288)](_0x5d9171,_0x5d9171);const _0x4b07af=$gameTemp[_0x43dcb4(0x985)](),_0x45d569=VisuMZ[_0x43dcb4(0x8e5)](_0x5d9171[_0x43dcb4(0x885)]),_0x3b9109=_0x5d9171[_0x43dcb4(0x77e)],_0x34cd34=_0x5d9171[_0x43dcb4(0x5fb)],_0x10ef19=_0x5d9171[_0x43dcb4(0x45c)],_0x52dff6=_0x5d9171[_0x43dcb4(0x684)],_0x4f77f9=_0x5d9171[_0x43dcb4(0x8a5)],_0xbf0e22=_0x5d9171[_0x43dcb4(0xb57)],_0x47c845=_0x5d9171[_0x43dcb4(0xad3)],_0x267a48=_0x5d9171[_0x43dcb4(0xb18)],_0x1bcbee=_0x5d9171[_0x43dcb4(0x69a)];if(!_0x4b07af)return;for(const _0x397631 of _0x45d569){if(!_0x397631)continue;let _0x5990ef=_0x397631[_0x43dcb4(0x407)]()[_0x43dcb4(0x7bd)],_0x1980bf=_0x397631['battler']()[_0x43dcb4(0x4b6)];if(_0x3b9109[_0x43dcb4(0x6d8)](/home/i))_0x5990ef=_0x397631[_0x43dcb4(0x407)]()[_0x43dcb4(0x603)],_0x1980bf=_0x397631[_0x43dcb4(0x407)]()[_0x43dcb4(0x27a)];else{if(_0x3b9109['match'](/center/i))_0x5990ef=Graphics['boxWidth']/0x2,_0x1980bf=Graphics[_0x43dcb4(0x830)]/0x2;else _0x3b9109[_0x43dcb4(0x6d8)](/point (\d+), (\d+)/i)&&(_0x5990ef=Number(RegExp['$1']),_0x1980bf=Number(RegExp['$2']));}if(_0x34cd34[_0x43dcb4(0x6d8)](/none/i))_0x5990ef+=_0x10ef19,_0x1980bf+=_0x52dff6;else{if(_0x34cd34['match'](/horz/i)&&_0x34cd34['match'](/vert/i))_0x5990ef+=_0x397631[_0x43dcb4(0x34b)]()?-_0x10ef19:_0x10ef19,_0x1980bf+=_0x397631[_0x43dcb4(0x34b)]()?-_0x52dff6:_0x52dff6;else{if(_0x34cd34[_0x43dcb4(0x6d8)](/horz/i))_0x5990ef+=_0x397631['isActor']()?-_0x10ef19:_0x10ef19,_0x1980bf+=_0x52dff6;else _0x34cd34['match'](/vert/i)&&(_0x5990ef+=_0x10ef19,_0x1980bf+=_0x397631[_0x43dcb4(0x34b)]()?-_0x52dff6:_0x52dff6);}}_0x397631[_0x43dcb4(0x9fc)](_0x5990ef,_0x1980bf,_0x4f77f9,_0xbf0e22,_0x47c845,-0x1),_0x397631[_0x43dcb4(0x5bd)](_0x267a48);}if(_0x1bcbee)_0x4b07af['setWaitMode'](_0x43dcb4(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x217),_0x23a441=>{const _0x117efe=_0x5a8ff0;if(!SceneManager[_0x117efe(0x5c8)]())return;if(!$gameSystem[_0x117efe(0xa92)]())return;VisuMZ['ConvertParams'](_0x23a441,_0x23a441);const _0x244c1d=$gameTemp['getLastPluginCommandInterpreter'](),_0x2349e9=VisuMZ[_0x117efe(0x8e5)](_0x23a441[_0x117efe(0x634)]),_0x441627=VisuMZ[_0x117efe(0x8e5)](_0x23a441[_0x117efe(0xb89)]),_0x24b775=_0x23a441[_0x117efe(0x678)];let _0x46ecef=_0x23a441[_0x117efe(0x408)];const _0x58b1fe=_0x23a441[_0x117efe(0x5fb)],_0x5cb6f5=_0x23a441[_0x117efe(0x45c)],_0x3ef4a7=_0x23a441[_0x117efe(0x684)],_0x219d31=_0x23a441[_0x117efe(0x8a5)],_0x2cbeb6=_0x23a441['FaceDirection'],_0x5b994b=_0x23a441[_0x117efe(0xad3)],_0x4df267=_0x23a441[_0x117efe(0xb18)],_0x822fb=_0x23a441['WaitForMovement'],_0x544961=Math[_0x117efe(0x60d)](..._0x441627[_0x117efe(0x5d7)](_0x47180a=>_0x47180a[_0x117efe(0x407)]()[_0x117efe(0x7bd)]-_0x47180a[_0x117efe(0x407)]()[_0x117efe(0x787)]()/0x2)),_0x235dff=Math[_0x117efe(0x6dd)](..._0x441627[_0x117efe(0x5d7)](_0x42e711=>_0x42e711[_0x117efe(0x407)]()[_0x117efe(0x7bd)]+_0x42e711[_0x117efe(0x407)]()['mainSpriteWidth']()/0x2)),_0x527c18=Math[_0x117efe(0x60d)](..._0x441627[_0x117efe(0x5d7)](_0xc9a2c3=>_0xc9a2c3['battler']()['_baseY']-_0xc9a2c3[_0x117efe(0x407)]()[_0x117efe(0xb45)]())),_0x2ac791=Math['max'](..._0x441627[_0x117efe(0x5d7)](_0x568f5b=>_0x568f5b['battler']()[_0x117efe(0x4b6)])),_0x49f404=_0x441627[_0x117efe(0x6e0)](_0x55a437=>_0x55a437[_0x117efe(0x34b)]())[_0x117efe(0x6b9)],_0x48b87e=_0x441627['filter'](_0x21ddec=>_0x21ddec[_0x117efe(0x172)]())[_0x117efe(0x6b9)];let _0x49970b=0x0,_0xe14b48=0x0;if(_0x24b775[_0x117efe(0x6d8)](/front/i))_0x49970b=_0x49f404>=_0x48b87e?_0x544961:_0x235dff;else{if(_0x24b775['match'](/middle/i))_0x49970b=(_0x544961+_0x235dff)/0x2,_0x46ecef=-0x1;else _0x24b775[_0x117efe(0x6d8)](/back/i)&&(_0x49970b=_0x49f404>=_0x48b87e?_0x235dff:_0x544961);}if(_0x24b775['match'](/head/i))_0xe14b48=_0x527c18;else{if(_0x24b775[_0x117efe(0x6d8)](/center/i))_0xe14b48=(_0x527c18+_0x2ac791)/0x2;else _0x24b775[_0x117efe(0x6d8)](/base/i)&&(_0xe14b48=_0x2ac791);}if(!_0x244c1d)return;for(const _0x3c7a51 of _0x2349e9){if(!_0x3c7a51)continue;let _0x51f95e=_0x49970b,_0x413c1d=_0xe14b48;if(_0x58b1fe[_0x117efe(0x6d8)](/none/i))_0x51f95e+=_0x5cb6f5,_0x413c1d+=_0x3ef4a7;else{if(_0x58b1fe[_0x117efe(0x6d8)](/horz/i)&&_0x58b1fe[_0x117efe(0x6d8)](/vert/i))_0x51f95e+=_0x3c7a51[_0x117efe(0x34b)]()?-_0x5cb6f5:_0x5cb6f5,_0x413c1d+=_0x3c7a51[_0x117efe(0x34b)]()?-_0x3ef4a7:_0x3ef4a7;else{if(_0x58b1fe[_0x117efe(0x6d8)](/horz/i))_0x51f95e+=_0x3c7a51[_0x117efe(0x34b)]()?-_0x5cb6f5:_0x5cb6f5,_0x413c1d+=_0x3ef4a7;else _0x58b1fe[_0x117efe(0x6d8)](/vert/i)&&(_0x51f95e+=_0x5cb6f5,_0x413c1d+=_0x3c7a51['isActor']()?-_0x3ef4a7:_0x3ef4a7);}}_0x3c7a51[_0x117efe(0x9fc)](_0x51f95e,_0x413c1d,_0x219d31,_0x2cbeb6,_0x5b994b,_0x46ecef),_0x3c7a51['requestMotion'](_0x4df267);}if(_0x822fb)_0x244c1d[_0x117efe(0x66a)]('battleMove');}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xb9b),_0x42f911=>{const _0x26686c=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x26686c(0xa92)]())return;VisuMZ['ConvertParams'](_0x42f911,_0x42f911);const _0x5a4072=VisuMZ[_0x26686c(0x8e5)](_0x42f911[_0x26686c(0x885)]);let _0x564101=_0x42f911['Direction']['match'](/back/i);for(const _0x2c6435 of _0x5a4072){if(!_0x2c6435)continue;if(_0x42f911[_0x26686c(0x767)][_0x26686c(0x6d8)](/rand/i))_0x564101=Math[_0x26686c(0x8c8)](0x2);_0x2c6435[_0x26686c(0x37a)](!!_0x564101);}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x648),_0x237184=>{const _0x4fdbf5=_0x5a8ff0;if(!SceneManager[_0x4fdbf5(0x5c8)]())return;if(!$gameSystem[_0x4fdbf5(0xa92)]())return;VisuMZ[_0x4fdbf5(0x288)](_0x237184,_0x237184);const _0x528106=VisuMZ[_0x4fdbf5(0x8e5)](_0x237184['Targets']),_0x24620f=_0x237184[_0x4fdbf5(0xa82)];for(const _0x14d7c7 of _0x528106){if(!_0x14d7c7)continue;const _0x148ac4=_0x237184['PointJS'](_0x14d7c7)||{'x':0x0,'y':0x0};let _0x3e52d2=_0x148ac4['x'],_0x1a50ec=_0x148ac4['y'];_0x14d7c7['setBattlerFacePoint'](Math[_0x4fdbf5(0xb41)](_0x3e52d2),Math['round'](_0x1a50ec),!!_0x24620f);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x680),_0xd03e88=>{const _0x542eec=_0x5a8ff0;if(!SceneManager[_0x542eec(0x5c8)]())return;if(!$gameSystem[_0x542eec(0xa92)]())return;VisuMZ[_0x542eec(0x288)](_0xd03e88,_0xd03e88);const _0x3b55e1=VisuMZ[_0x542eec(0x8e5)](_0xd03e88[_0x542eec(0x885)]);let _0x5a4261=_0xd03e88['Point'];const _0x477028=_0xd03e88[_0x542eec(0xa82)];for(const _0x110b30 of _0x3b55e1){if(!_0x110b30)continue;let _0x3a4c71=_0x110b30[_0x542eec(0x407)]()[_0x542eec(0x7bd)],_0x9c7107=_0x110b30['battler']()['_baseY'];if(_0x5a4261[_0x542eec(0x6d8)](/home/i))_0x3a4c71=_0x110b30['battler']()[_0x542eec(0x603)],_0x9c7107=_0x110b30['battler']()[_0x542eec(0x27a)];else{if(_0x5a4261[_0x542eec(0x6d8)](/center/i))_0x3a4c71=Graphics[_0x542eec(0x650)]/0x2,_0x9c7107=Graphics[_0x542eec(0x830)]/0x2;else _0x5a4261[_0x542eec(0x6d8)](/point (\d+), (\d+)/i)&&(_0x3a4c71=Number(RegExp['$1']),_0x9c7107=Number(RegExp['$2']));}_0x110b30['setBattlerFacePoint'](Math['round'](_0x3a4c71),Math['round'](_0x9c7107),!!_0x477028);}}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xc15),_0x18ce9f=>{const _0x295b88=_0x5a8ff0;if(!SceneManager[_0x295b88(0x5c8)]())return;if(!$gameSystem[_0x295b88(0xa92)]())return;VisuMZ[_0x295b88(0x288)](_0x18ce9f,_0x18ce9f);const _0x51f201=VisuMZ[_0x295b88(0x8e5)](_0x18ce9f['Targets1']),_0x378a0f=VisuMZ[_0x295b88(0x8e5)](_0x18ce9f['Targets2']),_0x3c0f1d=_0x378a0f['map'](_0x46744c=>_0x46744c&&_0x46744c[_0x295b88(0x407)]()?_0x46744c[_0x295b88(0x407)]()[_0x295b88(0x7bd)]:0x0)/(_0x378a0f[_0x295b88(0x6b9)]||0x1),_0x32a2de=_0x378a0f[_0x295b88(0x5d7)](_0x21832e=>_0x21832e&&_0x21832e['battler']()?_0x21832e[_0x295b88(0x407)]()[_0x295b88(0x4b6)]:0x0)/(_0x378a0f['length']||0x1),_0x3b006f=_0x18ce9f[_0x295b88(0xa82)];for(const _0x5c32ed of _0x51f201){if(!_0x5c32ed)continue;_0x5c32ed[_0x295b88(0xafd)](Math[_0x295b88(0xb41)](_0x3c0f1d),Math[_0x295b88(0xb41)](_0x32a2de),!!_0x3b006f);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xb12),_0x16371a=>{const _0x285ec4=_0x5a8ff0;if(!SceneManager[_0x285ec4(0x5c8)]())return;VisuMZ[_0x285ec4(0x288)](_0x16371a,_0x16371a);const _0x3870d9=$gameTemp[_0x285ec4(0x985)](),_0x2b9a03=VisuMZ[_0x285ec4(0x8e5)](_0x16371a['Targets']),_0x3fa82e=_0x16371a['Height'],_0x45ac5f=_0x16371a[_0x285ec4(0x8a5)],_0x2ff48f=_0x16371a[_0x285ec4(0xad3)],_0x540325=_0x16371a[_0x285ec4(0x7e1)];if(!_0x3870d9)return;for(const _0x264dfc of _0x2b9a03){if(!_0x264dfc)continue;_0x264dfc[_0x285ec4(0x529)](_0x3fa82e,_0x45ac5f,_0x2ff48f);}if(_0x540325)_0x3870d9[_0x285ec4(0x66a)](_0x285ec4(0x865));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Movement_HomeReset',_0x81ba3a=>{const _0x21965e=_0x5a8ff0;if(!SceneManager[_0x21965e(0x5c8)]())return;VisuMZ[_0x21965e(0x288)](_0x81ba3a,_0x81ba3a);const _0x2fb504=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2fb504)return;const _0x209844=VisuMZ[_0x21965e(0x8e5)](_0x81ba3a[_0x21965e(0x885)]);for(const _0x9cbb8a of _0x209844){if(!_0x9cbb8a)continue;_0x9cbb8a['performActionEndMembers']();}BattleManager[_0x21965e(0xbee)]&&BattleManager[_0x21965e(0xbee)]['performActionEnd']();if(_0x81ba3a[_0x21965e(0x69a)])_0x2fb504[_0x21965e(0x66a)](_0x21965e(0xc0f));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x9a3),_0x418ef1=>{const _0x10917a=_0x5a8ff0;if(!SceneManager[_0x10917a(0x5c8)]())return;VisuMZ[_0x10917a(0x288)](_0x418ef1,_0x418ef1);const _0x3650e0=$gameTemp[_0x10917a(0x985)](),_0x5f0e7f=VisuMZ['CreateActionSequenceTargets'](_0x418ef1[_0x10917a(0x885)]),_0x1a6985=_0x418ef1['Height'],_0x5a3760=_0x418ef1['Duration'],_0xae5865=_0x418ef1['WaitForJump'];if(!_0x3650e0)return;for(const _0x42a236 of _0x5f0e7f){if(!_0x42a236)continue;_0x42a236[_0x10917a(0x138)](_0x1a6985,_0x5a3760);}if(_0xae5865)_0x3650e0['setWaitMode'](_0x10917a(0x180));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x624),_0x19868e=>{const _0x4e7e24=_0x5a8ff0;if(!SceneManager[_0x4e7e24(0x5c8)]())return;if(!$gameSystem[_0x4e7e24(0xa92)]())return;VisuMZ[_0x4e7e24(0x288)](_0x19868e,_0x19868e);const _0x8e6a86=$gameTemp[_0x4e7e24(0x985)](),_0x1e20fc=VisuMZ['CreateActionSequenceTargets'](_0x19868e[_0x4e7e24(0x885)]),_0x4edf88=_0x19868e[_0x4e7e24(0x8d6)],_0x353c6b=_0x19868e['DistanceX'],_0x41fd46=_0x19868e[_0x4e7e24(0x7cb)],_0x4a4cbe=_0x19868e[_0x4e7e24(0x8a5)],_0x59d6c7=_0x19868e[_0x4e7e24(0xb57)],_0x3e93ce=_0x19868e['EasingType'],_0x566bc6=_0x19868e[_0x4e7e24(0xb18)],_0x50ab9b=_0x19868e['WaitForMovement'];if(!_0x8e6a86)return;for(const _0xaa2482 of _0x1e20fc){if(!_0xaa2482)continue;let _0x593b70=_0x353c6b,_0xcc1192=_0x41fd46;if(_0x4edf88[_0x4e7e24(0x6d8)](/horz/i))_0x593b70*=_0xaa2482['isActor']()?-0x1:0x1;if(_0x4edf88[_0x4e7e24(0x6d8)](/vert/i))_0xcc1192*=_0xaa2482[_0x4e7e24(0x34b)]()?-0x1:0x1;_0xaa2482['moveBattlerDistance'](_0x593b70,_0xcc1192,_0x4a4cbe,_0x59d6c7,_0x3e93ce),_0xaa2482[_0x4e7e24(0x5bd)](_0x566bc6);}if(_0x50ab9b)_0x8e6a86['setWaitMode'](_0x4e7e24(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xbef),_0x43267f=>{const _0x141bd7=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x141bd7(0xa92)]())return;VisuMZ[_0x141bd7(0x288)](_0x43267f,_0x43267f);const _0x5765af=$gameTemp[_0x141bd7(0x985)](),_0x5206c4=VisuMZ['CreateActionSequenceTargets'](_0x43267f['Targets']),_0x29ee84=_0x43267f[_0x141bd7(0x5fb)],_0x4df464=_0x43267f[_0x141bd7(0x45c)],_0xede5cf=_0x43267f[_0x141bd7(0x684)],_0x1e6af7=_0x43267f[_0x141bd7(0x8a5)],_0x346d8c=_0x43267f[_0x141bd7(0xb57)],_0x436b27=_0x43267f[_0x141bd7(0xad3)],_0x3346f6=_0x43267f[_0x141bd7(0xb18)],_0x487248=_0x43267f['WaitForMovement'];if(!_0x5765af)return;for(const _0x5ae377 of _0x5206c4){if(!_0x5ae377)continue;const _0x5773aa=_0x43267f[_0x141bd7(0x335)](_0x5ae377)||{'x':0x0,'y':0x0};let _0x337a01=_0x5773aa['x'],_0x246f23=_0x5773aa['y'];if(_0x29ee84[_0x141bd7(0x6d8)](/none/i))_0x337a01+=_0x4df464,_0x246f23+=_0xede5cf;else{if(_0x29ee84[_0x141bd7(0x6d8)](/horz/i)&&_0x29ee84[_0x141bd7(0x6d8)](/vert/i))_0x337a01+=_0x5ae377[_0x141bd7(0x34b)]()?-_0x4df464:_0x4df464,_0x246f23+=_0x5ae377['isActor']()?-_0xede5cf:_0xede5cf;else{if(_0x29ee84[_0x141bd7(0x6d8)](/horz/i))_0x337a01+=_0x5ae377[_0x141bd7(0x34b)]()?-_0x4df464:_0x4df464,_0x246f23+=_0xede5cf;else _0x29ee84[_0x141bd7(0x6d8)](/vert/i)&&(_0x337a01+=_0x4df464,_0x246f23+=_0x5ae377[_0x141bd7(0x34b)]()?-_0xede5cf:_0xede5cf);}}_0x5ae377[_0x141bd7(0x3cf)](_0x337a01,_0x246f23,_0x1e6af7,_0x346d8c,_0x436b27,-0x1),_0x5ae377[_0x141bd7(0x5bd)](_0x3346f6);}if(_0x487248)_0x5765af['setWaitMode']('battleMove');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x699),_0x829fe=>{const _0x5e175d=_0x5a8ff0;if(!SceneManager[_0x5e175d(0x5c8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x5e175d(0x288)](_0x829fe,_0x829fe);const _0x431597=$gameTemp[_0x5e175d(0x985)](),_0x5780e4=VisuMZ[_0x5e175d(0x8e5)](_0x829fe[_0x5e175d(0x885)]),_0x418a98=_0x829fe['Destination'],_0x5808a5=_0x829fe['OffsetAdjust'],_0x13daf5=_0x829fe[_0x5e175d(0x45c)],_0x4c78ca=_0x829fe[_0x5e175d(0x684)],_0x1e510a=_0x829fe[_0x5e175d(0x8a5)],_0x4aaa29=_0x829fe['FaceDirection'],_0x56e0e1=_0x829fe[_0x5e175d(0xad3)],_0x1d72eb=_0x829fe[_0x5e175d(0xb18)],_0xd75079=_0x829fe[_0x5e175d(0x69a)];if(!_0x431597)return;for(const _0x207c18 of _0x5780e4){if(!_0x207c18)continue;let _0x2ca46e=_0x207c18[_0x5e175d(0x407)]()[_0x5e175d(0x7bd)],_0x194382=_0x207c18[_0x5e175d(0x407)]()[_0x5e175d(0x4b6)];if(_0x418a98[_0x5e175d(0x6d8)](/home/i))_0x2ca46e=_0x207c18[_0x5e175d(0x407)]()['_homeX'],_0x194382=_0x207c18[_0x5e175d(0x407)]()[_0x5e175d(0x27a)];else{if(_0x418a98[_0x5e175d(0x6d8)](/center/i))_0x2ca46e=Graphics[_0x5e175d(0x650)]/0x2,_0x194382=Graphics['boxHeight']/0x2;else _0x418a98[_0x5e175d(0x6d8)](/point (\d+), (\d+)/i)&&(_0x2ca46e=Number(RegExp['$1']),_0x194382=Number(RegExp['$2']));}if(_0x5808a5[_0x5e175d(0x6d8)](/none/i))_0x2ca46e+=_0x13daf5,_0x194382+=_0x4c78ca;else{if(_0x5808a5['match'](/horz/i)&&_0x5808a5[_0x5e175d(0x6d8)](/vert/i))_0x2ca46e+=_0x207c18[_0x5e175d(0x34b)]()?-_0x13daf5:_0x13daf5,_0x194382+=_0x207c18[_0x5e175d(0x34b)]()?-_0x4c78ca:_0x4c78ca;else{if(_0x5808a5[_0x5e175d(0x6d8)](/horz/i))_0x2ca46e+=_0x207c18[_0x5e175d(0x34b)]()?-_0x13daf5:_0x13daf5,_0x194382+=_0x4c78ca;else _0x5808a5['match'](/vert/i)&&(_0x2ca46e+=_0x13daf5,_0x194382+=_0x207c18['isActor']()?-_0x4c78ca:_0x4c78ca);}}_0x207c18['moveBattlerToPoint'](_0x2ca46e,_0x194382,_0x1e510a,_0x4aaa29,_0x56e0e1,-0x1),_0x207c18[_0x5e175d(0x5bd)](_0x1d72eb);}if(_0xd75079)_0x431597[_0x5e175d(0x66a)](_0x5e175d(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x2d9),_0xe8bf0=>{const _0x3fefc1=_0x5a8ff0;if(!SceneManager[_0x3fefc1(0x5c8)]())return;if(!$gameSystem[_0x3fefc1(0xa92)]())return;VisuMZ[_0x3fefc1(0x288)](_0xe8bf0,_0xe8bf0);const _0x165d13=$gameTemp['getLastPluginCommandInterpreter'](),_0x16a88c=VisuMZ['CreateActionSequenceTargets'](_0xe8bf0[_0x3fefc1(0x634)]),_0x505256=VisuMZ['CreateActionSequenceTargets'](_0xe8bf0[_0x3fefc1(0xb89)]),_0x2a3ca2=_0xe8bf0['TargetLocation'];let _0x24e7a5=_0xe8bf0[_0x3fefc1(0x408)];const _0x492771=_0xe8bf0[_0x3fefc1(0x5fb)],_0x3e6d65=_0xe8bf0[_0x3fefc1(0x45c)],_0x4a61f5=_0xe8bf0[_0x3fefc1(0x684)],_0x24c325=_0xe8bf0[_0x3fefc1(0x8a5)],_0x325109=_0xe8bf0[_0x3fefc1(0xb57)],_0x8639a=_0xe8bf0[_0x3fefc1(0xad3)],_0xeb7172=_0xe8bf0['MotionType'],_0x5c32cf=_0xe8bf0[_0x3fefc1(0x69a)],_0x3e6010=Math[_0x3fefc1(0x60d)](..._0x505256[_0x3fefc1(0x5d7)](_0x164899=>_0x164899['battler']()[_0x3fefc1(0x7bd)]-_0x164899[_0x3fefc1(0x407)]()['mainSpriteWidth']()/0x2)),_0x387193=Math[_0x3fefc1(0x6dd)](..._0x505256[_0x3fefc1(0x5d7)](_0x21a3d1=>_0x21a3d1[_0x3fefc1(0x407)]()[_0x3fefc1(0x7bd)]+_0x21a3d1[_0x3fefc1(0x407)]()['mainSpriteWidth']()/0x2)),_0x4c830b=Math[_0x3fefc1(0x60d)](..._0x505256[_0x3fefc1(0x5d7)](_0x5cfaa4=>_0x5cfaa4[_0x3fefc1(0x407)]()[_0x3fefc1(0x4b6)]-_0x5cfaa4[_0x3fefc1(0x407)]()[_0x3fefc1(0xb45)]())),_0x50db5c=Math['max'](..._0x505256[_0x3fefc1(0x5d7)](_0x2de389=>_0x2de389['battler']()[_0x3fefc1(0x4b6)])),_0x3269a3=_0x505256[_0x3fefc1(0x6e0)](_0x5ecab7=>_0x5ecab7['isActor']())['length'],_0x440c44=_0x505256[_0x3fefc1(0x6e0)](_0xe6173b=>_0xe6173b[_0x3fefc1(0x172)]())['length'];let _0x2c66ad=0x0,_0x43e2be=0x0;if(_0x2a3ca2['match'](/front/i))_0x2c66ad=_0x3269a3>=_0x440c44?_0x3e6010:_0x387193;else{if(_0x2a3ca2['match'](/middle/i))_0x2c66ad=(_0x3e6010+_0x387193)/0x2,_0x24e7a5=-0x1;else _0x2a3ca2[_0x3fefc1(0x6d8)](/back/i)&&(_0x2c66ad=_0x3269a3>=_0x440c44?_0x387193:_0x3e6010);}if(_0x2a3ca2[_0x3fefc1(0x6d8)](/head/i))_0x43e2be=_0x4c830b;else{if(_0x2a3ca2['match'](/center/i))_0x43e2be=(_0x4c830b+_0x50db5c)/0x2;else _0x2a3ca2['match'](/base/i)&&(_0x43e2be=_0x50db5c);}if(!_0x165d13)return;for(const _0x5133b8 of _0x16a88c){if(!_0x5133b8)continue;let _0x7c7fa2=_0x2c66ad,_0x4122f1=_0x43e2be;if(_0x492771['match'](/none/i))_0x7c7fa2+=_0x3e6d65,_0x4122f1+=_0x4a61f5;else{if(_0x492771[_0x3fefc1(0x6d8)](/horz/i)&&_0x492771[_0x3fefc1(0x6d8)](/vert/i))_0x7c7fa2+=_0x5133b8['isActor']()?-_0x3e6d65:_0x3e6d65,_0x4122f1+=_0x5133b8[_0x3fefc1(0x34b)]()?-_0x4a61f5:_0x4a61f5;else{if(_0x492771[_0x3fefc1(0x6d8)](/horz/i))_0x7c7fa2+=_0x5133b8[_0x3fefc1(0x34b)]()?-_0x3e6d65:_0x3e6d65,_0x4122f1+=_0x4a61f5;else _0x492771[_0x3fefc1(0x6d8)](/vert/i)&&(_0x7c7fa2+=_0x3e6d65,_0x4122f1+=_0x5133b8['isActor']()?-_0x4a61f5:_0x4a61f5);}}_0x5133b8[_0x3fefc1(0x3cf)](_0x7c7fa2,_0x4122f1,_0x24c325,_0x325109,_0x8639a,_0x24e7a5),_0x5133b8[_0x3fefc1(0x5bd)](_0xeb7172);}if(_0x5c32cf)_0x165d13[_0x3fefc1(0x66a)]('battleMove');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xaf1),_0x2d7853=>{const _0x5db6dd=_0x5a8ff0;if(!SceneManager[_0x5db6dd(0x5c8)]())return;VisuMZ[_0x5db6dd(0x288)](_0x2d7853,_0x2d7853);const _0x54909c=$gameTemp['getLastPluginCommandInterpreter'](),_0x5a6b2f=VisuMZ[_0x5db6dd(0x8e5)](_0x2d7853['Targets']),_0x59a966=_0x2d7853[_0x5db6dd(0x325)],_0x4be077=_0x2d7853[_0x5db6dd(0x8a5)],_0x506034=_0x2d7853['EasingType'],_0x4a51a1=_0x2d7853['WaitForOpacity'];if(!_0x54909c)return;for(const _0x186378 of _0x5a6b2f){if(!_0x186378)continue;_0x186378['changeBattlerOpacity'](_0x59a966,_0x4be077,_0x506034);}if(_0x4a51a1)_0x54909c[_0x5db6dd(0x66a)](_0x5db6dd(0x7fa));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Movement_Scale',_0x227bca=>{const _0x198032=_0x5a8ff0;if(!SceneManager[_0x198032(0x5c8)]())return;VisuMZ[_0x198032(0x288)](_0x227bca,_0x227bca);const _0x3e05a0=$gameTemp['getLastPluginCommandInterpreter'](),_0x2bf48c=VisuMZ[_0x198032(0x8e5)](_0x227bca[_0x198032(0x885)]),_0x33fbd5=_0x227bca[_0x198032(0x8e8)],_0x403fda=_0x227bca[_0x198032(0x61e)],_0x71d44a=_0x227bca['Duration'],_0x4d2424=_0x227bca['EasingType'],_0x43449a=_0x227bca['WaitForScale'];if(!_0x3e05a0)return;for(const _0xd4d381 of _0x2bf48c){if(!_0xd4d381)continue;_0xd4d381[_0x198032(0x72b)](_0x33fbd5,_0x403fda,_0x71d44a,_0x4d2424);}if(_0x43449a)_0x3e05a0[_0x198032(0x66a)](_0x198032(0x3a8));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0x5d4),_0x479765=>{const _0x58cf0c=_0x5a8ff0;if(!SceneManager[_0x58cf0c(0x5c8)]())return;VisuMZ[_0x58cf0c(0x288)](_0x479765,_0x479765);const _0x584e5f=$gameTemp[_0x58cf0c(0x985)](),_0x56fe85=VisuMZ['CreateActionSequenceTargets'](_0x479765[_0x58cf0c(0x885)]),_0x531870=_0x479765[_0x58cf0c(0x643)],_0x3a6eb0=_0x479765[_0x58cf0c(0x156)],_0x23b2b2=_0x479765['Duration'],_0xf294b5=_0x479765['EasingType'],_0x482120=_0x479765['WaitForSkew'];if(!_0x584e5f)return;for(const _0x2b0994 of _0x56fe85){if(!_0x2b0994)continue;_0x2b0994[_0x58cf0c(0xaf9)](_0x531870,_0x3a6eb0,_0x23b2b2,_0xf294b5);}if(_0x482120)_0x584e5f[_0x58cf0c(0x66a)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x1d2),_0x3e87d0=>{const _0x33fe10=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x33fe10(0x288)](_0x3e87d0,_0x3e87d0);const _0x108636=$gameTemp[_0x33fe10(0x985)](),_0x3cf415=VisuMZ[_0x33fe10(0x8e5)](_0x3e87d0[_0x33fe10(0x885)]),_0xd4ee28=_0x3e87d0[_0x33fe10(0x2db)],_0x2cafa0=_0x3e87d0[_0x33fe10(0x8a5)],_0x15d36d=_0x3e87d0[_0x33fe10(0xad3)],_0x5d7fe9=_0x3e87d0[_0x33fe10(0x83f)],_0x1cf270=_0x3e87d0['WaitForSpin'];if(!_0x108636)return;for(const _0x2455c2 of _0x3cf415){if(!_0x2455c2)continue;_0x2455c2[_0x33fe10(0x41e)](_0xd4ee28,_0x2cafa0,_0x15d36d,_0x5d7fe9);}if(_0x1cf270)_0x108636[_0x33fe10(0x66a)](_0x33fe10(0x8c5));}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Movement_WaitForFloat',_0x49452c=>{const _0x3bb545=_0x5a8ff0;if(!SceneManager[_0x3bb545(0x5c8)]())return;const _0x5a5008=$gameTemp[_0x3bb545(0x985)]();if(!_0x5a5008)return;_0x5a5008[_0x3bb545(0x66a)](_0x3bb545(0x865));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x68e),_0x2caec1=>{const _0x52c1ea=_0x5a8ff0;if(!SceneManager[_0x52c1ea(0x5c8)]())return;const _0x29a378=$gameTemp[_0x52c1ea(0x985)]();if(!_0x29a378)return;_0x29a378[_0x52c1ea(0x66a)]('battleJump');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x25c),_0x5b83bc=>{const _0x1163b0=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x961b98=$gameTemp[_0x1163b0(0x985)]();if(!_0x961b98)return;_0x961b98['setWaitMode'](_0x1163b0(0xc0f));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x89d),_0x308a83=>{const _0x28b418=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x399ed9=$gameTemp[_0x28b418(0x985)]();if(!_0x399ed9)return;_0x399ed9[_0x28b418(0x66a)]('battleOpacity');}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xb5b),_0x2e60e0=>{const _0x18dbb4=_0x5a8ff0;if(!SceneManager[_0x18dbb4(0x5c8)]())return;const _0x2c04a1=$gameTemp[_0x18dbb4(0x985)]();if(!_0x2c04a1)return;_0x2c04a1[_0x18dbb4(0x66a)](_0x18dbb4(0x3a8));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Movement_WaitForSkew',_0x242010=>{const _0x49ecdf=_0x5a8ff0;if(!SceneManager[_0x49ecdf(0x5c8)]())return;const _0x39dd1c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x39dd1c)return;_0x39dd1c[_0x49ecdf(0x66a)](_0x49ecdf(0x478));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x981),_0x564748=>{const _0x2aa6dc=_0x5a8ff0;if(!SceneManager[_0x2aa6dc(0x5c8)]())return;const _0x54301f=$gameTemp[_0x2aa6dc(0x985)]();if(!_0x54301f)return;_0x54301f[_0x2aa6dc(0x66a)](_0x2aa6dc(0x8c5));}),VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb04)]=function(){const _0x157610=_0x5a8ff0;if(!Imported[_0x157610(0x19c)])return;if(VisuMZ[_0x157610(0xaa2)]['version']<1.08){let _0x204f37='';_0x204f37+=_0x157610(0xb93),_0x204f37+='in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.',alert(_0x204f37),SceneManager[_0x157610(0xad2)]();}},PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],'ActSeq_Projectile_Animation',_0x3efc4b=>{const _0xf720f8=_0x5a8ff0;if(!SceneManager[_0xf720f8(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0xf720f8(0x288)](_0x3efc4b,_0x3efc4b),VisuMZ[_0xf720f8(0xbb3)][_0xf720f8(0xb04)]();const _0x30c6e4=$gameTemp[_0xf720f8(0x985)](),_0x81eac2=_0x3efc4b[_0xf720f8(0x3a1)];if(!_0x30c6e4)return;const _0x25a655=BattleManager[_0xf720f8(0x566)];if(!_0x25a655)return;_0x25a655['createActionSequenceProjectile'](_0x3efc4b);if(_0x81eac2)_0x30c6e4['setWaitMode'](_0xf720f8(0x182));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Projectile_Icon',_0x49807a=>{const _0x2175f9=_0x5a8ff0;if(!SceneManager[_0x2175f9(0x5c8)]())return;if(!Imported[_0x2175f9(0x19c)])return;VisuMZ[_0x2175f9(0x288)](_0x49807a,_0x49807a),VisuMZ[_0x2175f9(0xbb3)][_0x2175f9(0xb04)]();const _0x253cf1=$gameTemp[_0x2175f9(0x985)](),_0x41d35e=_0x49807a[_0x2175f9(0x3a1)];if(!_0x253cf1)return;const _0x5d20ce=BattleManager[_0x2175f9(0x566)];if(!_0x5d20ce)return;_0x5d20ce[_0x2175f9(0x796)](_0x49807a);if(_0x41d35e)_0x253cf1['setWaitMode'](_0x2175f9(0x182));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Projectile_Picture',_0xfcc4aa=>{const _0x229bb0=_0x5a8ff0;if(!SceneManager[_0x229bb0(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ['ConvertParams'](_0xfcc4aa,_0xfcc4aa),VisuMZ[_0x229bb0(0xbb3)][_0x229bb0(0xb04)]();const _0x47e43c=$gameTemp[_0x229bb0(0x985)](),_0x135e9f=_0xfcc4aa[_0x229bb0(0x3a1)];if(!_0x47e43c)return;const _0x541f42=BattleManager['_spriteset'];if(!_0x541f42)return;_0x541f42[_0x229bb0(0x796)](_0xfcc4aa);if(_0x135e9f)_0x47e43c[_0x229bb0(0x66a)](_0x229bb0(0x182));}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_ChangeSkew',_0x112049=>{const _0x4d16b2=_0x5a8ff0;if(!SceneManager[_0x4d16b2(0x5c8)]())return;if(!Imported[_0x4d16b2(0x9f4)])return;VisuMZ[_0x4d16b2(0x288)](_0x112049,_0x112049);const _0x3d9468=$gameTemp['getLastPluginCommandInterpreter'](),_0x1aaa28=_0x112049[_0x4d16b2(0xf3)];if(!_0x3d9468)return;$gameScreen[_0x4d16b2(0xa4d)](_0x112049['SkewX'],_0x112049[_0x4d16b2(0x156)],_0x112049[_0x4d16b2(0x8a5)],_0x112049[_0x4d16b2(0xad3)]);if(_0x1aaa28)_0x3d9468[_0x4d16b2(0x66a)](_0x4d16b2(0x2b1));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x9ce),_0x926a59=>{const _0x419803=_0x5a8ff0;if(!SceneManager[_0x419803(0x5c8)]())return;if(!Imported[_0x419803(0x9f4)])return;VisuMZ[_0x419803(0x288)](_0x926a59,_0x926a59);const _0x3995d7=$gameTemp[_0x419803(0x985)](),_0x4955af=_0x926a59[_0x419803(0xf3)];if(!_0x3995d7)return;$gameScreen[_0x419803(0xa4d)](0x0,0x0,_0x926a59[_0x419803(0x8a5)],_0x926a59[_0x419803(0xad3)]);if(_0x4955af)_0x3995d7['setWaitMode'](_0x419803(0x2b1));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0xbe1),_0x27b666=>{const _0xda56a2=_0x5a8ff0;if(!SceneManager[_0xda56a2(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x2ac1c9=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2ac1c9)return;_0x2ac1c9[_0xda56a2(0x66a)](_0xda56a2(0x2b1));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x42c),_0x43134a=>{const _0x1c90a6=_0x5a8ff0;if(!SceneManager[_0x1c90a6(0x5c8)]())return;VisuMZ[_0x1c90a6(0x288)](_0x43134a,_0x43134a);const _0x41887f=$gameTemp[_0x1c90a6(0x985)](),_0x23d2f8=_0x43134a['Index'],_0x577f68=_0x43134a[_0x1c90a6(0x899)];if(!_0x41887f)return;BattleManager[_0x1c90a6(0x719)]=_0x23d2f8,BattleManager[_0x1c90a6(0x571)]=BattleManager['_allTargets']?BattleManager[_0x1c90a6(0x35b)][BattleManager[_0x1c90a6(0x719)]]||null:null;if(window['$target'])BattleManager[_0x1c90a6(0x852)]();BattleManager[_0x1c90a6(0x571)]&&_0x577f68[_0x1c90a6(0x692)]()[_0x1c90a6(0xb20)]()!==_0x1c90a6(0x274)&&_0x41887f[_0x1c90a6(0x434)]([_0x577f68]);}),PluginManager['registerCommand'](pluginData['name'],_0x5a8ff0(0x258),_0x5b1729=>{const _0x5c30d9=_0x5a8ff0;if(!SceneManager[_0x5c30d9(0x5c8)]())return;VisuMZ[_0x5c30d9(0x288)](_0x5b1729,_0x5b1729);const _0x159135=$gameTemp[_0x5c30d9(0x985)](),_0x4fb440=_0x5b1729[_0x5c30d9(0x899)];if(!_0x159135)return;BattleManager[_0x5c30d9(0x719)]++,BattleManager['_target']=BattleManager[_0x5c30d9(0x35b)][BattleManager[_0x5c30d9(0x719)]]||null;if(window['$target'])BattleManager['updateBattleVariables']();BattleManager[_0x5c30d9(0x571)]&&_0x4fb440[_0x5c30d9(0x692)]()[_0x5c30d9(0xb20)]()!=='UNTITLED'&&_0x159135[_0x5c30d9(0x434)]([_0x4fb440]);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x6e6),_0x174f40=>{const _0x57cb19=_0x5a8ff0;if(!SceneManager[_0x57cb19(0x5c8)]())return;VisuMZ['ConvertParams'](_0x174f40,_0x174f40);const _0x5623a3=$gameTemp[_0x57cb19(0x985)](),_0x104981=_0x174f40[_0x57cb19(0x899)];if(!_0x5623a3)return;BattleManager['_targetIndex']--,BattleManager[_0x57cb19(0x571)]=BattleManager['_allTargets'][BattleManager[_0x57cb19(0x719)]]||null;if(window[_0x57cb19(0x68b)])BattleManager[_0x57cb19(0x852)]();BattleManager[_0x57cb19(0x571)]&&_0x104981[_0x57cb19(0x692)]()[_0x57cb19(0xb20)]()!==_0x57cb19(0x274)&&_0x5623a3[_0x57cb19(0x434)]([_0x104981]);}),PluginManager['registerCommand'](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x4d4),_0x3b1af5=>{const _0x27f929=_0x5a8ff0;if(!SceneManager[_0x27f929(0x5c8)]())return;VisuMZ[_0x27f929(0x288)](_0x3b1af5,_0x3b1af5);const _0x47975a=$gameTemp[_0x27f929(0x985)](),_0x23ca1=_0x3b1af5['ForceRandom'],_0x153560=_0x3b1af5[_0x27f929(0x899)];if(!_0x47975a)return;const _0x47c235=BattleManager[_0x27f929(0x719)];for(;;){BattleManager[_0x27f929(0x719)]=Math[_0x27f929(0x8c8)](BattleManager[_0x27f929(0x35b)][_0x27f929(0x6b9)]);if(!_0x23ca1)break;if(BattleManager['_targetIndex']!==_0x47c235)break;if(BattleManager[_0x27f929(0x35b)][_0x27f929(0x6b9)]<=0x1){BattleManager[_0x27f929(0x719)]=0x0;break;}}BattleManager[_0x27f929(0x571)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null;if(window[_0x27f929(0x68b)])BattleManager[_0x27f929(0x852)]();BattleManager[_0x27f929(0x571)]&&_0x153560[_0x27f929(0x692)]()[_0x27f929(0xb20)]()!==_0x27f929(0x274)&&_0x47975a[_0x27f929(0x434)]([_0x153560]);}),PluginManager[_0x5a8ff0(0x51f)](pluginData['name'],_0x5a8ff0(0xa99),_0x30cd9a=>{const _0x3ab33a=_0x5a8ff0;if(!SceneManager[_0x3ab33a(0x5c8)]())return;if(!Imported[_0x3ab33a(0xa98)])return;if(!ConfigManager[_0x3ab33a(0x32d)])return;VisuMZ[_0x3ab33a(0x288)](_0x30cd9a,_0x30cd9a);const _0x457ba6=VisuMZ['CreateActionSequenceTargets'](_0x30cd9a[_0x3ab33a(0x885)]);let _0x4bbd91=_0x30cd9a[_0x3ab33a(0x28c)]||'';for(const _0x1d8f01 of _0x457ba6){if(!_0x1d8f01)continue;_0x1d8f01[_0x3ab33a(0x456)](_0x4bbd91);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x501),_0x1a3046=>{const _0x5b1f55=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b1f55(0xa98)])return;if(!ConfigManager[_0x5b1f55(0x32d)])return;VisuMZ[_0x5b1f55(0x288)](_0x1a3046,_0x1a3046);const _0x53320c=VisuMZ['CreateActionSequenceTargets'](_0x1a3046['Targets']);let _0x50cdbd=(_0x1a3046[_0x5b1f55(0x7f4)]||'')+(_0x1a3046[_0x5b1f55(0x2cb)]||'');for(const _0x3f01ed of _0x53320c){if(!_0x3f01ed)continue;_0x3f01ed['playBattleVoice'](_0x50cdbd);}}),PluginManager['registerCommand'](pluginData['name'],_0x5a8ff0(0x9f0),_0x29588d=>{const _0x3f6c25=_0x5a8ff0;if(!SceneManager[_0x3f6c25(0x5c8)]())return;VisuMZ[_0x3f6c25(0x288)](_0x29588d,_0x29588d);const _0x34c171=VisuMZ[_0x3f6c25(0x8e5)](_0x29588d[_0x3f6c25(0x885)]);for(const _0x2aaf74 of _0x34c171){if(!_0x2aaf74)continue;if(!_0x2aaf74['isActor']())continue;_0x2aaf74['clearActiveWeaponSlot']();}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Weapon_NextActiveWeapon',_0x2b38d9=>{const _0x222999=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x222999(0x288)](_0x2b38d9,_0x2b38d9);const _0xf977d2=$gameTemp[_0x222999(0x985)]();let _0x254cc2=![];const _0x2939b3=_0x2b38d9[_0x222999(0x899)],_0x474d8e=VisuMZ[_0x222999(0x8e5)](_0x2b38d9[_0x222999(0x885)]);for(const _0x28835f of _0x474d8e){if(!_0x28835f)continue;if(!_0x28835f[_0x222999(0x34b)]())continue;_0x28835f[_0x222999(0x50b)](),_0x28835f[_0x222999(0xb94)]()['length']>0x0?_0x254cc2=!![]:_0x28835f[_0x222999(0x21c)]();}_0x254cc2&&_0x2939b3[_0x222999(0x692)]()[_0x222999(0xb20)]()!=='UNTITLED'&&_0xf977d2[_0x222999(0x434)]([_0x2939b3]);}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x390),_0x1963b5=>{const _0x10d281=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x10d281(0x288)](_0x1963b5,_0x1963b5);let _0x27647c=_0x1963b5[_0x10d281(0x290)];_0x27647c--,_0x27647c=Math[_0x10d281(0x6dd)](_0x27647c,0x0);const _0xd9664b=VisuMZ[_0x10d281(0x8e5)](_0x1963b5[_0x10d281(0x885)]);for(const _0x433dac of _0xd9664b){if(!_0x433dac)continue;if(!_0x433dac[_0x10d281(0x34b)]())continue;_0x433dac[_0x10d281(0x514)](_0x27647c);}}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x531),_0x48a413=>{const _0x4a9939=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4a9939(0x9f4)])return;VisuMZ[_0x4a9939(0x288)](_0x48a413,_0x48a413);const _0x59c967=$gameTemp[_0x4a9939(0x985)](),_0x3cb7de=_0x48a413[_0x4a9939(0x2e7)];if(!_0x59c967)return;$gameScreen[_0x4a9939(0x2ff)](_0x48a413[_0x4a9939(0xb1f)],_0x48a413[_0x4a9939(0x8a5)],_0x48a413['EasingType']);if(_0x3cb7de)_0x59c967[_0x4a9939(0x66a)](_0x4a9939(0x73a));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],'ActSeq_Zoom_Reset',_0x447356=>{const _0x53e578=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x53e578(0x9f4)])return;VisuMZ['ConvertParams'](_0x447356,_0x447356);const _0x470058=$gameTemp[_0x53e578(0x985)](),_0x4f858c=_0x447356[_0x53e578(0x2e7)];if(!_0x470058)return;$gameScreen['setBattleZoom'](0x1,_0x447356[_0x53e578(0x8a5)],_0x447356[_0x53e578(0xad3)]);if(_0x4f858c)_0x470058[_0x53e578(0x66a)](_0x53e578(0x73a));}),PluginManager[_0x5a8ff0(0x51f)](pluginData[_0x5a8ff0(0xa4b)],_0x5a8ff0(0x311),_0x550105=>{const _0x108ac7=_0x5a8ff0;if(!SceneManager[_0x108ac7(0x5c8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x36244b=$gameTemp[_0x108ac7(0x985)]();if(!_0x36244b)return;_0x36244b[_0x108ac7(0x66a)](_0x108ac7(0x73a));}),VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x5d6)]=Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x197)],Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x197)]=function(){const _0x380bf4=_0x5a8ff0;this[_0x380bf4(0xa11)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x380bf4(0x7db)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x380bf4(0xbb3)][_0x380bf4(0x5d6)][_0x380bf4(0x31b)](this),this['process_VisuMZ_BattleCore_Notetags'](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x380bf4(0x6a7)](),this[_0x380bf4(0x4c7)]();},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb6f)]=function(){const _0x232ff2=_0x5a8ff0;if(VisuMZ['ParseAllNotetags'])return;this[_0x232ff2(0x522)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x232ff2(0x513)]();},Scene_Boot['prototype'][_0x5a8ff0(0xa11)]=function(){const _0x480800=_0x5a8ff0,_0x3002dc=$dataSystem[_0x480800(0xb54)][_0x480800(0x6b9)];for(let _0x1d8ac0=0x0;_0x1d8ac0<_0x3002dc;_0x1d8ac0++){const _0x110d1d=$dataSystem[_0x480800(0x631)][_0x1d8ac0];if(_0x110d1d)continue;$dataSystem[_0x480800(0x631)][_0x1d8ac0]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x23a)]=function(){const _0x590a5d=_0x5a8ff0,_0x12c93c=VisuMZ[_0x590a5d(0xbb3)][_0x590a5d(0xba1)];_0x12c93c[_0x590a5d(0x8c7)]['PopupPosition']===undefined&&(_0x12c93c[_0x590a5d(0x8c7)][_0x590a5d(0xfa)]=_0x590a5d(0x670)),_0x12c93c['Actor'][_0x590a5d(0x3f6)]===undefined&&(_0x12c93c[_0x590a5d(0x1ba)]['SmoothImage']=![]),_0x12c93c[_0x590a5d(0x85b)][_0x590a5d(0x3f6)]===undefined&&(_0x12c93c[_0x590a5d(0x85b)][_0x590a5d(0x3f6)]=!![]),_0x12c93c[_0x590a5d(0x1ba)][_0x590a5d(0x733)]===undefined&&(_0x12c93c[_0x590a5d(0x1ba)][_0x590a5d(0x733)]=![]),_0x12c93c['Actor'][_0x590a5d(0x490)]===undefined&&(_0x12c93c[_0x590a5d(0x1ba)][_0x590a5d(0x490)]=!![]);},VisuMZ[_0x5a8ff0(0xaf6)]={},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7db)]=function(){const _0x732022=_0x5a8ff0;for(const _0x25122b of VisuMZ[_0x732022(0xbb3)][_0x732022(0xba1)][_0x732022(0x8c7)]['DamageStyleList']){if(!_0x25122b)continue;const _0x3f6792=_0x25122b[_0x732022(0x3ed)][_0x732022(0x692)]()[_0x732022(0xb20)]();VisuMZ[_0x732022(0xaf6)][_0x3f6792]=_0x25122b;}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x318)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5dd)]=function(){const _0x161464=_0x5a8ff0,_0x2cd9c5=VisuMZ[_0x161464(0xbb3)][_0x161464(0x318)],_0x532848=_0x161464(0x298),_0x494045=[[_0x161464(0x4cc),_0x161464(0x371)],[_0x161464(0x4b2),_0x161464(0x717)]],_0x306516=[[_0x161464(0x74a),_0x161464(0x38f)],[_0x161464(0x8ed),_0x161464(0x41f)]],_0x4f89f8=[['',''],['AsUser','AS\x20USER'],[_0x161464(0xbcd),_0x161464(0x2f4)]];for(const _0x46284a of _0x306516){for(const _0x25527c of _0x4f89f8){for(const _0x39b564 of _0x494045){const _0x5e7156=_0x46284a[0x0][_0x161464(0x907)](_0x39b564[0x0],_0x25527c[0x0]),_0x45722=_0x46284a[0x1][_0x161464(0x907)](_0x39b564[0x1],_0x25527c[0x1])[_0x161464(0xb20)](),_0xad6971=new RegExp(_0x532848[_0x161464(0x907)](_0x45722),'i');_0x2cd9c5[_0x5e7156]=_0xad6971;}}}const _0x48c2be=[['%1StartActionJS',_0x161464(0x902)],['%1EndActionJS','JS\x20%1END\x20ACTION']];for(const _0x252926 of _0x48c2be){for(const _0x721d8c of _0x494045){const _0x50b991=_0x252926[0x0]['format'](_0x721d8c[0x0]),_0x319af0=_0x252926[0x1][_0x161464(0x907)](_0x721d8c[0x1]),_0x4f9d34=new RegExp(_0x532848[_0x161464(0x907)](_0x319af0),'i');_0x2cd9c5[_0x50b991]=_0x4f9d34;}}const _0xe85660=[[_0x161464(0x455),_0x161464(0x82a)],[_0x161464(0x9be),'JS\x20%1END\x20BATTLE'],[_0x161464(0x8a8),_0x161464(0xc03)],[_0x161464(0x94c),_0x161464(0x54f)],[_0x161464(0x90f),'JS\x20ESCAPE\x20SUCCESS'],['EscapeFailureJS',_0x161464(0xbf8)],[_0x161464(0x532),_0x161464(0x831)],['%1EndTurnJS',_0x161464(0x746)],['%1RegenerateJS',_0x161464(0x819)]];for(const _0x2a14f3 of _0xe85660){for(const _0x3f1de5 of _0x494045){const _0x1def6d=_0x2a14f3[0x0][_0x161464(0x907)](_0x3f1de5[0x0]),_0x1a05ff=_0x2a14f3[0x1][_0x161464(0x907)](_0x3f1de5[0x1]),_0x4511c2=new RegExp(_0x532848[_0x161464(0x907)](_0x1a05ff),'i');_0x2cd9c5[_0x1def6d]=_0x4511c2;}}},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x522)]=function(){const _0x395d32=_0x5a8ff0,_0x107d1c=$dataSkills[_0x395d32(0xb5d)]($dataItems);for(const _0x9d2182 of _0x107d1c){if(!_0x9d2182)continue;VisuMZ[_0x395d32(0xbb3)]['Parse_Notetags_Action'](_0x9d2182);}},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa00)]=function(){const _0x53c3dd=_0x5a8ff0,_0x2a3fe6=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0xb31a8b of _0x2a3fe6){if(!_0xb31a8b)continue;VisuMZ[_0x53c3dd(0xbb3)][_0x53c3dd(0xbff)](_0xb31a8b),_0xb31a8b[_0x53c3dd(0x8ad)]!==undefined&&VisuMZ[_0x53c3dd(0xbb3)][_0x53c3dd(0x574)](_0xb31a8b);}},Scene_Boot[_0x5a8ff0(0xb6e)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x1d15e4=_0x5a8ff0,_0x44c388=VisuMZ[_0x1d15e4(0xbb3)][_0x1d15e4(0xba1)]['Mechanics'][_0x1d15e4(0x549)],_0x4786e6=[];for(const _0x30c3b7 of _0x44c388){const _0x10df6e=$dataTroops[_0x30c3b7];if(_0x10df6e)_0x4786e6[_0x1d15e4(0x23b)](JsonEx[_0x1d15e4(0x78e)](_0x10df6e));}for(const _0x5c74ca of $dataTroops){if(!_0x5c74ca)continue;for(const _0x2f2b84 of _0x4786e6){if(_0x2f2b84['id']===_0x5c74ca['id'])continue;_0x5c74ca['pages']=_0x5c74ca[_0x1d15e4(0x24d)][_0x1d15e4(0xb5d)](_0x2f2b84['pages']);}}},Scene_Boot['prototype'][_0x5a8ff0(0x6a7)]=function(){const _0x3be311=_0x5a8ff0,_0xf763b4=VisuMZ[_0x3be311(0xbb3)]['Settings'][_0x3be311(0x2dc)];if(_0xf763b4[_0x3be311(0x3b1)]>0x0&&$dataCommonEvents[_0xf763b4[_0x3be311(0x3b1)]]){const _0x3dd3e5=$dataCommonEvents[_0xf763b4[_0x3be311(0x3b1)]],_0xf6dd12=_0x3dd3e5[_0x3be311(0x1e1)][_0x3be311(0x6b9)]-0x2,_0x3254c0=_0x3dd3e5['list'][_0xf6dd12];if(_0x3254c0&&_0x3254c0[_0x3be311(0xa07)]!==0xe6){const _0x5d02e6={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x2e78c3=_0x3dd3e5['list'][_0x3be311(0xa14)]();_0x3dd3e5[_0x3be311(0x1e1)]['unshift'](_0x5d02e6),_0x3dd3e5[_0x3be311(0x1e1)]['unshift'](_0x2e78c3);}}},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4c7)]=function(){const _0x176f7e=_0x5a8ff0;VisuMZ['BattleCore'][_0x176f7e(0x71b)](),VisuMZ[_0x176f7e(0xbb3)][_0x176f7e(0x9f3)]($dataSkills),VisuMZ[_0x176f7e(0xbb3)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ['BattleCore'][_0x5a8ff0(0x71b)]=function(){const _0x3d08bc=_0x5a8ff0;VisuMZ['BattleCore']['_commonEventKey']={};for(const _0x226e35 of $dataCommonEvents){if(!_0x226e35)continue;if(_0x226e35[_0x3d08bc(0xa4b)][_0x3d08bc(0x6d8)](/\[(.*)\]/i)){let _0x32d0b3=String(RegExp['$1'])[_0x3d08bc(0xa45)](/,/g,'')[_0x3d08bc(0x692)]()[_0x3d08bc(0xb20)]();VisuMZ[_0x3d08bc(0xbb3)]['_commonEventKey'][_0x32d0b3]=_0x226e35['id'];}}},VisuMZ[_0x5a8ff0(0xbb3)]['BindCommonEventKeysForGroup']=function(_0x2ba04a){const _0x2a21fd=_0x5a8ff0;for(const _0x1b3ee0 of _0x2ba04a){if(!_0x1b3ee0)continue;VisuMZ[_0x2a21fd(0xbb3)][_0x2a21fd(0x6e9)](_0x1b3ee0);}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6e9)]=function(_0x5a5a06){const _0xd7811e=_0x5a8ff0;if(!_0x5a5a06)return;if(!_0x5a5a06[_0xd7811e(0x71a)])return;VisuMZ[_0xd7811e(0xbb3)][_0xd7811e(0x72d)]=VisuMZ['BattleCore'][_0xd7811e(0x72d)]||{};const _0x31579e=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x1845df=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x27f672=[];const _0x37dc3a=_0x5a5a06[_0xd7811e(0x494)][_0xd7811e(0x6d8)](_0x31579e);if(_0x37dc3a){for(const _0x2e4be6 of _0x37dc3a){_0x2e4be6[_0xd7811e(0x6d8)](_0x31579e);const _0x7e3e6=String(RegExp['$1'])[_0xd7811e(0x194)](',')[_0xd7811e(0x5d7)](_0x41befd=>String(_0x41befd)[_0xd7811e(0x692)]()[_0xd7811e(0xb20)]());_0x27f672=_0x27f672['concat'](_0x7e3e6);}!_0x5a5a06[_0xd7811e(0x494)][_0xd7811e(0x6d8)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5a5a06[_0xd7811e(0x494)]+=_0xd7811e(0x410));;}if(_0x5a5a06[_0xd7811e(0x494)][_0xd7811e(0x6d8)](_0x1845df)){const _0x2936e9=String(RegExp['$1'])[_0xd7811e(0x194)](/[\r\n]+/)[_0xd7811e(0x5d7)](_0x3939b5=>String(_0x3939b5)[_0xd7811e(0x692)]()['trim']());_0x27f672=_0x27f672[_0xd7811e(0xb5d)](_0x2936e9);!_0x5a5a06[_0xd7811e(0x494)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5a5a06['note']+=_0xd7811e(0x410));;}for(const _0x17a319 of _0x27f672){if(VisuMZ[_0xd7811e(0xbb3)]['_commonEventKey'][_0x17a319]){const _0x297dde=VisuMZ[_0xd7811e(0xbb3)][_0xd7811e(0x72d)][_0x17a319],_0x216934={'code':0x2c,'dataId':_0x297dde,'value1':0x1,'value2':0x0};_0x5a5a06[_0xd7811e(0x71a)]['push'](_0x216934);}}},Scene_Boot[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x513)]=function(){const _0xf58ad1=_0x5a8ff0,_0x3fd05b=$dataSkills[_0xf58ad1(0xb5d)]($dataItems);for(const _0x359032 of _0x3fd05b){if(!_0x359032)continue;VisuMZ[_0xf58ad1(0xbb3)][_0xf58ad1(0x5e8)](_0x359032);}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x39c)]=VisuMZ[_0x5a8ff0(0x39c)],VisuMZ[_0x5a8ff0(0x39c)]=function(_0x39fe04){const _0x35bc50=_0x5a8ff0;VisuMZ['BattleCore'][_0x35bc50(0x39c)]&&VisuMZ[_0x35bc50(0xbb3)]['ParseActorNotetags']['call'](this,_0x39fe04),VisuMZ[_0x35bc50(0xbb3)]['Parse_Notetags_TraitObjects'](_0x39fe04);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x1f6)]=VisuMZ['ParseClassNotetags'],VisuMZ[_0x5a8ff0(0x1f6)]=function(_0x338297){const _0x1503e0=_0x5a8ff0;VisuMZ['BattleCore'][_0x1503e0(0x1f6)]&&VisuMZ[_0x1503e0(0xbb3)][_0x1503e0(0x1f6)][_0x1503e0(0x31b)](this,_0x338297),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x338297);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb85)]=VisuMZ[_0x5a8ff0(0xb85)],VisuMZ[_0x5a8ff0(0xb85)]=function(_0x2bdee5){const _0xbec307=_0x5a8ff0;VisuMZ[_0xbec307(0xbb3)][_0xbec307(0xb85)]&&VisuMZ[_0xbec307(0xbb3)][_0xbec307(0xb85)][_0xbec307(0x31b)](this,_0x2bdee5),VisuMZ['BattleCore'][_0xbec307(0xb6a)](_0x2bdee5),VisuMZ[_0xbec307(0xbb3)]['Parse_Notetags_Targets'](_0x2bdee5);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x145)]=VisuMZ[_0x5a8ff0(0x145)],VisuMZ[_0x5a8ff0(0x145)]=function(_0x175ff8){const _0x2f9c26=_0x5a8ff0;VisuMZ[_0x2f9c26(0xbb3)][_0x2f9c26(0x145)]&&VisuMZ[_0x2f9c26(0xbb3)]['ParseItemNotetags'][_0x2f9c26(0x31b)](this,_0x175ff8),VisuMZ[_0x2f9c26(0xbb3)][_0x2f9c26(0xb6a)](_0x175ff8),VisuMZ[_0x2f9c26(0xbb3)][_0x2f9c26(0x5e8)](_0x175ff8);},VisuMZ['BattleCore'][_0x5a8ff0(0x6a0)]=VisuMZ[_0x5a8ff0(0x6a0)],VisuMZ[_0x5a8ff0(0x6a0)]=function(_0x8677c6){const _0x99202b=_0x5a8ff0;VisuMZ[_0x99202b(0xbb3)][_0x99202b(0x6a0)]&&VisuMZ[_0x99202b(0xbb3)][_0x99202b(0x6a0)][_0x99202b(0x31b)](this,_0x8677c6),VisuMZ[_0x99202b(0xbb3)][_0x99202b(0xbff)](_0x8677c6);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x4d7)]=VisuMZ[_0x5a8ff0(0x4d7)],VisuMZ[_0x5a8ff0(0x4d7)]=function(_0x20fd5b){const _0x588e2c=_0x5a8ff0;VisuMZ['BattleCore'][_0x588e2c(0x4d7)]&&VisuMZ[_0x588e2c(0xbb3)][_0x588e2c(0x4d7)]['call'](this,_0x20fd5b),VisuMZ[_0x588e2c(0xbb3)][_0x588e2c(0xbff)](_0x20fd5b);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x8f9)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x5a8ff0(0x8f9)]=function(_0x51a2f2){const _0x30ed43=_0x5a8ff0;VisuMZ['BattleCore'][_0x30ed43(0x8f9)]&&VisuMZ['BattleCore']['ParseEnemyNotetags']['call'](this,_0x51a2f2),VisuMZ['BattleCore'][_0x30ed43(0xbff)](_0x51a2f2);},VisuMZ[_0x5a8ff0(0xbb3)]['ParseStateNotetags']=VisuMZ[_0x5a8ff0(0xb71)],VisuMZ[_0x5a8ff0(0xb71)]=function(_0x3cf787){const _0x30045d=_0x5a8ff0;VisuMZ[_0x30045d(0xbb3)][_0x30045d(0xb71)]&&VisuMZ[_0x30045d(0xbb3)][_0x30045d(0xb71)]['call'](this,_0x3cf787),VisuMZ[_0x30045d(0xbb3)][_0x30045d(0xbff)](_0x3cf787),VisuMZ[_0x30045d(0xbb3)][_0x30045d(0x574)](_0x3cf787);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb6a)]=function(_0x5540a5){const _0x33840c=_0x5a8ff0,_0xb7cbb0=[_0x33840c(0x601),_0x33840c(0x8b6),_0x33840c(0x78c),_0x33840c(0x8d0),_0x33840c(0x3eb),'PostStartActionJS','PreEndActionJS',_0x33840c(0x67c)];for(const _0x4308a1 of _0xb7cbb0){VisuMZ['BattleCore'][_0x33840c(0x569)](_0x5540a5,_0x4308a1);}const _0x752228=_0x5540a5[_0x33840c(0x494)];_0x752228[_0x33840c(0x6d8)](/<ALWAYS CRITICAL/i)&&(_0x5540a5[_0x33840c(0x66e)][_0x33840c(0x4ab)]=!![]),_0x752228['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x5540a5['repeats']=Math['max'](0x1,Number(RegExp['$1']))),_0x752228['match'](/<TARGET:[ ](.*)>/i)&&(_0x5540a5[_0x33840c(0x9e4)]=String(RegExp['$1'])[_0x33840c(0x692)]()['trim']());},VisuMZ['BattleCore'][_0x5a8ff0(0xbff)]=function(_0x1e7e0d){const _0x273329=_0x5a8ff0,_0xfaa0a1=[_0x273329(0xb16),_0x273329(0x78d),'PreDamageAsUserJS',_0x273329(0x3be),_0x273329(0xbd6),'PostApplyAsTargetJS',_0x273329(0x930),'PostDamageAsTargetJS','PreStartActionJS','PostStartActionJS',_0x273329(0xaa7),_0x273329(0x67c),_0x273329(0xc01),'PostStartBattleJS',_0x273329(0x26c),_0x273329(0xacf),_0x273329(0x8a8),_0x273329(0x94c),_0x273329(0x90f),_0x273329(0x2f8),_0x273329(0x74f),_0x273329(0x463),_0x273329(0xba5),_0x273329(0x12e),'PreRegenerateJS',_0x273329(0x81f)];for(const _0x1e45e6 of _0xfaa0a1){VisuMZ[_0x273329(0xbb3)]['createJS'](_0x1e7e0d,_0x1e45e6);}const _0x3ba0b8=['jsAccuracy',_0x273329(0x8b9),'jsAccuracyAsTarget',_0x273329(0x2af),_0x273329(0x5e9)];for(const _0xd2054e of _0x3ba0b8){VisuMZ[_0x273329(0xbb3)][_0x273329(0x841)](_0x1e7e0d,_0xd2054e);}},VisuMZ['BattleCore'][_0x5a8ff0(0x5e8)]=function(_0x1f6bb1){const _0x36bda8=_0x5a8ff0,_0x22d39b=_0x1f6bb1[_0x36bda8(0x494)];if(_0x22d39b[_0x36bda8(0x6d8)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2f33bb=String(RegExp['$1']),_0x261a9b=VisuMZ[_0x36bda8(0xbb3)][_0x36bda8(0x5f9)](_0x1f6bb1,_0x36bda8(0x885));VisuMZ[_0x36bda8(0xbb3)][_0x36bda8(0x9c0)](_0x2f33bb,_0x261a9b);}if(_0x22d39b['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x3b3dfa=String(RegExp['$1']),_0x337dfc=VisuMZ[_0x36bda8(0xbb3)][_0x36bda8(0x5f9)](_0x1f6bb1,_0x36bda8(0x2a4));VisuMZ[_0x36bda8(0xbb3)][_0x36bda8(0xadb)](_0x3b3dfa,_0x337dfc);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x569)]=function(_0x467a08,_0x36cdad){const _0x2d99a4=_0x5a8ff0,_0x30d1f6=_0x467a08[_0x2d99a4(0x494)];if(_0x30d1f6['match'](VisuMZ[_0x2d99a4(0xbb3)][_0x2d99a4(0x318)][_0x36cdad])){const _0x2758ac=RegExp['$1'],_0x4befd3=_0x2d99a4(0xbd1)['format'](_0x2758ac),_0x3b1b35=VisuMZ['BattleCore'][_0x2d99a4(0x5f9)](_0x467a08,_0x36cdad);VisuMZ[_0x2d99a4(0xbb3)]['JS'][_0x3b1b35]=new Function(_0x4befd3);}},VisuMZ['BattleCore'][_0x5a8ff0(0x5f9)]=function(_0x56935c,_0xf228fe){const _0x16b2de=_0x5a8ff0;if(VisuMZ[_0x16b2de(0x5f9)])return VisuMZ[_0x16b2de(0x5f9)](_0x56935c,_0xf228fe);let _0x36599e='';if($dataActors[_0x16b2de(0x597)](_0x56935c))_0x36599e=_0x16b2de(0x93d)['format'](_0x56935c['id'],_0xf228fe);if($dataClasses[_0x16b2de(0x597)](_0x56935c))_0x36599e=_0x16b2de(0x5fe)['format'](_0x56935c['id'],_0xf228fe);if($dataSkills[_0x16b2de(0x597)](_0x56935c))_0x36599e=_0x16b2de(0x76f)[_0x16b2de(0x907)](_0x56935c['id'],_0xf228fe);if($dataItems[_0x16b2de(0x597)](_0x56935c))_0x36599e='Item-%1-%2'[_0x16b2de(0x907)](_0x56935c['id'],_0xf228fe);if($dataWeapons[_0x16b2de(0x597)](_0x56935c))_0x36599e=_0x16b2de(0x8d7)[_0x16b2de(0x907)](_0x56935c['id'],_0xf228fe);if($dataArmors[_0x16b2de(0x597)](_0x56935c))_0x36599e=_0x16b2de(0x2e4)[_0x16b2de(0x907)](_0x56935c['id'],_0xf228fe);if($dataEnemies[_0x16b2de(0x597)](_0x56935c))_0x36599e=_0x16b2de(0x16a)['format'](_0x56935c['id'],_0xf228fe);if($dataStates[_0x16b2de(0x597)](_0x56935c))_0x36599e='State-%1-%2'[_0x16b2de(0x907)](_0x56935c['id'],_0xf228fe);return _0x36599e;},VisuMZ['BattleCore'][_0x5a8ff0(0x9c0)]=function(_0x9081f2,_0x1433b7){const _0x22d518=_0x5a8ff0,_0x25e3d3=_0x22d518(0x4ff)[_0x22d518(0x907)](_0x9081f2);VisuMZ[_0x22d518(0xbb3)]['JS'][_0x1433b7]=new Function(_0x25e3d3);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xadb)]=function(_0x349ccc,_0x1df87c){const _0x1a1e4c=_0x5a8ff0,_0x10d52a=_0x1a1e4c(0xbe5)[_0x1a1e4c(0x907)](_0x349ccc);VisuMZ[_0x1a1e4c(0xbb3)]['JS'][_0x1df87c]=new Function(_0x10d52a);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x841)]=function(_0x7f4b2f,_0x3923e7){const _0x1c6889=_0x5a8ff0,_0x28d974=_0x7f4b2f[_0x1c6889(0x494)];if(_0x28d974[_0x1c6889(0x6d8)](VisuMZ[_0x1c6889(0xbb3)][_0x1c6889(0x318)][_0x3923e7])){const _0x24ebdc=RegExp['$1'],_0x5a46a5=_0x1c6889(0x241)[_0x1c6889(0x907)](_0x24ebdc),_0x45b330=VisuMZ[_0x1c6889(0xbb3)][_0x1c6889(0x5f9)](_0x7f4b2f,_0x3923e7);VisuMZ['BattleCore']['JS'][_0x45b330]=new Function(_0x5a46a5);}},VisuMZ['BattleCore']['Parse_Notetags_HelpDescription']=function(_0x36fd4b){const _0x5452d3=_0x5a8ff0;_0x36fd4b['description']='-';const _0x548a8d=_0x36fd4b[_0x5452d3(0x494)];_0x548a8d['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x36fd4b[_0x5452d3(0x8fb)]=String(RegExp['$1'])[_0x5452d3(0xb20)]()),_0x548a8d[_0x5452d3(0x6d8)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x36fd4b['statusDescription']=String(RegExp['$1'])[_0x5452d3(0xb20)]()),_0x548a8d['match'](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x36fd4b['excludeListing']=!![]);},TextManager[_0x5a8ff0(0xa73)]=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x3fe)][_0x5a8ff0(0x135)],TextManager['autoBattleStart']=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)]['AutoBattle'][_0x5a8ff0(0x8ec)],TextManager[_0x5a8ff0(0x5f5)]=VisuMZ[_0x5a8ff0(0xbb3)]['Settings']['AutoBattle'][_0x5a8ff0(0xa5f)],TextManager[_0x5a8ff0(0x7dd)]=VisuMZ['BattleCore'][_0x5a8ff0(0xba1)]['HpGauge'][_0x5a8ff0(0x3ed)],ColorManager[_0x5a8ff0(0x3ba)]=function(_0x4bc031){const _0x14b03b=_0x5a8ff0;return _0x4bc031=String(_0x4bc031),_0x4bc031[_0x14b03b(0x6d8)](/#(.*)/i)?_0x14b03b(0x551)['format'](String(RegExp['$1'])):this[_0x14b03b(0x932)](Number(_0x4bc031));},DataManager[_0x5a8ff0(0xc20)]=function(_0x4bd268){const _0x3c67c2=_0x5a8ff0;if(_0x4bd268['note'][_0x3c67c2(0x6d8)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x461061=String(RegExp['$1'])[_0x3c67c2(0x692)]()['trim']();if(_0x461061===_0x3c67c2(0x933))return _0x3c67c2(0x933);if(VisuMZ[_0x3c67c2(0xaf6)][_0x461061])return _0x461061;}const _0x2c08b3=VisuMZ[_0x3c67c2(0xbb3)][_0x3c67c2(0xba1)][_0x3c67c2(0x8c7)]['DefaultDamageStyle']['toUpperCase']()[_0x3c67c2(0xb20)]();if(VisuMZ[_0x3c67c2(0xaf6)][_0x2c08b3])return _0x2c08b3;return _0x3c67c2(0x933);},DataManager[_0x5a8ff0(0x1b7)]=function(_0x2f333a){const _0x297754=_0x5a8ff0;_0x2f333a=_0x2f333a['toUpperCase']()[_0x297754(0xb20)](),this[_0x297754(0xc02)]=this[_0x297754(0xc02)]||{};if(this[_0x297754(0xc02)][_0x2f333a])return this[_0x297754(0xc02)][_0x2f333a];for(let _0x168c83=0x1;_0x168c83<0x64;_0x168c83++){if(!$dataSystem[_0x297754(0xad0)][_0x168c83])continue;let _0x4f494b=$dataSystem[_0x297754(0xad0)][_0x168c83][_0x297754(0x692)]()[_0x297754(0xb20)]();_0x4f494b=_0x4f494b['replace'](/\x1I\[(\d+)\]/gi,''),_0x4f494b=_0x4f494b[_0x297754(0xa45)](/\\I\[(\d+)\]/gi,''),this[_0x297754(0xc02)][_0x4f494b]=_0x168c83;}return this['_stypeIDs'][_0x2f333a]||0x0;},DataManager['getSkillIdWithName']=function(_0x19ee22){const _0x2f1046=_0x5a8ff0;_0x19ee22=_0x19ee22['toUpperCase']()['trim'](),this[_0x2f1046(0x5f6)]=this[_0x2f1046(0x5f6)]||{};if(this[_0x2f1046(0x5f6)][_0x19ee22])return this['_skillIDs'][_0x19ee22];for(const _0x32de02 of $dataSkills){if(!_0x32de02)continue;this[_0x2f1046(0x5f6)][_0x32de02[_0x2f1046(0xa4b)][_0x2f1046(0x692)]()[_0x2f1046(0xb20)]()]=_0x32de02['id'];}return this[_0x2f1046(0x5f6)][_0x19ee22]||0x0;},DataManager[_0x5a8ff0(0xadc)]=function(_0x242586){const _0x40dbdd=_0x5a8ff0;_0x242586=_0x242586[_0x40dbdd(0x692)]()[_0x40dbdd(0xb20)](),this[_0x40dbdd(0x176)]=this[_0x40dbdd(0x176)]||{};if(this[_0x40dbdd(0x176)][_0x242586])return this[_0x40dbdd(0x176)][_0x242586];for(const _0x4c3c81 of $dataEnemies){if(!_0x4c3c81)continue;this[_0x40dbdd(0x176)][_0x4c3c81[_0x40dbdd(0xa4b)][_0x40dbdd(0x692)]()[_0x40dbdd(0xb20)]()]=_0x4c3c81['id'];}return this[_0x40dbdd(0x176)][_0x242586]||0x0;},DataManager[_0x5a8ff0(0x7d4)]=function(_0x1df4d0){const _0x3bc8f2=_0x5a8ff0;_0x1df4d0=_0x1df4d0['toUpperCase']()['trim'](),this['_wtypeIDs']=this[_0x3bc8f2(0x227)]||{};if(this['_wtypeIDs'][_0x1df4d0])return this[_0x3bc8f2(0x227)][_0x1df4d0];for(let _0x15a190=0x1;_0x15a190<0x64;_0x15a190++){if(!$dataSystem[_0x3bc8f2(0xb54)][_0x15a190])continue;let _0x58dca8=$dataSystem[_0x3bc8f2(0xb54)][_0x15a190][_0x3bc8f2(0x692)]()[_0x3bc8f2(0xb20)]();_0x58dca8=_0x58dca8[_0x3bc8f2(0xa45)](/\x1I\[(\d+)\]/gi,''),_0x58dca8=_0x58dca8[_0x3bc8f2(0xa45)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x58dca8]=_0x15a190;}return this[_0x3bc8f2(0x227)][_0x3bc8f2(0x12d)]=0x0,this[_0x3bc8f2(0x227)][_0x1df4d0]||0x0;},DataManager[_0x5a8ff0(0x866)]=function(_0x4a1453){const _0x67a3d5=_0x5a8ff0,_0x1fad13=_0x67a3d5(0xbe7);let _0x4b5818=_0x4a1453[_0x67a3d5(0xbc3)],_0x9f15d6=_0x4a1453['name'];const _0x3b6833=_0x4a1453['note'];return _0x3b6833[_0x67a3d5(0x6d8)](/<DISPLAY ICON: (\d+)>/i)&&(_0x4b5818=Number(RegExp['$1'])),_0x3b6833[_0x67a3d5(0x6d8)](/<DISPLAY TEXT: (.*)>/i)&&(_0x9f15d6=String(RegExp['$1'])),_0x1fad13[_0x67a3d5(0x907)](_0x4b5818,_0x9f15d6);},DataManager[_0x5a8ff0(0x829)]=function(_0x362427){const _0x48b765=_0x5a8ff0;return _0x362427[_0x48b765(0x494)][_0x48b765(0x6d8)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x362427[_0x48b765(0xa4b)];},DataManager[_0x5a8ff0(0x4d5)]=function(_0x189e4b){const _0x275aa6=_0x5a8ff0;return _0x189e4b[_0x275aa6(0x494)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x189e4b['iconIndex'];},DataManager[_0x5a8ff0(0x5f2)]=function(_0x542b04){const _0x2f508d=_0x5a8ff0,_0x4bf7a2=$dataEnemies[_0x542b04];if(_0x4bf7a2){if(_0x4bf7a2[_0x2f508d(0x494)][_0x2f508d(0x6d8)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x432145=String(RegExp['$1'])[_0x2f508d(0x194)](/[\r\n]+/)[_0x2f508d(0xc1d)](''),_0x5602a5=this['processRandomizedData'](_0x432145);_0x542b04=this[_0x2f508d(0xadc)](_0x5602a5)||_0x542b04,_0x542b04=DataManager[_0x2f508d(0x5f2)](_0x542b04);}}return _0x542b04;},DataManager['processRandomizedData']=function(_0x564097){const _0x48820a=_0x5a8ff0;let _0x4c6da6=0x0;const _0x228d9e={};for(const _0x57a983 of _0x564097){if(_0x57a983[_0x48820a(0x6d8)](/(.*):[ ](\d+)/i)){const _0x8db8b8=String(RegExp['$1'])[_0x48820a(0xb20)](),_0x38d917=Number(RegExp['$2']);_0x228d9e[_0x8db8b8]=_0x38d917,_0x4c6da6+=_0x38d917;}else{if(_0x57a983[_0x48820a(0x6d8)](/(.*):[ ](\d+\.?\d+)/i)){const _0x1869df=String(RegExp['$1'])[_0x48820a(0xb20)](),_0x2efe7e=Number(RegExp['$2']);_0x228d9e[_0x1869df]=_0x2efe7e,_0x4c6da6+=_0x2efe7e;}else _0x57a983!==''&&(_0x228d9e[_0x57a983]=0x1,_0x4c6da6++);}}if(_0x4c6da6<=0x0)return'';let _0x1aafbc=Math[_0x48820a(0x539)]()*_0x4c6da6;for(const _0x53479d in _0x228d9e){_0x1aafbc-=_0x228d9e[_0x53479d];if(_0x1aafbc<=0x0)return _0x53479d;}return'';},DataManager[_0x5a8ff0(0x50a)]=function(_0x12c934){const _0x5d2097=_0x5a8ff0;if(!_0x12c934)return![];if(!VisuMZ['BattleCore'][_0x5d2097(0xba1)][_0x5d2097(0x828)][_0x5d2097(0xa34)])return![];if(_0x12c934['note'][_0x5d2097(0x6d8)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x12c934[_0x5d2097(0x494)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x1f12af of _0x12c934[_0x5d2097(0x71a)]){if(!_0x1f12af)continue;if(_0x1f12af[_0x5d2097(0xa07)]===Game_Action[_0x5d2097(0x293)])return!![];}return![];},DataManager['createTroopNote']=function(_0x3163ed){const _0x269d5d=_0x5a8ff0,_0x4c66d7=$dataTroops[_0x3163ed];if(!_0x4c66d7)return'';let _0x39d8f3='';_0x39d8f3+=_0x4c66d7[_0x269d5d(0xa4b)];for(const _0x28a328 of _0x4c66d7[_0x269d5d(0x24d)]){for(const _0x5117cc of _0x28a328[_0x269d5d(0x1e1)]){[0x6c,0x198][_0x269d5d(0x597)](_0x5117cc[_0x269d5d(0xa07)])&&(_0x39d8f3+='\x0a',_0x39d8f3+=_0x5117cc[_0x269d5d(0x936)][0x0]);}}return _0x39d8f3;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x5a8ff0(0x43c)]??![],ConfigManager[_0x5a8ff0(0x3e0)]=ConfigManager[_0x5a8ff0(0x3e0)]??![],ConfigManager[_0x5a8ff0(0x7dd)]=ConfigManager[_0x5a8ff0(0x7dd)]??!![],VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x7b0)]=ConfigManager['makeData'],ConfigManager[_0x5a8ff0(0x1a8)]=function(){const _0x43b58c=_0x5a8ff0,_0x345157=VisuMZ[_0x43b58c(0xbb3)]['ConfigManager_makeData']['call'](this);return _0x345157[_0x43b58c(0x43c)]=this[_0x43b58c(0x43c)],_0x345157[_0x43b58c(0x3e0)]=this['autoBattleUseSkills'],_0x345157[_0x43b58c(0x7dd)]=this[_0x43b58c(0x7dd)],_0x345157;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x2be)]=ConfigManager[_0x5a8ff0(0x10c)],ConfigManager['applyData']=function(_0x394c85){const _0x5c96ee=_0x5a8ff0;VisuMZ[_0x5c96ee(0xbb3)][_0x5c96ee(0x2be)][_0x5c96ee(0x31b)](this,_0x394c85),_0x5c96ee(0x43c)in _0x394c85?this[_0x5c96ee(0x43c)]=_0x394c85[_0x5c96ee(0x43c)]:this[_0x5c96ee(0x43c)]=![],'autoBattleUseSkills'in _0x394c85?this[_0x5c96ee(0x3e0)]=_0x394c85[_0x5c96ee(0x3e0)]:this['autoBattleUseSkills']=![],_0x5c96ee(0x7dd)in _0x394c85?this[_0x5c96ee(0x7dd)]=_0x394c85[_0x5c96ee(0x7dd)]:this[_0x5c96ee(0x7dd)]=!![];},ImageManager['svActorHorzCells']=ImageManager[_0x5a8ff0(0x887)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x5a8ff0(0x6f9)]||0x6,VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xabb)]=BattleManager[_0x5a8ff0(0x681)],BattleManager[_0x5a8ff0(0x681)]=function(_0x5d771c,_0x50d8f6,_0x29b21e){const _0x59c180=_0x5a8ff0;VisuMZ[_0x59c180(0xbb3)][_0x59c180(0xabb)][_0x59c180(0x31b)](this,_0x5d771c,_0x50d8f6,_0x29b21e),this[_0x59c180(0x38c)]={};},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa70)]=BattleManager['initMembers'],BattleManager[_0x5a8ff0(0x3cc)]=function(){const _0x20fe19=_0x5a8ff0;VisuMZ['BattleCore'][_0x20fe19(0xa70)][_0x20fe19(0x31b)](this),this['_forcedBattlers']=[];},BattleManager[_0x5a8ff0(0x852)]=function(){const _0x1a72e1=_0x5a8ff0;$subject=this[_0x1a72e1(0xbee)],$targets=this['_targets'],$target=this['_target']||this[_0x1a72e1(0x5a3)][this[_0x1a72e1(0x719)]||0x0];},BattleManager[_0x5a8ff0(0xabe)]=function(){const _0x26fb7e=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;const _0x584e6a=SceneManager[_0x26fb7e(0x973)][_0x26fb7e(0x694)];if(_0x584e6a)_0x584e6a[_0x26fb7e(0x78f)]();},BattleManager['battleSys']=function(){const _0x1313b0=_0x5a8ff0;if(BattleManager[_0x1313b0(0xa9d)]())return'TPB';return _0x1313b0(0x9b4);},BattleManager['isBattleSys']=function(_0x525e29){const _0x2b6b6a=_0x5a8ff0;return _0x525e29=_0x525e29[_0x2b6b6a(0x692)]()['trim'](),this[_0x2b6b6a(0xc14)]()===_0x525e29;},BattleManager['isDTB']=function(){const _0xcff6ba=_0x5a8ff0;return this['isBattleSys'](_0xcff6ba(0x9b4));},BattleManager[_0x5a8ff0(0xa05)]=function(){return this['isDTB']();},BattleManager[_0x5a8ff0(0x3a0)]=function(){const _0x392b34=_0x5a8ff0;return!this[_0x392b34(0xa05)]();},BattleManager[_0x5a8ff0(0xa8e)]=function(){const _0x48051c=_0x5a8ff0;return!this[_0x48051c(0xa05)]()&&!this[_0x48051c(0x3a0)]();},BattleManager[_0x5a8ff0(0x636)]=function(_0x40595e){const _0x85e617=_0x5a8ff0;this[_0x85e617(0x38c)]=this[_0x85e617(0x38c)]||{};if(this[_0x85e617(0x38c)][_0x40595e]!==undefined)return this[_0x85e617(0x38c)][_0x40595e];this[_0x85e617(0x38c)][_0x40595e]=null;const _0x42f110=this['allBattleMembers'](),_0x508c52=_0x42f110[_0x85e617(0xa67)](_0xce2e85=>_0xce2e85['battlerKey']()===_0x40595e);if(_0x508c52)this[_0x85e617(0x38c)][_0x40595e]=_0x508c52;return this[_0x85e617(0x38c)][_0x40595e];},Game_BattlerBase[_0x5a8ff0(0xb6e)]['battlerKey']=function(){const _0x1274f2=_0x5a8ff0;return _0x1274f2(0x4e8)[_0x1274f2(0x907)](this[_0x1274f2(0x34b)]()?_0x1274f2(0x749):_0x1274f2(0xb15),this[_0x1274f2(0xa4b)]()+'-'+(this[_0x1274f2(0x34b)]()?this[_0x1274f2(0x7c3)]():this[_0x1274f2(0xc16)]()));},Game_Action['prototype'][_0x5a8ff0(0x742)]=function(_0x5cdfbb){const _0x4210a0=_0x5a8ff0;if(this[_0x4210a0(0x991)]!=='')return;typeof _0x5cdfbb===_0x4210a0(0x5d9)?this['_targetBattlerKey']=_0x5cdfbb[_0x4210a0(0x44e)]()[_0x4210a0(0xb20)]():this[_0x4210a0(0x991)]=_0x5cdfbb[_0x4210a0(0xb72)]();},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x88a)]=function(){return[this['getSpecificBattlerKeyTarget']()];},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x905)]=function(){const _0x1a87dd=_0x5a8ff0,_0x488388=this[_0x1a87dd(0x991)]||'',_0x16a940=BattleManager[_0x1a87dd(0x636)](_0x488388);if(!_0x16a940)return this[_0x1a87dd(0x662)]();if(!_0x16a940[_0x1a87dd(0x6b2)]())return this[_0x1a87dd(0x662)]();return _0x16a940;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x662)]=function(){const _0x3f8a71=_0x5a8ff0,_0x5e5a29=this['_targetBattlerKey'];return _0x5e5a29['match'](/ACTOR/i)?this[_0x3f8a71(0x6b8)]()[_0x3f8a71(0x3b5)]():this['opponentsUnit']()[_0x3f8a71(0x3b5)]();},BattleManager[_0x5a8ff0(0xbaf)]=function(){const _0x48fe16=_0x5a8ff0;return this[_0x48fe16(0x33a)]()['filter'](_0x14d426=>_0x14d426[_0x48fe16(0x341)]());},BattleManager['processBattleCoreJS']=function(_0x2daa7d){const _0x4d74ce=_0x5a8ff0;_0x2daa7d===_0x4d74ce(0x8a8)&&(this[_0x4d74ce(0x27b)]=!![]),$gameParty[_0x4d74ce(0xa35)](_0x2daa7d),$gameTroop[_0x4d74ce(0xa35)](_0x2daa7d);},VisuMZ['BattleCore'][_0x5a8ff0(0xc0a)]=BattleManager[_0x5a8ff0(0x696)],BattleManager[_0x5a8ff0(0x696)]=function(){const _0x3aa699=_0x5a8ff0;this[_0x3aa699(0x443)]=![],this[_0x3aa699(0x671)]=ConfigManager[_0x3aa699(0x43c)],this[_0x3aa699(0x27b)]=![],this[_0x3aa699(0xa35)](_0x3aa699(0xc01)),VisuMZ[_0x3aa699(0xbb3)][_0x3aa699(0xc0a)][_0x3aa699(0x31b)](this),this['processBattleCoreJS'](_0x3aa699(0x480));},BattleManager['processPostBattleCommonEvents']=function(_0x2918dc){const _0x3bea58=_0x5a8ff0,_0x30506b=VisuMZ[_0x3bea58(0xbb3)][_0x3bea58(0xba1)]['Mechanics'];_0x2918dc!==_0x3bea58(0x5ae)&&_0x30506b[_0x3bea58(0x56e)]&&VisuMZ[_0x3bea58(0xbb3)]['CheckMapBattleEventValid'](_0x30506b[_0x3bea58(0x56e)])&&$gameTemp[_0x3bea58(0xa10)](_0x30506b[_0x3bea58(0x56e)]);const _0x5086a3=_0x3bea58(0x2bf)[_0x3bea58(0x907)](_0x2918dc);_0x30506b[_0x5086a3]&&VisuMZ[_0x3bea58(0xbb3)]['CheckMapBattleEventValid'](_0x30506b[_0x5086a3])&&$gameTemp[_0x3bea58(0xa10)](_0x30506b[_0x5086a3]);},VisuMZ['BattleCore'][_0x5a8ff0(0x5b4)]=BattleManager[_0x5a8ff0(0xaed)],BattleManager['abort']=function(){const _0x1358b2=_0x5a8ff0;VisuMZ[_0x1358b2(0xbb3)][_0x1358b2(0x5b4)][_0x1358b2(0x31b)](this),SceneManager[_0x1358b2(0x5c8)]()&&BattleManager['updateEvent']();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x4a0)]=BattleManager[_0x5a8ff0(0x339)],BattleManager[_0x5a8ff0(0x339)]=function(){const _0x5e383f=_0x5a8ff0;if(this[_0x5e383f(0x48f)]===_0x5e383f(0x281)){if($gameTemp[_0x5e383f(0xaca)]())return![];}return VisuMZ[_0x5e383f(0xbb3)][_0x5e383f(0x4a0)][_0x5e383f(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x9b2)]=BattleManager['processVictory'],BattleManager[_0x5a8ff0(0x259)]=function(){const _0x13908b=_0x5a8ff0;this['_endingBattle']=!![],this['processBattleCoreJS'](_0x13908b(0x8a8)),VisuMZ[_0x13908b(0xbb3)][_0x13908b(0x9b2)][_0x13908b(0x31b)](this),this[_0x13908b(0x4f2)](_0x13908b(0xaa3));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x506)]=BattleManager['processAbort'],BattleManager[_0x5a8ff0(0x698)]=function(){const _0x4dde96=_0x5a8ff0;this['_endingBattle']=!![],VisuMZ[_0x4dde96(0xbb3)][_0x4dde96(0x506)][_0x4dde96(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)]['BattleManager_processDefeat']=BattleManager[_0x5a8ff0(0xb8e)],BattleManager[_0x5a8ff0(0xb8e)]=function(){const _0x117b36=_0x5a8ff0;this['_endingBattle']=!![],this[_0x117b36(0xa35)](_0x117b36(0x94c)),VisuMZ[_0x117b36(0xbb3)][_0x117b36(0x462)][_0x117b36(0x31b)](this),this['processPostBattleCommonEvents']('Defeat');},VisuMZ['BattleCore'][_0x5a8ff0(0x245)]=BattleManager['endBattle'],BattleManager[_0x5a8ff0(0x3b6)]=function(_0x121ebf){const _0x276ec9=_0x5a8ff0;this[_0x276ec9(0x443)]=!![],this[_0x276ec9(0x671)]=![],this[_0x276ec9(0xa35)](_0x276ec9(0x26c)),VisuMZ['BattleCore']['BattleManager_endBattle'][_0x276ec9(0x31b)](this,_0x121ebf),this['processBattleCoreJS'](_0x276ec9(0xacf));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x2cc)]=BattleManager['startTurn'],BattleManager[_0x5a8ff0(0x77f)]=function(){const _0x3f4c10=_0x5a8ff0;if(this[_0x3f4c10(0xa05)]())this[_0x3f4c10(0xa35)](_0x3f4c10(0x74f));VisuMZ['BattleCore'][_0x3f4c10(0x2cc)][_0x3f4c10(0x31b)](this);if(this['isTurnBased']())this[_0x3f4c10(0xa35)](_0x3f4c10(0x463));},BattleManager[_0x5a8ff0(0xb27)]=function(){const _0x157977=_0x5a8ff0,_0x536d2a=this['_subject'],_0x18a0d7=_0x536d2a[_0x157977(0x718)]();_0x18a0d7?(_0x18a0d7[_0x157977(0x92e)](),_0x18a0d7[_0x157977(0x547)]()?(this['startAction'](),_0x536d2a[_0x157977(0x305)]()):(_0x536d2a[_0x157977(0x305)](),this['endAction']())):(this[_0x157977(0x4ed)](),this[_0x157977(0xbee)]=null);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa1f)]=BattleManager['startAction'],BattleManager['startAction']=function(){const _0xde9d5e=_0x5a8ff0,_0x5a34f3=this[_0xde9d5e(0xbee)][_0xde9d5e(0x718)](),_0xd66ddc=this[_0xde9d5e(0xbee)];_0x5a34f3&&_0x5a34f3[_0xde9d5e(0x6ee)]()===_0xd66ddc&&_0x5a34f3[_0xde9d5e(0x9f7)](_0xde9d5e(0x3eb)),VisuMZ['BattleCore'][_0xde9d5e(0xa1f)][_0xde9d5e(0x31b)](this),_0x5a34f3&&_0x5a34f3['subject']()===_0xd66ddc&&_0x5a34f3[_0xde9d5e(0x9f7)](_0xde9d5e(0x5a2));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x609)]=BattleManager[_0x5a8ff0(0x4ed)],BattleManager[_0x5a8ff0(0x4ed)]=function(){const _0x160a03=_0x5a8ff0,_0x5267de=this[_0x160a03(0x1f8)],_0x1b4d60=this[_0x160a03(0xbee)];_0x5267de&&_0x5267de!==this[_0x160a03(0x602)]&&_0x5267de[_0x160a03(0x6ee)]()===_0x1b4d60&&_0x5267de[_0x160a03(0x9f7)](_0x160a03(0xaa7)),this[_0x160a03(0xbee)]?VisuMZ['BattleCore'][_0x160a03(0x609)]['call'](this):this[_0x160a03(0x48f)]=_0x160a03(0x281),_0x5267de&&_0x5267de!==this[_0x160a03(0x602)]&&_0x5267de[_0x160a03(0x6ee)]()===_0x1b4d60&&_0x5267de['actionBattleCoreJS'](_0x160a03(0x67c)),this[_0x160a03(0xae4)](this[_0x160a03(0x33a)]()),this[_0x160a03(0x602)]=this[_0x160a03(0x1f8)];},BattleManager[_0x5a8ff0(0xae4)]=function(_0x183399){const _0x3835b4=_0x5a8ff0;for(const _0x6b2b84 of _0x183399){if(!_0x6b2b84)continue;if(!_0x6b2b84['battler']())continue;_0x6b2b84[_0x3835b4(0x407)]()[_0x3835b4(0x91c)]();}},BattleManager[_0x5a8ff0(0x6c6)]=function(){const _0x398236=_0x5a8ff0;!this[_0x398236(0xb61)][_0x398236(0x71e)]()&&this['endAction']();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9fe)]=function(){const _0x2ace6f=_0x5a8ff0;this['clearResult']();if(Imported[_0x2ace6f(0x6a5)]){const _0x5085d5=VisuMZ['SkillsStatesCore']['Settings'][_0x2ace6f(0x37f)];_0x5085d5&&_0x5085d5[_0x2ace6f(0x8fe)]===![]&&this[_0x2ace6f(0x74b)](0x1);}else this['removeStatesAuto'](0x1);this[_0x2ace6f(0x924)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x895)]=BattleManager[_0x5a8ff0(0x4e6)],BattleManager[_0x5a8ff0(0x4e6)]=function(_0x5c1f70,_0xae17be){const _0x3d99b8=_0x5a8ff0;this[_0x3d99b8(0x453)]=!![],VisuMZ[_0x3d99b8(0xbb3)][_0x3d99b8(0x895)][_0x3d99b8(0x31b)](this,_0x5c1f70,_0xae17be),this[_0x3d99b8(0x453)]=undefined;},BattleManager[_0x5a8ff0(0x342)]=function(){const _0x1f6b8f=_0x5a8ff0;this[_0x1f6b8f(0x6bf)]=VisuMZ[_0x1f6b8f(0xbb3)][_0x1f6b8f(0xba1)]['Mechanics'][_0x1f6b8f(0x71f)][_0x1f6b8f(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)]['BattleManager_onEscapeSuccess']=BattleManager[_0x5a8ff0(0x61d)],BattleManager['onEscapeSuccess']=function(){const _0x27b723=_0x5a8ff0;this['processBattleCoreJS'](_0x27b723(0x90f)),BattleManager[_0x27b723(0x566)][_0x27b723(0xa6b)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess']['call'](this),this['processPostBattleCommonEvents']('EscapeSuccess');},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x49a)]=BattleManager[_0x5a8ff0(0xb14)],BattleManager[_0x5a8ff0(0xb14)]=function(){const _0x4b3c2a=_0x5a8ff0;this[_0x4b3c2a(0xa35)](_0x4b3c2a(0x2f8));const _0x575941=this[_0x4b3c2a(0x6bf)];VisuMZ[_0x4b3c2a(0xbb3)][_0x4b3c2a(0x49a)][_0x4b3c2a(0x31b)](this),this['_escapeRatio']=_0x575941+VisuMZ[_0x4b3c2a(0xbb3)][_0x4b3c2a(0xba1)][_0x4b3c2a(0x2dc)][_0x4b3c2a(0x4f5)][_0x4b3c2a(0x31b)](this),this[_0x4b3c2a(0x7d6)]=![],this[_0x4b3c2a(0x4f2)](_0x4b3c2a(0x5ae));},BattleManager[_0x5a8ff0(0x47d)]=function(){const _0x56e27d=_0x5a8ff0;let _0x4434e7=![];if(this['isDisplayEmergedEnemies']())for(const _0x4e9c1a of $gameTroop[_0x56e27d(0x238)]()){this[_0x56e27d(0xb61)][_0x56e27d(0x23b)](_0x56e27d(0xaaf),TextManager[_0x56e27d(0x970)]['format'](_0x4e9c1a)),this[_0x56e27d(0xb61)]['push'](_0x56e27d(0x914)),_0x4434e7=!![];}if(this[_0x56e27d(0x346)])this[_0x56e27d(0xb61)][_0x56e27d(0x23b)](_0x56e27d(0xaaf),TextManager[_0x56e27d(0x777)]['format']($gameParty[_0x56e27d(0xa4b)]())),this[_0x56e27d(0xb61)][_0x56e27d(0x23b)]('wait');else this[_0x56e27d(0x971)]&&(this[_0x56e27d(0xb61)]['push']('addText',TextManager[_0x56e27d(0xaf8)]['format']($gameParty[_0x56e27d(0xa4b)]())),this[_0x56e27d(0xb61)][_0x56e27d(0x23b)](_0x56e27d(0x914)));_0x4434e7&&(this['_logWindow'][_0x56e27d(0x23b)](_0x56e27d(0x914)),this[_0x56e27d(0xb61)][_0x56e27d(0x23b)](_0x56e27d(0x9c3))),this[_0x56e27d(0xa9d)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x56e27d(0x563)]=![]);},BattleManager[_0x5a8ff0(0x247)]=function(){const _0x775847=_0x5a8ff0;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x775847(0xbb3)][_0x775847(0xba1)]['Enemy'][_0x775847(0x2c7)];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x3d7)]=BattleManager['startInput'],BattleManager[_0x5a8ff0(0x665)]=function(){const _0x2a2192=_0x5a8ff0;VisuMZ[_0x2a2192(0xbb3)][_0x2a2192(0x3d7)][_0x2a2192(0x31b)](this),this[_0x2a2192(0xbb6)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x2a2192(0x971)]&&$gameParty['canInput']()&&this[_0x2a2192(0xa9b)]();},BattleManager[_0x5a8ff0(0x7af)]=function(){const _0x79efe5=_0x5a8ff0;return VisuMZ[_0x79efe5(0xbb3)]['Settings'][_0x79efe5(0x3fe)][_0x79efe5(0x9b0)];},BattleManager['checkTpbInputOpen']=function(){const _0xaf04f9=_0x5a8ff0;this[_0xaf04f9(0x99e)]()&&this[_0xaf04f9(0xa9b)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x721)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbf9)],Scene_Battle['prototype']['startActorCommandSelection']=function(){const _0x7c941c=_0x5a8ff0;VisuMZ[_0x7c941c(0xbb3)]['Scene_Battle_startActorCommandSelection'][_0x7c941c(0x31b)](this),BattleManager[_0x7c941c(0xa9d)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x7c941c(0x563)]=![],this[_0x7c941c(0x449)]());},BattleManager['emulateAction']=function(_0x2f130d,_0x14f83c,_0x6ed30){const _0x13756d=_0x5a8ff0;if(!_0x6ed30)return;if(!_0x2f130d)return;if(!_0x14f83c)return;const _0xab2afd=this[_0x13756d(0x1f8)];this[_0x13756d(0x1f8)]=new Game_Action(_0x2f130d);if(DataManager['isItem'](_0x6ed30))this[_0x13756d(0x1f8)][_0x13756d(0x8d2)](_0x6ed30['id']);if(DataManager[_0x13756d(0x2b4)](_0x6ed30))this[_0x13756d(0x1f8)]['setSkill'](_0x6ed30['id']);if(this['_action'][_0x13756d(0x12a)]())BattleManager[_0x13756d(0x5b5)](_0x2f130d,_0x14f83c);this['_action']=_0xab2afd;},BattleManager['invokeMagicReflection']=function(_0x29cd16,_0x7d27a3){const _0x3e53ba=_0x5a8ff0;this[_0x3e53ba(0x1f8)][_0x3e53ba(0x4d1)]=_0x7d27a3,this[_0x3e53ba(0xb61)][_0x3e53ba(0xa91)](_0x7d27a3),this[_0x3e53ba(0xb61)][_0x3e53ba(0x817)](_0x29cd16,this['_action']),this[_0x3e53ba(0x1f8)]['apply'](_0x29cd16),this[_0x3e53ba(0xb61)][_0x3e53ba(0x276)](_0x29cd16,_0x29cd16);},VisuMZ[_0x5a8ff0(0xbb3)]['BattleManager_makeActionOrders']=BattleManager['makeActionOrders'],BattleManager[_0x5a8ff0(0x77b)]=function(){const _0x3ef267=_0x5a8ff0;VisuMZ[_0x3ef267(0xbb3)][_0x3ef267(0x308)]['call'](this),this[_0x3ef267(0x1e9)]=this['_actionBattlers'][_0x3ef267(0x6e0)](_0x5a9a85=>_0x5a9a85&&_0x5a9a85[_0x3ef267(0x4c5)]());},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xc13)]=BattleManager[_0x5a8ff0(0x646)],BattleManager['updatePhase']=function(_0x497540){const _0x7cbc30=_0x5a8ff0;if(this[_0x7cbc30(0x48f)]===_0x7cbc30(0x945))this[_0x7cbc30(0x98f)]();else this['_phase']===_0x7cbc30(0x966)?this['updateForceAction']():VisuMZ[_0x7cbc30(0xbb3)][_0x7cbc30(0xc13)][_0x7cbc30(0x31b)](this,_0x497540);},BattleManager[_0x5a8ff0(0x922)]=function(){const _0x1fcae2=_0x5a8ff0;this[_0x1fcae2(0x35b)]=this['_targets'][_0x1fcae2(0x152)](0x0),this['_targetIndex']=0x0,this[_0x1fcae2(0x571)]=this[_0x1fcae2(0x35b)][0x0]||null,this['_phase']=_0x1fcae2(0x945);},BattleManager[_0x5a8ff0(0x98f)]=function(){const _0x5aa944=_0x5a8ff0;!this['updateEventMain']()&&!this[_0x5aa944(0xb61)][_0x5aa944(0x71e)]()&&(this[_0x5aa944(0x48f)]=_0x5aa944(0x4e5));},BattleManager[_0x5a8ff0(0x966)]=function(_0x316e4f){const _0x28d949=_0x5a8ff0;this['_actionBattlers']['remove'](_0x316e4f);if(_0x316e4f===this['_subject'])return;const _0x3b36a4=JsonEx[_0x28d949(0x78e)](_0x316e4f[_0x28d949(0x718)]());this[_0x28d949(0x578)][_0x28d949(0x23b)]([_0x316e4f,_0x3b36a4]);},BattleManager[_0x5a8ff0(0x5fc)]=function(){},BattleManager['updateStart']=function(){const _0x135137=_0x5a8ff0;if(this[_0x135137(0xa9d)]())this[_0x135137(0x48f)]=_0x135137(0x281);else this[_0x135137(0x578)][_0x135137(0x6b9)]>0x0?this[_0x135137(0x48f)]=_0x135137(0x281):this[_0x135137(0x665)]();},BattleManager[_0x5a8ff0(0x761)]=function(){const _0x4851fd=_0x5a8ff0,_0x53f7db=this[_0x4851fd(0xbee)];_0x53f7db&&this[_0x4851fd(0xa9d)]()&&_0x53f7db['setActionState'](_0x4851fd(0xad6));for(;;){const _0x2b62ac=this[_0x4851fd(0x993)]();if(!_0x2b62ac)return null;if(_0x2b62ac[_0x4851fd(0xbe9)]()&&_0x2b62ac[_0x4851fd(0x6b2)]())return _0x2b62ac;}},BattleManager[_0x5a8ff0(0x993)]=function(){const _0x53eb54=_0x5a8ff0;if(this[_0x53eb54(0x578)][_0x53eb54(0x6b9)]>0x0){const _0x29e7b7=this[_0x53eb54(0x578)][_0x53eb54(0x9a2)](),_0x1aff80=_0x29e7b7[0x0];return _0x1aff80['_actions']=_0x1aff80[_0x53eb54(0x74d)]||[],_0x1aff80['_actions'][0x0]=_0x29e7b7[0x1],_0x1aff80;}else return this[_0x53eb54(0x1e9)]['shift']();},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Battler_forceAction']=Game_Battler[_0x5a8ff0(0xb6e)]['forceAction'],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x966)]=function(_0x46f17e,_0x15fd8c){const _0x16db0c=_0x5a8ff0;VisuMZ[_0x16db0c(0xbb3)]['Game_Battler_forceAction'][_0x16db0c(0x31b)](this,_0x46f17e,_0x15fd8c),this[_0x16db0c(0x74d)][this[_0x16db0c(0x74d)][_0x16db0c(0x6b9)]-0x1][_0x16db0c(0x987)]=!![];},Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x210)]=function(_0x3fbcfc){const _0x2e4d65=_0x5a8ff0;return this[_0x2e4d65(0x1dd)](_0x3fbcfc[0x0],_0x3fbcfc[0x1],_0x1913b5=>{const _0x598551=_0x2e4d65;!_0x1913b5[_0x598551(0x96c)]()&&(_0x1913b5[_0x598551(0x966)](_0x3fbcfc[0x2],_0x3fbcfc[0x3]),BattleManager[_0x598551(0x966)](_0x1913b5));}),!![];},VisuMZ['BattleCore'][_0x5a8ff0(0x793)]=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x594)],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x594)]=function(){const _0x55afc=_0x5a8ff0;VisuMZ['BattleCore'][_0x55afc(0x793)][_0x55afc(0x31b)](this),this[_0x55afc(0x74d)]['length']<=0x0&&(this[_0x55afc(0x9ef)]=Number[_0x55afc(0x105)]);},BattleManager[_0x5a8ff0(0x994)]=function(){const _0xe89ff3=_0x5a8ff0;if(VisuMZ[_0xe89ff3(0xbb3)][_0xe89ff3(0xba1)][_0xe89ff3(0x8c7)]['EndBattlePopups']??!![])return![];return SceneManager['isSceneBattle']()&&this[_0xe89ff3(0x27b)];},VisuMZ['BattleCore']['BattleManager_selectNextCommand']=BattleManager[_0x5a8ff0(0xa9b)],BattleManager[_0x5a8ff0(0xa9b)]=function(){const _0x5e396e=_0x5a8ff0;this[_0x5e396e(0xa9d)]()?this[_0x5e396e(0x7ea)]():VisuMZ['BattleCore'][_0x5e396e(0x99d)][_0x5e396e(0x31b)](this);},BattleManager[_0x5a8ff0(0x7ea)]=function(){const _0x12dbda=_0x5a8ff0;if(this[_0x12dbda(0x711)]){if(this[_0x12dbda(0x711)][_0x12dbda(0xa9b)]())return;this[_0x12dbda(0xb17)](),this[_0x12dbda(0x776)](),!this[_0x12dbda(0xbee)]&&!this[_0x12dbda(0x711)]&&SceneManager[_0x12dbda(0x973)][_0x12dbda(0x3f2)]();}else!this[_0x12dbda(0xbee)]&&this[_0x12dbda(0x91a)]();},BattleManager[_0x5a8ff0(0x776)]=function(){const _0xd875e1=_0x5a8ff0;(!this[_0xd875e1(0x99e)]()||this[_0xd875e1(0x8f6)]())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty[_0xd875e1(0x211)]()[_0xd875e1(0x597)](this[_0xd875e1(0x398)])&&(this[_0xd875e1(0x398)]=null)),!this[_0xd875e1(0x398)]?(this[_0xd875e1(0x937)](),this[_0xd875e1(0x711)]=null,this[_0xd875e1(0x7d6)]=![]):this[_0xd875e1(0x921)]());},BattleManager[_0x5a8ff0(0x921)]=function(){const _0x21dbfb=_0x5a8ff0;!$gameParty['battleMembers']()[_0x21dbfb(0x597)](this[_0x21dbfb(0x398)])&&(this['_tpbSceneChangeCacheActor']=null),this[_0x21dbfb(0x398)]?(this[_0x21dbfb(0x711)]=this[_0x21dbfb(0x398)],this[_0x21dbfb(0x711)]['_tpbState']=_0x21dbfb(0xa56),this[_0x21dbfb(0x7d6)]=!![],this[_0x21dbfb(0x398)]=null):(this[_0x21dbfb(0x937)](),this[_0x21dbfb(0x711)]=null,this[_0x21dbfb(0x7d6)]=![]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x149)]=BattleManager[_0x5a8ff0(0x333)],BattleManager['isTpbMainPhase']=function(){const _0x3359ba=_0x5a8ff0;return this[_0x3359ba(0x48f)]===_0x3359ba(0x945)?this[_0x3359ba(0x49d)]():VisuMZ[_0x3359ba(0xbb3)][_0x3359ba(0x149)][_0x3359ba(0x31b)](this);},BattleManager[_0x5a8ff0(0x49d)]=function(){const _0x50c9ed=_0x5a8ff0;return this[_0x50c9ed(0x5b3)]();},VisuMZ[_0x5a8ff0(0xbb3)]['BattleManager_cancelActorInput']=BattleManager[_0x5a8ff0(0x937)],BattleManager['cancelActorInput']=function(){const _0xed5bc8=_0x5a8ff0;this['isTpb']()&&this[_0xed5bc8(0x48f)]===_0xed5bc8(0x6dc)&&(this[_0xed5bc8(0x711)]=null),VisuMZ[_0xed5bc8(0xbb3)]['BattleManager_cancelActorInput']['call'](this);},VisuMZ[_0x5a8ff0(0xbb3)]['BattleManager_inputtingAction']=BattleManager[_0x5a8ff0(0x778)],BattleManager[_0x5a8ff0(0x778)]=function(){const _0x389dfc=_0x5a8ff0,_0x73ece9=this[_0x389dfc(0x711)];if(_0x73ece9&&!_0x73ece9[_0x389dfc(0x778)]()){const _0x5b0aca=_0x73ece9['_actionInputIndex'];_0x73ece9[_0x389dfc(0x74d)][_0x5b0aca]=new Game_Action(_0x73ece9);}return VisuMZ[_0x389dfc(0xbb3)][_0x389dfc(0x65f)][_0x389dfc(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x527)]=BattleManager[_0x5a8ff0(0x5ac)],BattleManager[_0x5a8ff0(0x5ac)]=function(_0x453220){const _0x2b5c9c=_0x5a8ff0;if(this['_action']['isForFriend']())return![];return VisuMZ[_0x2b5c9c(0xbb3)]['BattleManager_checkSubstitute'][_0x2b5c9c(0x31b)](this,_0x453220);},SceneManager[_0x5a8ff0(0x5c8)]=function(){const _0x393aa0=_0x5a8ff0;return this[_0x393aa0(0x973)]&&this[_0x393aa0(0x973)][_0x393aa0(0x18c)]===Scene_Battle;},SceneManager[_0x5a8ff0(0x8a2)]=function(){const _0x197a3c=_0x5a8ff0;return Spriteset_Battle[_0x197a3c(0xb6e)]['isFlipped']();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x322ee3=_0x5a8ff0;if(SceneManager[_0x322ee3(0x9aa)](Scene_Options))return!![];return![];},SceneManager[_0x5a8ff0(0xa60)]=function(){const _0x2ffa04=_0x5a8ff0;if(SceneManager[_0x2ffa04(0x919)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0xfd63f5){const _0x59271c=_0x5a8ff0;if(!SceneManager[_0x59271c(0x5c8)]())return!![];const _0x108623=[_0x59271c(0x57a),_0x59271c(0xa66),_0x59271c(0x102)];return _0x108623['includes'](_0xfd63f5[_0x59271c(0xa4b)]);},VisuMZ['BattleCore'][_0x5a8ff0(0x967)]=SceneManager[_0x5a8ff0(0x23b)],SceneManager[_0x5a8ff0(0x23b)]=function(_0x385cce){const _0x411e4d=_0x5a8ff0;if(!SceneManager[_0x411e4d(0x34e)](_0x385cce))return this[_0x411e4d(0x705)](_0x385cce);VisuMZ[_0x411e4d(0xbb3)][_0x411e4d(0x967)][_0x411e4d(0x31b)](this,_0x385cce);},SceneManager[_0x5a8ff0(0x705)]=function(_0x162878){const _0x2bfcba=_0x5a8ff0;if(!$gameTemp[_0x2bfcba(0x834)]())return;if(this[_0x2bfcba(0xa43)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x27092b='';_0x27092b+=_0x2bfcba(0xfe),_0x27092b+=_0x2bfcba(0xb32)[_0x2bfcba(0x907)](_0x162878['name']),alert(_0x27092b);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb64)]=Game_Temp['prototype'][_0x5a8ff0(0x4aa)],Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(){const _0x1c295e=_0x5a8ff0;VisuMZ[_0x1c295e(0xbb3)]['Game_Temp_initialize'][_0x1c295e(0x31b)](this),this[_0x1c295e(0xa29)]=[];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x942)]=Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb09)],Game_Temp[_0x5a8ff0(0xb6e)]['requestAnimation']=function(_0x22ecc5,_0x357fd7,_0x3adb86){const _0x2b4a0b=_0x5a8ff0;_0x22ecc5=_0x22ecc5[_0x2b4a0b(0x6e0)]((_0x3202e0,_0x5badf7,_0x18544f)=>_0x18544f['indexOf'](_0x3202e0)===_0x5badf7);SceneManager['isSceneBattle']()&&SceneManager[_0x2b4a0b(0x8a2)]()&&(_0x3adb86=!_0x3adb86);VisuMZ[_0x2b4a0b(0xbb3)][_0x2b4a0b(0x942)][_0x2b4a0b(0x31b)](this,_0x22ecc5,_0x357fd7,_0x3adb86);SceneManager[_0x2b4a0b(0x5c8)]()&&BattleManager['_spriteset'][_0x2b4a0b(0x8cc)]();for(const _0x1c065b of _0x22ecc5){_0x1c065b&&_0x1c065b['isEnemy']&&_0x1c065b[_0x2b4a0b(0x172)]()&&_0x1c065b['resetNameTempVisibility']();}},Game_Temp['prototype']['setLastPluginCommandInterpreter']=function(_0xefa05d){const _0x288156=_0x5a8ff0;this[_0x288156(0x2c3)]=_0xefa05d;},Game_Temp[_0x5a8ff0(0xb6e)]['getLastPluginCommandInterpreter']=function(){const _0x4b6831=_0x5a8ff0;return this[_0x4b6831(0x2c3)];},Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2d7)]=function(){const _0x18b6f2=_0x5a8ff0;this[_0x18b6f2(0x2e2)]=undefined;},Game_Temp[_0x5a8ff0(0xb6e)]['applyForcedGameTroopSettingsBattleCore']=function(_0x19ef52){const _0x199a75=_0x5a8ff0;$gameMap&&$dataMap&&$dataMap[_0x199a75(0x494)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x199a75(0x494)]);const _0x4df3f0=$dataTroops[_0x19ef52];if(_0x4df3f0){let _0x52a398=DataManager[_0x199a75(0x7c9)](_0x4df3f0['id']);this[_0x199a75(0x6fb)](_0x52a398);}},Game_Temp[_0x5a8ff0(0xb6e)]['parseForcedGameTroopSettingsBattleCore']=function(_0x139031){const _0xfbb8c9=_0x5a8ff0;if(!_0x139031)return;if(_0x139031[_0xfbb8c9(0x6d8)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x23f380=String(RegExp['$1']);if(_0x23f380['match'](/DEFAULT/i))this[_0xfbb8c9(0x2e2)]=_0xfbb8c9(0x22f);else{if(_0x23f380[_0xfbb8c9(0x6d8)](/LIST/i))this[_0xfbb8c9(0x2e2)]='list';else{if(_0x23f380['match'](/XP/i))this[_0xfbb8c9(0x2e2)]='xp';else{if(_0x23f380['match'](/PORTRAIT/i))this[_0xfbb8c9(0x2e2)]='portrait';else{if(_0x23f380['match'](/BORDER/i))this[_0xfbb8c9(0x2e2)]=_0xfbb8c9(0xbad);else{if(_0x23f380[_0xfbb8c9(0x6d8)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0xfbb8c9(0xb0e)]?this[_0xfbb8c9(0x2e2)]=_0xfbb8c9(0x570):this[_0xfbb8c9(0x2e2)]='default';else _0x23f380[_0xfbb8c9(0x6d8)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported['VisuMZ_3_FrontviewBattleUI']?this[_0xfbb8c9(0x2e2)]=_0xfbb8c9(0x20f):this[_0xfbb8c9(0x2e2)]=_0xfbb8c9(0x22f));}}}}}}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x351)]=Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x59f)],Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x59f)]=function(_0x57d461,_0x56a913){const _0x3b74bf=_0x5a8ff0;SceneManager[_0x3b74bf(0x5c8)]()?this['requestBattleBalloon'](_0x57d461,_0x56a913):VisuMZ[_0x3b74bf(0xbb3)][_0x3b74bf(0x351)][_0x3b74bf(0x31b)](this,_0x57d461,_0x56a913);},Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x43b)]=function(_0x5a3bd5,_0x1ef80d){const _0x4c4ebe=_0x5a8ff0,_0x285496={'target':_0x5a3bd5,'balloonId':_0x1ef80d};this[_0x4c4ebe(0xa29)]=this[_0x4c4ebe(0xa29)]||[],this[_0x4c4ebe(0xa29)][_0x4c4ebe(0x23b)](_0x285496);},Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x236)]=function(){const _0x36aeed=_0x5a8ff0;return this['_battleBalloonQueue']=this[_0x36aeed(0xa29)]||[],this[_0x36aeed(0xa29)][_0x36aeed(0x9a2)]();},Game_Temp[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x57c)]=function(){this['_battleBalloonQueue']=[];},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x614)]=function(){const _0x1dfb3c=_0x5a8ff0;this['_battleBalloonSprites']===undefined&&(this[_0x1dfb3c(0x497)]=[]);for(const _0x594337 of this[_0x1dfb3c(0x497)]){!_0x594337[_0x1dfb3c(0x98a)]()&&this['removeBattleBalloon'](_0x594337);}this[_0x1dfb3c(0x8bd)]();},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8bd)]=function(){const _0x1ee3a2=_0x5a8ff0;for(;;){const _0x3fb21c=$gameTemp[_0x1ee3a2(0x236)]();if(_0x3fb21c)this['createBattleBalloon'](_0x3fb21c);else break;}},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8a0)]=function(_0x19715e){const _0x3529a0=_0x5a8ff0,_0x5ae7f3=this[_0x3529a0(0x6c4)](_0x19715e['target']);if(_0x5ae7f3){let _0xe20529=null;Imported[_0x3529a0(0x5b6)]&&Array[_0x3529a0(0x7e2)](_0x19715e[_0x3529a0(0x1b3)])?_0xe20529=new Sprite_IconBalloon():_0xe20529=new Sprite_Balloon(),_0xe20529['targetObject']=_0x19715e[_0x3529a0(0x291)],_0xe20529[_0x3529a0(0x571)]=_0x5ae7f3,_0xe20529['_target'][_0x3529a0(0x51b)]=_0x5ae7f3,_0xe20529['setup'](_0x5ae7f3,_0x19715e['balloonId']),BattleManager[_0x3529a0(0x963)](_0xe20529),this['_battleBalloonSprites'][_0x3529a0(0x23b)](_0xe20529);}},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x144)]=function(_0x3b4d05){const _0x137f14=_0x5a8ff0;this[_0x137f14(0x497)][_0x137f14(0xc1d)](_0x3b4d05),BattleManager[_0x137f14(0x9a4)](_0x3b4d05),_0x3b4d05['destroy']();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3cb)]=function(_0x36fba2,_0x494af9){},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x34c)]=function(){return![];},Spriteset_Battle['prototype'][_0x5a8ff0(0x7b6)]=function(){const _0x59e3d1=_0x5a8ff0;return this['_battleBalloonSprites']=this[_0x59e3d1(0x497)]||[],this['_battleBalloonSprites'][_0x59e3d1(0x6b9)]>0x0;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6ad)]=Game_System[_0x5a8ff0(0xb6e)]['initialize'],Game_System[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(){const _0x2af6dc=_0x5a8ff0;VisuMZ[_0x2af6dc(0xbb3)][_0x2af6dc(0x6ad)][_0x2af6dc(0x31b)](this),this['initBattleCore']();},Game_System[_0x5a8ff0(0xb6e)]['initBattleCore']=function(){const _0x349bd4=_0x5a8ff0;this['_defeatedEnemies']=this[_0x349bd4(0x33d)]||[];},Game_System[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1a7)]=function(){const _0x2ebc37=_0x5a8ff0;if(this[_0x2ebc37(0x33d)]===undefined)this[_0x2ebc37(0xb0a)]();return this[_0x2ebc37(0x33d)];},Game_System[_0x5a8ff0(0xb6e)]['registerDefeatedEnemy']=function(_0x303a80){const _0x286007=_0x5a8ff0;if(this[_0x286007(0x33d)]===undefined)this[_0x286007(0xb0a)]();if(!_0x303a80)return;if(this[_0x286007(0x33d)][_0x286007(0x597)](_0x303a80))return;this['_defeatedEnemies'][_0x286007(0x23b)](_0x303a80),this[_0x286007(0x33d)][_0x286007(0x46d)]((_0x42a9ba,_0x12ac44)=>_0x42a9ba-_0x12ac44);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x1c0)]=Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4f8)],Game_BattlerBase[_0x5a8ff0(0xb6e)]['addNewState']=function(_0x1ccb6a){const _0x59e0e9=_0x5a8ff0,_0x3accd8=this[_0x59e0e9(0x6b2)](),_0x3ac6cd=this['stateMotionIndex']();VisuMZ[_0x59e0e9(0xbb3)][_0x59e0e9(0x1c0)][_0x59e0e9(0x31b)](this,_0x1ccb6a),this['isEnemy']()&&_0x3accd8&&this['isDead']()&&(this[_0x59e0e9(0x923)]=!this[_0x59e0e9(0x334)](),$gameSystem['registerDefeatedEnemy'](this[_0x59e0e9(0x2b8)]())),SceneManager[_0x59e0e9(0x5c8)]()&&_0x3ac6cd!==this[_0x59e0e9(0xbce)]()&&(this[_0x59e0e9(0x407)]()&&this[_0x59e0e9(0x407)]()[_0x59e0e9(0x91c)]());},Game_Enemy[_0x5a8ff0(0xb6e)]['hasBeenDefeatedBefore']=function(){const _0x1a3ba4=_0x5a8ff0;return $gameSystem[_0x1a3ba4(0x1a7)]()[_0x1a3ba4(0x597)](this[_0x1a3ba4(0x6d7)]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa87)]=Game_BattlerBase[_0x5a8ff0(0xb6e)]['eraseState'],Game_BattlerBase[_0x5a8ff0(0xb6e)]['eraseState']=function(_0x300471){const _0x4c73a6=_0x5a8ff0,_0x2f2c26=this[_0x4c73a6(0x266)][_0x4c73a6(0x597)](_0x300471),_0x38d299=this['stateMotionIndex']();VisuMZ[_0x4c73a6(0xbb3)][_0x4c73a6(0xa87)][_0x4c73a6(0x31b)](this,_0x300471),this['isEnemy']()&&_0x300471===this[_0x4c73a6(0xafe)]()&&this['isAlive']()&&(this[_0x4c73a6(0x923)]=![]),!this[_0x4c73a6(0x928)]&&!this['_tempBattler']&&SceneManager[_0x4c73a6(0x5c8)]()&&(_0x2f2c26&&!this[_0x4c73a6(0x266)]['includes'](_0x300471)&&this[_0x4c73a6(0x9b7)](),_0x38d299!==this[_0x4c73a6(0xbce)]()&&(this[_0x4c73a6(0x407)]()&&this['battler']()['refreshMotion']()));},VisuMZ['BattleCore'][_0x5a8ff0(0x677)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9c3)],Game_Action['prototype']['clear']=function(){const _0x1a7275=_0x5a8ff0;VisuMZ['BattleCore'][_0x1a7275(0x677)][_0x1a7275(0x31b)](this),this[_0x1a7275(0x84a)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1a7275(0x5c2)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x1a7275(0x22f),this[_0x1a7275(0x906)]();},Game_Action[_0x5a8ff0(0xb6e)]['clearTargetBattlerKey']=function(){const _0x3c7f9e=_0x5a8ff0;this[_0x3c7f9e(0x991)]='';},VisuMZ['BattleCore'][_0x5a8ff0(0x77a)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x46b)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x46b)]=function(_0x1431a0){const _0x1cbf21=_0x5a8ff0;VisuMZ['BattleCore'][_0x1cbf21(0x77a)][_0x1cbf21(0x31b)](this,_0x1431a0),this['clearTargetBattlerKey']();},VisuMZ['BattleCore']['Game_Action_setSkill']=Game_Action['prototype']['setSkill'],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa4c)]=function(_0xaace11){const _0x1d327e=_0x5a8ff0;VisuMZ['BattleCore'][_0x1d327e(0xaee)]['call'](this,_0xaace11),this[_0x1d327e(0x906)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x146)]=Game_Action[_0x5a8ff0(0xb6e)]['setItem'],Game_Action['prototype']['setItem']=function(_0x35aee7){const _0x20bc97=_0x5a8ff0;VisuMZ[_0x20bc97(0xbb3)]['Game_Action_setItem'][_0x20bc97(0x31b)](this,_0x35aee7),this[_0x20bc97(0x906)]();},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x445)]=function(_0x83a2d5,_0x40f966){const _0x26d8d7=_0x5a8ff0;return VisuMZ[_0x26d8d7(0xbb3)][_0x26d8d7(0xba1)][_0x26d8d7(0x8c7)][_0x26d8d7(0x35d)][_0x26d8d7(0x31b)](this,_0x83a2d5,_0x40f966);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x16f)]=function(_0x5e117d,_0x1999a6){const _0x306fae=_0x5a8ff0;return VisuMZ['BattleCore'][_0x306fae(0xba1)][_0x306fae(0x8c7)][_0x306fae(0x28a)][_0x306fae(0x31b)](this,_0x5e117d,_0x1999a6);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x509)]=function(_0x343b4b,_0x133c00){const _0x3ff790=_0x5a8ff0;return VisuMZ[_0x3ff790(0xbb3)]['Settings']['Damage'][_0x3ff790(0x4e3)][_0x3ff790(0x31b)](this,_0x343b4b,_0x133c00);},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_itemHit']=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaf5)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaf5)]=function(_0x36a5a8){const _0x3a6a02=_0x5a8ff0,_0x31491d=this[_0x3a6a02(0x12a)]()[_0x3a6a02(0x494)];if(_0x31491d[_0x3a6a02(0x6d8)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x31491d[_0x3a6a02(0x6d8)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0xa6c1=VisuMZ[_0x3a6a02(0xbb3)][_0x3a6a02(0xbae)][_0x3a6a02(0x31b)](this,_0x36a5a8);return _0xa6c1=this[_0x3a6a02(0x5c2)][_0x3a6a02(0x7a1)]*_0xa6c1+this[_0x3a6a02(0x5c2)][_0x3a6a02(0x591)],$gameParty[_0x3a6a02(0x8ea)]()&&(_0xa6c1=this['applyBattleCoreHitRateJS'](_0xa6c1,_0x36a5a8)),_0xa6c1;}}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6e3)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x541)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x541)]=function(_0x72788){const _0x1395ac=_0x5a8ff0;this[_0x1395ac(0x545)]=!![],VisuMZ[_0x1395ac(0xbb3)]['Game_Action_updateLastTarget']['call'](this,_0x72788),this[_0x1395ac(0x545)]=undefined;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x438)]=function(_0x4e574d){const _0x19220a=_0x5a8ff0;window[_0x19220a(0x4e5)]=this,window['a']=this['subject'](),window['b']=_0x4e574d,window['user']=this[_0x19220a(0x6ee)](),window[_0x19220a(0x291)]=_0x4e574d,window[_0x19220a(0x517)]=this['item'](),window[_0x19220a(0xbfb)]=this['item'](),window['item']=this['item']();},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6d5)]=function(_0x481d11){const _0x234ac3=_0x5a8ff0;window[_0x234ac3(0x4e5)]=undefined,window['a']=undefined,window['b']=undefined,window['user']=undefined,window[_0x234ac3(0x291)]=undefined,window[_0x234ac3(0x517)]=undefined,window[_0x234ac3(0xbfb)]=undefined,window[_0x234ac3(0x12a)]=undefined;},Game_Action['prototype'][_0x5a8ff0(0x709)]=function(_0x19d5cf,_0x5b9c95){const _0x13c311=_0x5a8ff0;if(this['_bypass_applyBattleCoreHitRateJS'])return _0x19d5cf;this['declareGlobalVariables'](_0x5b9c95);if(this[_0x13c311(0x12a)]()){let _0x5d58d2=VisuMZ[_0x13c311(0xbb3)][_0x13c311(0x5f9)](this[_0x13c311(0x12a)](),_0x13c311(0x2f5));VisuMZ[_0x13c311(0xbb3)]['JS'][_0x5d58d2]&&(_0x19d5cf=VisuMZ[_0x13c311(0xbb3)]['JS'][_0x5d58d2][_0x13c311(0x31b)](this,this[_0x13c311(0x6ee)](),_0x5b9c95,this['item'](),_0x19d5cf));}for(const _0x586999 of this[_0x13c311(0x6ee)]()[_0x13c311(0x75f)]()){if(!_0x586999)continue;key=VisuMZ['BattleCore'][_0x13c311(0x5f9)](_0x586999,_0x13c311(0x8b9)),VisuMZ['BattleCore']['JS'][key]&&(_0x19d5cf=VisuMZ['BattleCore']['JS'][key][_0x13c311(0x31b)](this,this['subject'](),_0x5b9c95,this[_0x13c311(0x12a)](),_0x19d5cf));}for(const _0x666440 of _0x5b9c95['traitObjects']()){if(!_0x666440)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x666440,_0x13c311(0x473)),VisuMZ[_0x13c311(0xbb3)]['JS'][key]&&(_0x19d5cf=VisuMZ[_0x13c311(0xbb3)]['JS'][key]['call'](this,this[_0x13c311(0x6ee)](),_0x5b9c95,this['item'](),_0x19d5cf));}return this[_0x13c311(0x6d5)](_0x5b9c95),_0x19d5cf;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa32)]=function(_0x1c0da5){const _0x4198ae=_0x5a8ff0;if(!this[_0x4198ae(0x12a)]()[_0x4198ae(0x66e)][_0x4198ae(0x4ab)])return 0x0;let _0x4e922b=VisuMZ[_0x4198ae(0xbb3)]['Settings'][_0x4198ae(0x8c7)][_0x4198ae(0x86c)]['call'](this,_0x1c0da5);return _0x4e922b=this['_multipliers'][_0x4198ae(0x66d)]*_0x4e922b+this[_0x4198ae(0x5c2)][_0x4198ae(0x314)],$gameParty[_0x4198ae(0x8ea)]()&&(_0x4e922b=this[_0x4198ae(0x5db)](_0x4e922b,_0x1c0da5)),_0x4e922b;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5db)]=function(_0x3e57fb,_0x4f626a){const _0x3c0d15=_0x5a8ff0;this[_0x3c0d15(0x438)](_0x4f626a),window[_0x3c0d15(0x1d7)]=_0x3e57fb;{const _0x45a828=this[_0x3c0d15(0x6ee)]()[_0x3c0d15(0x75f)]();for(const _0x547e73 of _0x45a828){if(!_0x547e73)continue;if(_0x547e73['note']['match'](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x9544cb=String(RegExp['$1']);try{eval(_0x9544cb);}catch(_0x269ca3){if($gameTemp['isPlaytest']())console['log'](_0x269ca3);}}}}{const _0x2f49ab=_0x4f626a[_0x3c0d15(0x75f)]();for(const _0x539dd7 of _0x2f49ab){if(!_0x539dd7)continue;if(_0x539dd7[_0x3c0d15(0x494)]['match'](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x3c43ab=String(RegExp['$1']);try{eval(_0x3c43ab);}catch(_0x4f897f){if($gameTemp[_0x3c0d15(0x834)]())console[_0x3c0d15(0x630)](_0x4f897f);}}}}return _0x3e57fb=window['rate'],this['clearGlobalVariables'](_0x4f626a),_0x3e57fb;},Game_Action['prototype'][_0x5a8ff0(0x5db)]=function(_0x2df76a,_0x34b0a2){const _0x124259=_0x5a8ff0;this[_0x124259(0x438)](_0x34b0a2);for(const _0x4fe76f of this[_0x124259(0x6ee)]()[_0x124259(0x75f)]()){if(!_0x4fe76f)continue;key=VisuMZ[_0x124259(0xbb3)][_0x124259(0x5f9)](_0x4fe76f,'jsCritRateAsUser'),VisuMZ[_0x124259(0xbb3)]['JS'][key]&&(_0x2df76a=VisuMZ[_0x124259(0xbb3)]['JS'][key][_0x124259(0x31b)](this,this[_0x124259(0x6ee)](),_0x34b0a2,this[_0x124259(0x12a)](),_0x2df76a));}for(const _0x1a5d51 of _0x34b0a2[_0x124259(0x75f)]()){if(!_0x1a5d51)continue;key=VisuMZ[_0x124259(0xbb3)]['createKeyJS'](_0x1a5d51,_0x124259(0x5e9)),VisuMZ[_0x124259(0xbb3)]['JS'][key]&&(_0x2df76a=VisuMZ['BattleCore']['JS'][key][_0x124259(0x31b)](this,this['subject'](),_0x34b0a2,this[_0x124259(0x12a)](),_0x2df76a));}return this['clearGlobalVariables'](_0x34b0a2),_0x2df76a;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7c8)]=function(_0x42e2cc){const _0x30bb9a=_0x5a8ff0;return _0x42e2cc=VisuMZ[_0x30bb9a(0xbb3)]['Settings'][_0x30bb9a(0x8c7)][_0x30bb9a(0xa74)][_0x30bb9a(0x31b)](this,_0x42e2cc),_0x42e2cc=this[_0x30bb9a(0x5c2)][_0x30bb9a(0x160)]*_0x42e2cc+this[_0x30bb9a(0x5c2)][_0x30bb9a(0x150)],_0x42e2cc;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x617)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x931)],Game_Action['prototype'][_0x5a8ff0(0x931)]=function(_0x50d947){const _0x22f2ac=_0x5a8ff0;if(this[_0x22f2ac(0x639)]!==_0x22f2ac(0x22f))return this[_0x22f2ac(0x3d4)](_0x50d947);else return DataManager[_0x22f2ac(0xc20)](this[_0x22f2ac(0x12a)]())===_0x22f2ac(0x933)?VisuMZ['BattleCore']['Game_Action_evalDamageFormula']['call'](this,_0x50d947):this[_0x22f2ac(0xab0)](_0x50d947);},Game_Action['prototype'][_0x5a8ff0(0x163)]=function(_0x17bc12){const _0x5cd38d=_0x5a8ff0;this[_0x5cd38d(0x639)]=_0x17bc12;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3d4)]=function(_0x4435d7){const _0x306d01=_0x5a8ff0,_0x578953=this[_0x306d01(0x12a)](),_0x43289f=_0x578953[_0x306d01(0x66e)][_0x306d01(0x9ec)];_0x578953[_0x306d01(0x66e)][_0x306d01(0x9ec)]=this[_0x306d01(0x639)];let _0x598e2f=VisuMZ[_0x306d01(0xbb3)]['Game_Action_evalDamageFormula'][_0x306d01(0x31b)](this,_0x4435d7);return _0x578953[_0x306d01(0x66e)][_0x306d01(0x9ec)]=_0x43289f,_0x598e2f;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa44)]=function(){const _0xebae31=_0x5a8ff0;if(this[_0xebae31(0x12a)]()[_0xebae31(0x494)][_0xebae31(0x6d8)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x2a7f5f=String(RegExp['$1'])[_0xebae31(0x692)]()[_0xebae31(0xb20)]();return _0x2a7f5f;}return'MANUAL';},Game_Action['prototype'][_0x5a8ff0(0xab0)]=function(_0x31c6b9){const _0x4dc874=_0x5a8ff0,_0x363c3b=DataManager[_0x4dc874(0xc20)](this[_0x4dc874(0x12a)]()),_0x3f6d9c=VisuMZ[_0x4dc874(0xaf6)][_0x363c3b];try{return _0x3f6d9c[_0x4dc874(0xb28)][_0x4dc874(0x31b)](this,_0x31c6b9);}catch(_0x5af0f7){if($gameTemp[_0x4dc874(0x834)]())console[_0x4dc874(0x630)](_0x5af0f7);return VisuMZ[_0x4dc874(0xbb3)][_0x4dc874(0x617)]['call'](this);}},Game_Action[_0x5a8ff0(0xb6e)]['applyArmorModifiers']=function(_0x199378,_0x1d88da){const _0x4761df=_0x5a8ff0;if(this['isCertainHit']())return _0x1d88da;const _0x39ceb2=this[_0x4761df(0x6ee)](),_0xaf2bc3=_0x199378;let _0x591336=[],_0x52b70d=[];_0x591336['push'](this[_0x4761df(0x84a)][_0x4761df(0x802)],this[_0x4761df(0x84a)][_0x4761df(0x3ff)]),_0x52b70d[_0x4761df(0x23b)](this['_armorPenetration'][_0x4761df(0x508)],this[_0x4761df(0x84a)]['arRedRate']);const _0x300760=this[_0x4761df(0x191)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x46db93=this[_0x4761df(0x191)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x1fe7b7=this[_0x4761df(0x191)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1db607=this[_0x4761df(0x191)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x591336=_0x591336['concat'](_0xaf2bc3[_0x4761df(0x75f)]()[_0x4761df(0x5d7)](_0x4eaa1c=>_0x4eaa1c&&_0x4eaa1c[_0x4761df(0x494)][_0x4761df(0x6d8)](_0x300760)?Number(RegExp['$1']):0x0)),_0x52b70d=_0x52b70d[_0x4761df(0xb5d)](_0xaf2bc3[_0x4761df(0x75f)]()[_0x4761df(0x5d7)](_0x115f44=>_0x115f44&&_0x115f44[_0x4761df(0x494)][_0x4761df(0x6d8)](_0x46db93)?Number(RegExp['$1'])/0x64:0x0)),_0x591336=_0x591336[_0x4761df(0xb5d)](_0x39ceb2['traitObjects']()[_0x4761df(0x5d7)](_0x3a30f3=>_0x3a30f3&&_0x3a30f3['note'][_0x4761df(0x6d8)](_0x1fe7b7)?Number(RegExp['$1']):0x0)),_0x52b70d=_0x52b70d[_0x4761df(0xb5d)](_0x39ceb2[_0x4761df(0x75f)]()[_0x4761df(0x5d7)](_0x167116=>_0x167116&&_0x167116['note'][_0x4761df(0x6d8)](_0x1db607)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0x4761df(0x494)]['match'](_0x1fe7b7)&&_0x591336[_0x4761df(0x23b)](Number(RegExp['$1'])),this[_0x4761df(0x12a)]()['note'][_0x4761df(0x6d8)](_0x1db607)&&_0x52b70d['push'](Number(RegExp['$1'])),_0x1d88da=_0x591336[_0x4761df(0x731)]((_0x3bde2d,_0x1fb4a7)=>_0x3bde2d-_0x1fb4a7,_0x1d88da),_0x1d88da>0x0&&(_0x1d88da=_0x52b70d[_0x4761df(0x731)]((_0x15f2b9,_0x25ca66)=>_0x15f2b9*(0x1-_0x25ca66),_0x1d88da)),_0x1d88da;},VisuMZ['BattleCore']['Game_Action_executeDamage']=Game_Action['prototype']['executeDamage'],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x97b)]=function(_0x5e3c30,_0x16b990){const _0x3185f3=_0x5a8ff0;_0x16b990=_0x16b990*this[_0x3185f3(0x5c2)][_0x3185f3(0x1c5)],_0x16b990+=this['_multipliers'][_0x3185f3(0x18d)]*(_0x16b990>=0x0?0x1:-0x1),_0x16b990=this[_0x3185f3(0xaad)](_0x3185f3(0x96e),_0x5e3c30,_0x16b990,![]),_0x16b990=this[_0x3185f3(0xb1e)](_0x16b990),_0x16b990>0x0?_0x16b990=Math[_0x3185f3(0x447)](_0x16b990):_0x16b990=Math[_0x3185f3(0x87f)](_0x16b990),this[_0x3185f3(0x656)]=_0x16b990,this[_0x3185f3(0x858)]=this[_0x3185f3(0x858)]||0x0,this[_0x3185f3(0x858)]+=_0x16b990,VisuMZ['BattleCore']['Game_Action_executeDamage'][_0x3185f3(0x31b)](this,_0x5e3c30,_0x16b990),this[_0x3185f3(0xaad)]('PostDamage%1JS',_0x5e3c30,_0x16b990,!![]);},Game_Action[_0x5a8ff0(0xb6e)]['applyDamageCaps']=function(_0x1e70ec){const _0xb72ed1=_0x5a8ff0;if(this[_0xb72ed1(0x530)]())return _0x1e70ec;return _0x1e70ec=this[_0xb72ed1(0x8c0)](_0x1e70ec),_0x1e70ec=this[_0xb72ed1(0x716)](_0x1e70ec),_0x1e70ec;},Game_Action['prototype'][_0x5a8ff0(0x530)]=function(){const _0x8caad8=_0x5a8ff0,_0x20ab30=/<BYPASS DAMAGE CAP>/i;if(this[_0x8caad8(0x12a)]()[_0x8caad8(0x494)]['match'](_0x20ab30))return!![];if(this[_0x8caad8(0x6ee)]()[_0x8caad8(0x75f)]()[_0x8caad8(0x9b5)](_0x696c02=>_0x696c02&&_0x696c02[_0x8caad8(0x494)]['match'](_0x20ab30)))return!![];return!VisuMZ[_0x8caad8(0xbb3)][_0x8caad8(0xba1)][_0x8caad8(0x8c7)][_0x8caad8(0x8d8)];},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8c0)]=function(_0x6c2db8){const _0x325db1=_0x5a8ff0;if(!VisuMZ[_0x325db1(0xbb3)][_0x325db1(0xba1)][_0x325db1(0x8c7)]['EnableSoftCap'])return _0x6c2db8;const _0x15b1db=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x325db1(0x12a)]()['note'][_0x325db1(0x6d8)](_0x15b1db))return _0x6c2db8;if(this[_0x325db1(0x6ee)]()[_0x325db1(0x75f)]()['some'](_0x3a9f7b=>_0x3a9f7b&&_0x3a9f7b[_0x325db1(0x494)][_0x325db1(0x6d8)](_0x15b1db)))return _0x6c2db8;const _0x153472=_0x6c2db8<0x0?-0x1:0x1;_0x6c2db8=Math[_0x325db1(0x444)](_0x6c2db8);let _0x41a9e0=this['subject']()[_0x325db1(0xa69)]();this['item']()[_0x325db1(0x494)][_0x325db1(0x6d8)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x41a9e0+=Number(RegExp['$1'])/0x64);_0x41a9e0=_0x41a9e0['clamp'](0.01,0x1);const _0x14ec3b=this[_0x325db1(0x59b)](),_0x10859b=_0x41a9e0*_0x14ec3b;if(_0x6c2db8>_0x10859b&&_0x14ec3b>_0x10859b){_0x6c2db8-=_0x10859b;const _0x724156=VisuMZ[_0x325db1(0xbb3)][_0x325db1(0xba1)][_0x325db1(0x8c7)][_0x325db1(0x48e)],_0x27e09b=Math[_0x325db1(0x6dd)](0x1-_0x6c2db8/((_0x14ec3b-_0x10859b)*_0x724156+_0x6c2db8),0.01);_0x6c2db8*=_0x27e09b,_0x6c2db8+=_0x10859b;}return _0x6c2db8*_0x153472;},Game_Action[_0x5a8ff0(0xb6e)]['getHardDamageCap']=function(){const _0x285d78=_0x5a8ff0;return this['item']()[_0x285d78(0x494)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x285d78(0x6ee)]()['hardDamageCap']();},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x716)]=function(_0x4082ee){const _0x57c481=_0x5a8ff0;let _0x3620b5=this['getHardDamageCap']();return _0x4082ee[_0x57c481(0x8b3)](-_0x3620b5,_0x3620b5);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3c7)]=function(){const _0x56d0a4=_0x5a8ff0;if(!this['item']())return![];if(!$gameParty['inBattle']())return![];return(this[_0x56d0a4(0x12a)]()[_0x56d0a4(0x494)]||'')[_0x56d0a4(0x6d8)](/<DISPERSE DAMAGE>/i);},Game_Action['prototype'][_0x5a8ff0(0x504)]=function(_0x377d63){const _0x52c2cd=_0x5a8ff0;if(this[_0x52c2cd(0x3c7)]()){let _0x54316e=BattleManager[_0x52c2cd(0x5a3)];_0x377d63/=_0x54316e[_0x52c2cd(0x6b9)],this[_0x52c2cd(0x701)]()&&(_0x377d63*=this[_0x52c2cd(0x6ee)]()['attackTimesAdd']()+0x1),_0x377d63=_0x377d63>0x0?Math[_0x52c2cd(0x447)](_0x377d63):Math[_0x52c2cd(0x87f)](_0x377d63);}return _0x377d63;},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_makeDamageValueDisperse']=Game_Action[_0x5a8ff0(0xb6e)]['makeDamageValue'],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x445)]=function(_0x2e2da0,_0x2d2318){let _0x41865a=VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse']['call'](this,_0x2e2da0,_0x2d2318);return this['disperseDamage'](_0x41865a);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4f3)]=function(_0x222a30,_0x3aa16c){const _0x5dd764=_0x5a8ff0;let _0x49a624=(_0x222a30[_0x5dd764(0xa2a)]*_0x3aa16c[_0x5dd764(0x7fd)]+_0x3aa16c[_0x5dd764(0x59c)])*_0x222a30[_0x5dd764(0x2e9)];_0x49a624=this['disperseDamage'](_0x49a624),this[_0x5dd764(0x947)]()&&(_0x49a624*=this['subject']()[_0x5dd764(0xc11)]),_0x49a624=Math[_0x5dd764(0x87f)](_0x49a624),_0x49a624!==0x0&&(_0x222a30['gainHp'](_0x49a624),this[_0x5dd764(0x7a8)](_0x222a30));},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3ce)]=function(_0x19577c,_0xc1b6a){const _0xbd778d=_0x5a8ff0;let _0x204f01=(_0x19577c[_0xbd778d(0x2a1)]*_0xc1b6a[_0xbd778d(0x7fd)]+_0xc1b6a[_0xbd778d(0x59c)])*_0x19577c[_0xbd778d(0x2e9)];_0x204f01=this[_0xbd778d(0x504)](_0x204f01),this[_0xbd778d(0x947)]()&&(_0x204f01*=this['subject']()[_0xbd778d(0xc11)]),_0x204f01=Math[_0xbd778d(0x87f)](_0x204f01),_0x204f01!==0x0&&(_0x19577c[_0xbd778d(0xb0b)](_0x204f01),this['makeSuccess'](_0x19577c));},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x715)]=function(_0x212b79,_0x3d561f){const _0x4d73d4=_0x5a8ff0;let _0x2c1c35=Math[_0x4d73d4(0x87f)](_0x3d561f[_0x4d73d4(0x7fd)]);_0x2c1c35=this[_0x4d73d4(0x504)](_0x2c1c35),_0x2c1c35!==0x0&&(_0x212b79[_0x4d73d4(0x567)](_0x2c1c35),this[_0x4d73d4(0x7a8)](_0x212b79));},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_apply']=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x818)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x818)]=function(_0x1fb532){const _0x29062e=_0x5a8ff0;if(_0x1fb532&&_0x1fb532[_0x29062e(0x172)]())_0x1fb532['resetNameTempVisibility']();this[_0x29062e(0xaad)]('PreApply%1JS',_0x1fb532,0x0,!![]),VisuMZ[_0x29062e(0xbb3)][_0x29062e(0xa0c)]['call'](this,_0x1fb532),this[_0x29062e(0xaad)](_0x29062e(0xb87),_0x1fb532,this[_0x29062e(0x656)]||0x0,!![]),this[_0x29062e(0x4f7)](_0x1fb532);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaad)]=function(_0x4068ae,_0x384dc0,_0x374b26,_0x31a643){const _0xedb657=_0x5a8ff0;if(this[_0xedb657(0x5c4)]||this[_0xedb657(0x928)])return;_0x374b26=_0x374b26||0x0;const _0x1c9ed4=_0x374b26,_0x5a79d5=VisuMZ['BattleCore'][_0xedb657(0xba1)][_0xedb657(0x2dc)],_0x4d4fca=_0x4068ae[_0xedb657(0x907)]('');if(_0x5a79d5[_0x4d4fca]){_0x374b26=_0x5a79d5[_0x4d4fca][_0xedb657(0x31b)](this,_0x374b26,_0x384dc0);if(_0x31a643)_0x374b26=_0x1c9ed4;}let _0x211b21=VisuMZ[_0xedb657(0xbb3)][_0xedb657(0x5f9)](this['item'](),_0x4068ae[_0xedb657(0x907)](''));if(VisuMZ[_0xedb657(0xbb3)]['JS'][_0x211b21]){_0x374b26=VisuMZ[_0xedb657(0xbb3)]['JS'][_0x211b21][_0xedb657(0x31b)](this,this[_0xedb657(0x6ee)](),_0x384dc0,this[_0xedb657(0x12a)](),_0x374b26);if(_0x31a643)_0x374b26=_0x1c9ed4;}for(const _0x32963d of this[_0xedb657(0x6ee)]()[_0xedb657(0x75f)]()){if(!_0x32963d)continue;_0x211b21=VisuMZ['BattleCore'][_0xedb657(0x5f9)](_0x32963d,_0x4068ae[_0xedb657(0x907)]('AsUser'));if(VisuMZ[_0xedb657(0xbb3)]['JS'][_0x211b21]){_0x374b26=VisuMZ[_0xedb657(0xbb3)]['JS'][_0x211b21][_0xedb657(0x31b)](this,this[_0xedb657(0x6ee)](),_0x384dc0,_0x32963d,_0x374b26);if(_0x31a643)_0x374b26=_0x1c9ed4;}}for(const _0x86ad4 of _0x384dc0[_0xedb657(0x75f)]()){if(!_0x86ad4)continue;_0x211b21=VisuMZ[_0xedb657(0xbb3)][_0xedb657(0x5f9)](_0x86ad4,_0x4068ae['format'](_0xedb657(0xbcd)));if(VisuMZ[_0xedb657(0xbb3)]['JS'][_0x211b21]){_0x374b26=VisuMZ[_0xedb657(0xbb3)]['JS'][_0x211b21][_0xedb657(0x31b)](this,this[_0xedb657(0x6ee)](),_0x384dc0,_0x86ad4,_0x374b26);if(_0x31a643)_0x374b26=_0x1c9ed4;}}return _0x374b26;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9f7)]=function(_0x55fa6f){const _0x1325d6=_0x5a8ff0,_0x1f994b=this[_0x1325d6(0x858)]||0x0,_0x5eb107=VisuMZ[_0x1325d6(0xbb3)]['Settings'][_0x1325d6(0x2dc)],_0x179f06=_0x55fa6f[_0x1325d6(0x907)]('');_0x5eb107[_0x179f06]&&_0x5eb107[_0x179f06][_0x1325d6(0x31b)](this,_0x1f994b);let _0x2b3e5a=VisuMZ[_0x1325d6(0xbb3)][_0x1325d6(0x5f9)](this[_0x1325d6(0x12a)](),_0x55fa6f);VisuMZ[_0x1325d6(0xbb3)]['JS'][_0x2b3e5a]&&VisuMZ[_0x1325d6(0xbb3)]['JS'][_0x2b3e5a]['call'](this,this[_0x1325d6(0x6ee)](),this[_0x1325d6(0x6ee)](),this['item'](),_0x1f994b);for(const _0x27fc8e of this[_0x1325d6(0x6ee)]()[_0x1325d6(0x75f)]()){if(!_0x27fc8e)continue;_0x2b3e5a=VisuMZ[_0x1325d6(0xbb3)][_0x1325d6(0x5f9)](_0x27fc8e,_0x55fa6f),VisuMZ[_0x1325d6(0xbb3)]['JS'][_0x2b3e5a]&&VisuMZ[_0x1325d6(0xbb3)]['JS'][_0x2b3e5a][_0x1325d6(0x31b)](this,this[_0x1325d6(0x6ee)](),this[_0x1325d6(0x6ee)](),_0x27fc8e,_0x1f994b);}},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x345)]=function(){const _0x5387e9=_0x5a8ff0;return VisuMZ['BattleCore'][_0x5387e9(0xba1)][_0x5387e9(0x2dc)][_0x5387e9(0x499)]['call'](this);},Game_Action[_0x5a8ff0(0xb6e)]['allowRandomSpeed']=function(){const _0x37f5d3=_0x5a8ff0;return VisuMZ[_0x37f5d3(0xbb3)][_0x37f5d3(0xba1)][_0x37f5d3(0x2dc)]['AllowRandomSpeed'];},Game_Action[_0x5a8ff0(0xb6e)]['isCustomBattleScope']=function(){const _0xb9e659=_0x5a8ff0;if(this[_0xb9e659(0x991)]===_0xb9e659(0xb70))return![];if(this[_0xb9e659(0x991)]===_0xb9e659(0x5be))return![];if(!this[_0xb9e659(0x12a)]())return![];return this['item']()['note'][_0xb9e659(0x6d8)](/<JS TARGETS>/i);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x627)]=function(){const _0x4919c2=_0x5a8ff0;if(this[_0x4919c2(0x991)]===_0x4919c2(0xb70))return![];if(this[_0x4919c2(0x991)]===_0x4919c2(0x5be))return![];if(!this[_0x4919c2(0x8e6)]&&this[_0x4919c2(0x6ee)]()[_0x4919c2(0x82e)]())return![];if(this['isCustomBattleScope']())return!![];if(!this[_0x4919c2(0x12a)]())return![];return typeof this[_0x4919c2(0x12a)]()[_0x4919c2(0x9e4)]===_0x4919c2(0x5d9);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb3e)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x606)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x606)]=function(){const _0x48e462=_0x5a8ff0;if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x48e462(0x991)]===_0x48e462(0x5be))return!![];return this[_0x48e462(0x627)]()&&!this['isCustomBattleScope']()?this[_0x48e462(0x9dc)]():VisuMZ['BattleCore'][_0x48e462(0xb3e)][_0x48e462(0x31b)](this);},Game_Action['prototype'][_0x5a8ff0(0x9dc)]=function(){const _0x3fe147=_0x5a8ff0,_0x53f9d1=String(this[_0x3fe147(0x12a)]()[_0x3fe147(0x9e4)]);if(_0x53f9d1[_0x3fe147(0x6d8)](/ANY/i))return!![];return _0x53f9d1[_0x3fe147(0x6d8)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x5a8ff0(0x6a9)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8f7)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8f7)]=function(){const _0xcca729=_0x5a8ff0;if(this[_0xcca729(0x991)]==='all\x20actors')return!![];if(this[_0xcca729(0x991)]===_0xcca729(0x5be))return![];return this[_0xcca729(0x627)]()&&!this[_0xcca729(0xbc6)]()?this[_0xcca729(0x548)]():VisuMZ[_0xcca729(0xbb3)]['Game_Action_isForFriend'][_0xcca729(0x31b)](this);},Game_Action[_0x5a8ff0(0xb6e)]['isForFriendBattleCore']=function(){const _0xbd6eb0=_0x5a8ff0,_0x15af62=String(this['item']()[_0xbd6eb0(0x9e4)]);return _0x15af62[_0xbd6eb0(0x6d8)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x5a8ff0(0xb6e)]['isForAnyone']=function(){const _0x32ace1=_0x5a8ff0;if(this[_0x32ace1(0x627)]()&&!this[_0x32ace1(0xbc6)]()){const _0x3e1cbd=String(this['item']()['scope']);return _0x3e1cbd[_0x32ace1(0x6d8)](/(?:ENEMY|FOE)/i)&&_0x3e1cbd[_0x32ace1(0x6d8)](/OR/i)&&_0x3e1cbd[_0x32ace1(0x6d8)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x5a8ff0(0xb6e)]['isForAnyoneFocusFriends']=function(){const _0x23b719=_0x5a8ff0;if(this['isForAnyone']()){const _0x400d4a=String(this[_0x23b719(0x12a)]()[_0x23b719(0x9e4)]);if(_0x400d4a[_0x23b719(0x6d8)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action['prototype']['isForAnyoneFocusOpponents']=function(){const _0xcae8c9=_0x5a8ff0;if(this['isForAnyone']()){const _0x2767ac=String(this[_0xcae8c9(0x12a)]()['scope']);if(_0x2767ac[_0xcae8c9(0x6d8)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ['BattleCore']['Game_Action_isForAliveFriend']=Game_Action['prototype']['isForAliveFriend'],Game_Action['prototype'][_0x5a8ff0(0x6c2)]=function(){const _0x2bec5c=_0x5a8ff0;if(this[_0x2bec5c(0x991)]===_0x2bec5c(0xb70))return!![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x2bec5c(0x9bb)]():VisuMZ[_0x2bec5c(0xbb3)][_0x2bec5c(0x64c)][_0x2bec5c(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x1d4)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb59)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb59)]=function(){const _0xb75e30=_0x5a8ff0;if(this[_0xb75e30(0x991)]===_0xb75e30(0xb70))return VisuMZ[_0xb75e30(0xbb3)][_0xb75e30(0x1d4)]['call'](this);return VisuMZ[_0xb75e30(0xbb3)]['Game_Action_isForDeadFriend']['call'](this);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9bb)]=function(){if(this['isForAnyone']())return!![];return![];},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x750)]=function(){const _0x3202b7=_0x5a8ff0;return this[_0x3202b7(0x12a)]()&&this[_0x3202b7(0x12a)]()[_0x3202b7(0x494)][_0x3202b7(0x6d8)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x951)]=Game_Action[_0x5a8ff0(0xb6e)]['isForOne'],Game_Action[_0x5a8ff0(0xb6e)]['isForOne']=function(){const _0x107ce5=_0x5a8ff0;if(this['_targetBattlerKey']===_0x107ce5(0xb70))return![];if(this[_0x107ce5(0x991)]===_0x107ce5(0x5be))return![];return this[_0x107ce5(0x627)]()&&!this[_0x107ce5(0xbc6)]()?this[_0x107ce5(0x6a6)]():VisuMZ['BattleCore'][_0x107ce5(0x951)][_0x107ce5(0x31b)](this);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6a6)]=function(){const _0x4b7d57=_0x5a8ff0;if(this[_0x4b7d57(0x7fc)]())return!![];return![];},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_isForRandom']=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1d6)],Game_Action[_0x5a8ff0(0xb6e)]['isForRandom']=function(){const _0x3fbc63=_0x5a8ff0;if(this['_targetBattlerKey']==='all\x20actors')return![];if(this[_0x3fbc63(0x991)]===_0x3fbc63(0x5be))return![];return this[_0x3fbc63(0x627)]()&&!this['isCustomBattleScope']()?this[_0x3fbc63(0x5f0)]():VisuMZ[_0x3fbc63(0xbb3)]['Game_Action_isForRandom'][_0x3fbc63(0x31b)](this);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5f0)]=function(){const _0x430a47=_0x5a8ff0,_0x13d9c9=String(this[_0x430a47(0x12a)]()[_0x430a47(0x9e4)]);return _0x13d9c9['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_isForAll']=Game_Action['prototype']['isForAll'],Game_Action['prototype']['isForAll']=function(){const _0x282ca7=_0x5a8ff0;if(this[_0x282ca7(0x991)]===_0x282ca7(0xb70))return!![];if(this[_0x282ca7(0x991)]===_0x282ca7(0x5be))return!![];return VisuMZ[_0x282ca7(0xbb3)][_0x282ca7(0x2aa)]['call'](this);},Game_Action[_0x5a8ff0(0xb6e)]['canSingleOrMultipleSelect']=function(){const _0x3db2dc=_0x5a8ff0;if(!this[_0x3db2dc(0x12a)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x3db2dc(0x12a)]()['note']||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x9ea)]=Game_Action[_0x5a8ff0(0xb6e)]['testApply'],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x95a)]=function(_0x4245d2){const _0x301aef=_0x5a8ff0;if(this['isForNotUser']()&&_0x4245d2===this[_0x301aef(0x6ee)]())return![];return VisuMZ[_0x301aef(0xbb3)][_0x301aef(0x9ea)][_0x301aef(0x31b)](this,_0x4245d2);},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_itemTargetCandidates']=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8db)],Game_Action[_0x5a8ff0(0xb6e)]['itemTargetCandidates']=function(){const _0xa00491=_0x5a8ff0,_0x459e36=VisuMZ[_0xa00491(0xbb3)][_0xa00491(0xafb)][_0xa00491(0x31b)](this);if(this[_0xa00491(0x750)]())_0x459e36[_0xa00491(0xc1d)](this[_0xa00491(0x6ee)]());return _0x459e36;},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_needsSelection']=Game_Action[_0x5a8ff0(0xb6e)]['needsSelection'],Game_Action[_0x5a8ff0(0xb6e)]['needsSelection']=function(){const _0x46d966=_0x5a8ff0;return this[_0x46d966(0x627)]()&&!this[_0x46d966(0xbc6)]()?this['needsSelectionBattleCore']():VisuMZ['BattleCore'][_0x46d966(0x856)][_0x46d966(0x31b)](this);},Game_Action['prototype'][_0x5a8ff0(0x8e9)]=function(){const _0x7a56de=_0x5a8ff0,_0x1ab855=String(this['item']()[_0x7a56de(0x9e4)]);if(_0x1ab855[_0x7a56de(0x6d8)](/RANDOM/i))return![];if(_0x1ab855[_0x7a56de(0x6d8)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x1ab855[_0x7a56de(0x6d8)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x1ab855[_0x7a56de(0x6d8)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x1ab855[_0x7a56de(0x6d8)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ[_0x7a56de(0xbb3)][_0x7a56de(0x856)][_0x7a56de(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x267)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x774)],Game_Action['prototype'][_0x5a8ff0(0x774)]=function(){const _0x2ed2f0=_0x5a8ff0;let _0x808847=[];return this[_0x2ed2f0(0x627)]()?this['isCustomBattleScope']()?_0x808847=this[_0x2ed2f0(0xa24)]():_0x808847=this[_0x2ed2f0(0x35e)]():_0x808847=VisuMZ[_0x2ed2f0(0xbb3)][_0x2ed2f0(0x267)][_0x2ed2f0(0x31b)](this),_0x808847=this['applyTargetFilters'](_0x808847),_0x808847;},Game_Action[_0x5a8ff0(0xb6e)]['isSubjectValidForAnyoneSelect']=function(){const _0x144ab8=_0x5a8ff0;return this[_0x144ab8(0x6ee)]()[_0x144ab8(0x34b)]()&&!this[_0x144ab8(0x6ee)]()['isAutoBattle']();},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa24)]=function(){const _0x5a7114=_0x5a8ff0,_0x69f98=VisuMZ[_0x5a7114(0xbb3)][_0x5a7114(0x5f9)](this[_0x5a7114(0x12a)](),_0x5a7114(0x885));if(VisuMZ[_0x5a7114(0xbb3)]['JS'][_0x69f98]){targets=VisuMZ['BattleCore']['Game_Action_makeTargets'][_0x5a7114(0x31b)](this);const _0x3c55aa=VisuMZ['BattleCore'][_0x5a7114(0x5f9)](this['item'](),_0x5a7114(0x885));return targets=VisuMZ['BattleCore']['JS'][_0x3c55aa]['call'](this,this['subject'](),targets),this[_0x5a7114(0xb84)](targets);}return this[_0x5a7114(0x35e)]();},Game_Action['prototype']['makeTargetsBattleCore']=function(){const _0x30a64a=_0x5a8ff0;let _0x275e70=[];const _0x2fcc28=String(this[_0x30a64a(0x12a)]()[_0x30a64a(0x9e4)]);if(this[_0x30a64a(0x1c7)]())return this['isSubjectValidForAnyoneSelect']()?(_0x275e70=this[_0x30a64a(0x88a)](),this[_0x30a64a(0xb84)](_0x275e70)):(this['_targetIndex']=-0x1,_0x275e70['push'](...this['targetsForOpponents']()),this[_0x30a64a(0xb84)](_0x275e70));if(this['isForAnyoneFocusFriends']()){if(this[_0x30a64a(0x910)]())return _0x275e70=this[_0x30a64a(0x88a)](),this['repeatTargets'](_0x275e70);else{if(Imported[_0x30a64a(0x416)]){if(VisuMZ[_0x30a64a(0x983)][_0x30a64a(0x978)]<1.19){let _0xcbc6d0='';_0xcbc6d0+=_0x30a64a(0x7f7),_0xcbc6d0+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0xcbc6d0+=_0x30a64a(0xacc),alert(_0xcbc6d0),SceneManager[_0x30a64a(0xad2)]();}}return this[_0x30a64a(0x719)]=-0x1,_0x275e70[_0x30a64a(0x23b)](...this[_0x30a64a(0x7fe)]()),this[_0x30a64a(0xb84)](_0x275e70);}}if(_0x2fcc28[_0x30a64a(0x6d8)](/(\d+) RANDOM ANY/i)){let _0x21fa05=Number(RegExp['$1']);while(_0x21fa05--){const _0x381916=Math[_0x30a64a(0x8c8)](0x2)===0x0?this[_0x30a64a(0xa3a)]():this[_0x30a64a(0x6b8)]();_0x275e70[_0x30a64a(0x23b)](_0x381916[_0x30a64a(0x3b5)]());}return this[_0x30a64a(0xb84)](_0x275e70);}if(_0x2fcc28[_0x30a64a(0x6d8)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x4b1015=Number(RegExp['$1']);while(_0x4b1015--){_0x275e70[_0x30a64a(0x23b)](this[_0x30a64a(0xa3a)]()[_0x30a64a(0x3b5)]());}return this['repeatTargets'](_0x275e70);}if(_0x2fcc28[_0x30a64a(0x6d8)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x36662a=Number(RegExp['$1']);while(_0x36662a--){_0x275e70[_0x30a64a(0x23b)](this['friendsUnit']()[_0x30a64a(0x3b5)]());}return this[_0x30a64a(0xb84)](_0x275e70);}if(_0x2fcc28[_0x30a64a(0x6d8)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x275e70['push'](...this[_0x30a64a(0x6b8)]()[_0x30a64a(0x4c4)]()[_0x30a64a(0x6e0)](_0x40c457=>_0x40c457!==this[_0x30a64a(0x6ee)]())),this['repeatTargets'](_0x275e70);return VisuMZ[_0x30a64a(0xbb3)][_0x30a64a(0x267)][_0x30a64a(0x31b)](this);},Game_Action['prototype'][_0x5a8ff0(0x800)]=function(_0x36079c){const _0x9fa2e8=_0x5a8ff0,_0x540be8=[];for(let _0x22dada=0x0;_0x22dada<this[_0x9fa2e8(0x38e)]();_0x22dada++){_0x540be8[_0x9fa2e8(0x23b)](_0x36079c['trueRandomTarget']());}return _0x540be8;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x81d)]=function(_0x48a611){const _0x17fd8a=_0x5a8ff0;if(!this[_0x17fd8a(0x12a)]())return _0x48a611;const _0x3c70e6=this[_0x17fd8a(0x12a)]()[_0x17fd8a(0x494)];if(this[_0x17fd8a(0x750)]()){this[_0x17fd8a(0x7b1)]()&&_0x48a611[_0x17fd8a(0xc1d)](this[_0x17fd8a(0x6ee)]());if(_0x48a611['includes'](this[_0x17fd8a(0x6ee)]())){const _0x5a6801=this[_0x17fd8a(0x6b8)]()[_0x17fd8a(0x4c4)]()[_0x17fd8a(0xc1d)](this[_0x17fd8a(0x6ee)]());if(_0x5a6801[_0x17fd8a(0x6b9)]>0x0){_0x5a6801[_0x17fd8a(0x46d)]((_0x3ea15c,_0x1e8ce6)=>_0x3ea15c[_0x17fd8a(0x24b)]()-_0x1e8ce6[_0x17fd8a(0x24b)]());while(_0x48a611[_0x17fd8a(0x597)](this['subject']())){const _0x628f13=_0x48a611[_0x17fd8a(0x70f)](this[_0x17fd8a(0x6ee)]());_0x48a611[_0x628f13]=_0x5a6801[Math['randomInt'](_0x5a6801[_0x17fd8a(0x6b9)])];}}else _0x48a611[_0x17fd8a(0xc1d)](this[_0x17fd8a(0x6ee)]());}}return _0x48a611;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x653)]=Game_Action['prototype'][_0x5a8ff0(0x741)],Game_Action['prototype'][_0x5a8ff0(0x741)]=function(_0xa816ae,_0x357884){const _0xeb2606=_0x5a8ff0;VisuMZ[_0xeb2606(0xbb3)]['Game_Action_itemEffectAddAttackState'][_0xeb2606(0x31b)](this,_0xa816ae,_0x357884);if(!_0xa816ae['isImmortal']())return;for(const _0x504557 of this[_0xeb2606(0x6ee)]()[_0xeb2606(0x1ed)]()){if(_0x504557===_0xa816ae[_0xeb2606(0xafe)]()){let _0x3c13e8=_0x357884[_0xeb2606(0x7fd)];_0x3c13e8*=_0xa816ae[_0xeb2606(0x812)](_0x504557),_0x3c13e8*=this[_0xeb2606(0x6ee)]()[_0xeb2606(0x16c)](_0x504557),_0x3c13e8*=this[_0xeb2606(0x451)](_0xa816ae),Math[_0xeb2606(0x539)]()<_0x3c13e8&&(_0xa816ae[_0xeb2606(0x890)]=!![],this['makeSuccess'](_0xa816ae));}}},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9d1)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9d1)]=function(_0x2764ad,_0x538097){const _0x2589a2=_0x5a8ff0;VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState']['call'](this,_0x2764ad,_0x538097);if(!_0x2764ad[_0x2589a2(0x668)]())return;if(_0x538097['dataId']!==_0x2764ad[_0x2589a2(0xafe)]())return;let _0x2316e7=_0x538097['value1'];!this[_0x2589a2(0x593)]()&&(_0x2316e7*=_0x2764ad[_0x2589a2(0x812)](_0x538097['dataId']),_0x2316e7*=this[_0x2589a2(0x451)](_0x2764ad)),Math['random']()<_0x2316e7&&(_0x2764ad[_0x2589a2(0x890)]=!![],this['makeSuccess'](_0x2764ad));},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_applyGlobal']=Game_Action['prototype']['applyGlobal'],Game_Action['prototype'][_0x5a8ff0(0x66b)]=function(){const _0x3fa6af=_0x5a8ff0;VisuMZ[_0x3fa6af(0xbb3)][_0x3fa6af(0x691)][_0x3fa6af(0x31b)](this),this[_0x3fa6af(0xb65)](),this[_0x3fa6af(0x66f)]();},Game_Action[_0x5a8ff0(0xb6e)]['applyGlobalCommonEventNotetags']=function(){const _0x2a6bb8=_0x5a8ff0;if(!SceneManager[_0x2a6bb8(0x5c8)]())return;const _0x5a8f07=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x1eb82a=this[_0x2a6bb8(0x12a)]()[_0x2a6bb8(0x494)][_0x2a6bb8(0x6d8)](_0x5a8f07);if(_0x1eb82a)for(const _0x371988 of _0x1eb82a){if(!_0x371988)continue;_0x371988[_0x2a6bb8(0x6d8)](_0x5a8f07);const _0x2f1465=String(RegExp['$1'])[_0x2a6bb8(0x194)](',')[_0x2a6bb8(0x5d7)](_0xa604fb=>String(_0xa604fb)[_0x2a6bb8(0xb20)]()),_0x5c9de4=_0x2f1465[_0x2a6bb8(0x5d7)](_0x167c42=>DataManager[_0x2a6bb8(0x29b)](_0x167c42));for(const _0x108da2 of _0x5c9de4){const _0x1a3044=$dataCommonEvents[_0x108da2];_0x1a3044&&$gameTemp[_0x2a6bb8(0xa10)](_0x108da2);}}},DataManager['getCommonEventIdWithName']=function(_0x369177){const _0x17839c=_0x5a8ff0;_0x369177=_0x369177[_0x17839c(0x692)]()[_0x17839c(0xb20)](),this[_0x17839c(0x754)]=this['_commonEventIDs']||{};if(this['_commonEventIDs'][_0x369177])return this[_0x17839c(0x754)][_0x369177];for(const _0x578a26 of $dataCommonEvents){if(!_0x578a26)continue;let _0x33f173=_0x578a26['name'];_0x33f173=_0x33f173[_0x17839c(0xa45)](/\x1I\[(\d+)\]/gi,''),_0x33f173=_0x33f173[_0x17839c(0xa45)](/\\I\[(\d+)\]/gi,''),this[_0x17839c(0x754)][_0x33f173[_0x17839c(0x692)]()['trim']()]=_0x578a26['id'];}return this['_commonEventIDs'][_0x369177]||0x0;},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x66f)]=function(){const _0x5ac230=_0x5a8ff0;if(!SceneManager[_0x5ac230(0x5c8)]())return;const _0x45b555=VisuMZ['BattleCore'][_0x5ac230(0xba1)][_0x5ac230(0x2dc)];_0x45b555[_0x5ac230(0x3ac)]&&$gameSwitches[_0x5ac230(0xa20)](_0x45b555[_0x5ac230(0x3ac)],![]),_0x45b555[_0x5ac230(0x41d)]&&$gameSwitches[_0x5ac230(0xa20)](_0x45b555['SwitchMissEvade'],![]),_0x45b555[_0x5ac230(0x872)]&&$gameVariables[_0x5ac230(0xa20)](_0x45b555[_0x5ac230(0x872)],0x0),_0x45b555[_0x5ac230(0x423)]&&$gameVariables[_0x5ac230(0xa20)](_0x45b555[_0x5ac230(0x423)],0x0);},Game_Action[_0x5a8ff0(0xb6e)]['applyResultSwitches']=function(_0x3702e5){const _0x4d7635=_0x5a8ff0;if(!SceneManager[_0x4d7635(0x5c8)]())return;if(!_0x3702e5)return;const _0x4176c8=_0x3702e5['result'](),_0x62ff0c=VisuMZ[_0x4d7635(0xbb3)][_0x4d7635(0xba1)][_0x4d7635(0x2dc)];_0x62ff0c[_0x4d7635(0x3ac)]&&_0x4176c8[_0x4d7635(0x4ab)]&&$gameSwitches['setValue'](_0x62ff0c[_0x4d7635(0x3ac)],!![]);_0x62ff0c[_0x4d7635(0x41d)]&&(_0x4176c8[_0x4d7635(0x37b)]||_0x4176c8['evaded'])&&$gameSwitches[_0x4d7635(0xa20)](_0x62ff0c[_0x4d7635(0x41d)],!![]);if(_0x62ff0c[_0x4d7635(0x872)]){let _0x1fabd3=$gameVariables[_0x4d7635(0x7de)](_0x62ff0c[_0x4d7635(0x872)]);_0x4176c8[_0x4d7635(0x710)]>0x0&&(_0x1fabd3+=Math[_0x4d7635(0x444)](_0x4176c8[_0x4d7635(0x710)])),$gameVariables[_0x4d7635(0xa20)](_0x62ff0c['VariableDmg'],_0x1fabd3);}if(_0x62ff0c[_0x4d7635(0x423)]){let _0x5b2cf1=$gameVariables[_0x4d7635(0x7de)](_0x62ff0c[_0x4d7635(0x423)]);_0x4176c8['hpDamage']<0x0&&(_0x5b2cf1+=Math[_0x4d7635(0x444)](_0x4176c8['hpDamage'])),$gameVariables['setValue'](_0x62ff0c[_0x4d7635(0x423)],_0x5b2cf1);}},VisuMZ[_0x5a8ff0(0xbb3)]['LifeStealRegExp']={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6d9)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x659)],Game_Action['prototype'][_0x5a8ff0(0x659)]=function(_0x22fcbf,_0x526f83){const _0x16c274=_0x5a8ff0;VisuMZ[_0x16c274(0xbb3)][_0x16c274(0x6d9)][_0x16c274(0x31b)](this,_0x22fcbf,_0x526f83);!this['isDrain']()&&_0x22fcbf&&_0x22fcbf[_0x16c274(0xa41)]()[_0x16c274(0x710)]>0x0&&this[_0x16c274(0x32b)]('HP',_0x22fcbf,_0x22fcbf[_0x16c274(0xa41)]()[_0x16c274(0x710)]);if(_0x22fcbf){this[_0x16c274(0x4ce)]=this[_0x16c274(0x4ce)]||{};const _0x26a49a=_0x22fcbf[_0x16c274(0xb72)]();this['_executeHpDamage'][_0x26a49a]=_0x526f83;}},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5a1)]=function(_0x57fc69){const _0x28c3c5=_0x5a8ff0;this['_executeHpDamage']=this[_0x28c3c5(0x4ce)]||{};const _0xa2823a=_0x57fc69[_0x28c3c5(0xb72)]();return this[_0x28c3c5(0x4ce)][_0xa2823a]||0x0;},VisuMZ['BattleCore'][_0x5a8ff0(0x9bd)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa88)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa88)]=function(_0x265cc1,_0x540a58){const _0x556fe1=_0x5a8ff0;VisuMZ[_0x556fe1(0xbb3)][_0x556fe1(0x9bd)][_0x556fe1(0x31b)](this,_0x265cc1,_0x540a58),!this[_0x556fe1(0x686)]()&&_0x265cc1&&_0x265cc1['result']()['mpDamage']>0x0&&this[_0x556fe1(0x32b)]('MP',_0x265cc1,_0x265cc1[_0x556fe1(0xa41)]()['mpDamage']);},Game_Action['prototype'][_0x5a8ff0(0x32b)]=function(_0x1bd5e7,_0x2fa192,_0x487b2c){const _0x18c518=_0x5a8ff0;_0x1bd5e7=_0x1bd5e7[_0x18c518(0x692)]()[_0x18c518(0xb20)]();const _0x5113fb=this[_0x18c518(0x803)](_0x1bd5e7,_0x2fa192);if(_0x5113fb<=0x0)return;const _0x521654=Math[_0x18c518(0xb41)](_0x487b2c*_0x5113fb);if(_0x521654<=0x0)return;let _0x1410cc=this[_0x18c518(0x6ee)]();if(this[_0x18c518(0x4d1)])_0x1410cc=this[_0x18c518(0x4d1)];const _0x2d63a6=_0x2fa192['isNegativeLifeSteal'](_0x1bd5e7)?-0x1:0x1;if(_0x1bd5e7==='HP')_0x1410cc[_0x18c518(0xbf7)](_0x2d63a6*_0x521654);if(_0x1bd5e7==='MP')_0x1410cc[_0x18c518(0xb0b)](_0x2d63a6*_0x521654);},Game_Action['prototype'][_0x5a8ff0(0x803)]=function(_0x4645ab,_0x2131c3){const _0x24f73d=_0x5a8ff0;if(this[_0x24f73d(0x7a4)](_0x4645ab))return 0x0;if(this[_0x24f73d(0x6ee)]()[_0x24f73d(0x5a7)](_0x4645ab))return 0x0;if(_0x2131c3[_0x24f73d(0xbb5)](_0x4645ab))return 0x0;let _0x15ef92=0x0;return _0x15ef92+=this['itemLifeStealRate'](_0x4645ab),_0x15ef92+=this[_0x24f73d(0x6ee)]()[_0x24f73d(0x803)](_0x4645ab,this[_0x24f73d(0x12a)]()['hitType']),_0x15ef92[_0x24f73d(0x8b3)](0x0,0x1);},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7a4)]=function(_0x56b860){const _0x4d2118=_0x5a8ff0;_0x56b860=_0x56b860[_0x4d2118(0x692)]()[_0x4d2118(0xb20)]();const _0x5ac13e=VisuMZ['BattleCore'][_0x4d2118(0x747)],_0x2f772b=this['item']()[_0x4d2118(0x494)]||'';if(_0x2f772b['match'](_0x5ac13e[_0x4d2118(0x779)]))return!![];if(_0x56b860==='HP'&&_0x2f772b[_0x4d2118(0x6d8)](_0x5ac13e[_0x4d2118(0x5a4)]))return!![];if(_0x56b860==='MP'&&_0x2f772b[_0x4d2118(0x6d8)](_0x5ac13e[_0x4d2118(0xbd7)]))return!![];return![];},Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x354)]=function(_0x501b92){const _0x19d6a4=_0x5a8ff0,_0x276e75=VisuMZ[_0x19d6a4(0xbb3)][_0x19d6a4(0x747)],_0x4af9c9=this[_0x19d6a4(0x12a)]()[_0x19d6a4(0x494)]||'';_0x501b92=_0x501b92[_0x19d6a4(0x692)]()[_0x19d6a4(0xb20)]();const _0x4baf4f=_0x4af9c9['match'](_0x276e75[_0x19d6a4(0xae1)]);if(_0x4baf4f)for(const _0x30af2d of _0x4baf4f){_0x30af2d[_0x19d6a4(0x6d8)](_0x276e75['lifeSteaItem']);const _0x4947e5=String(RegExp['$1'])['toUpperCase']()[_0x19d6a4(0xb20)](),_0x5bd1cb=Number(RegExp['$2'])*0.01;if(_0x4947e5!==_0x501b92)continue;return _0x5bd1cb;}return 0x0;},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x803)]=function(_0x5d98f5,_0x4d5511){const _0xf3efc=_0x5a8ff0,_0x12aea8=VisuMZ[_0xf3efc(0xbb3)][_0xf3efc(0x747)];let _0x303c41=0x0;_0x5d98f5=_0x5d98f5['toUpperCase']()[_0xf3efc(0xb20)]();for(const _0x355886 of this[_0xf3efc(0x75f)]()){if(!_0x355886)continue;const _0x4e967e=_0x355886['note']||'',_0x5a9282=_0x4e967e[_0xf3efc(0x6d8)](_0x12aea8[_0xf3efc(0xa28)]);if(_0x5a9282)for(const _0x47af85 of _0x5a9282){_0x47af85[_0xf3efc(0x6d8)](_0x12aea8[_0xf3efc(0xa28)]);const _0x4fa681=String(RegExp['$1'])['toUpperCase']()[_0xf3efc(0xb20)](),_0x37855b=String(RegExp['$2']),_0xb05e7d=Number(RegExp['$3'])*0.01;if(_0x4fa681!==_0x5d98f5)continue;if(_0x4d5511===Game_Action[_0xf3efc(0x40d)]&&_0x37855b[_0xf3efc(0x6d8)](/CERTAIN/i))_0x303c41+=_0xb05e7d;else{if(_0x4d5511===Game_Action[_0xf3efc(0xb81)]&&_0x37855b['match'](/PHYS/i))_0x303c41+=_0xb05e7d;else _0x4d5511===Game_Action['HITTYPE_MAGICAL']&&_0x37855b['match'](/MAGIC/i)&&(_0x303c41+=_0xb05e7d);}}}return _0x303c41;},Game_BattlerBase['prototype'][_0x5a8ff0(0x5a7)]=function(_0xa29a33){const _0x5ce508=_0x5a8ff0;_0xa29a33=_0xa29a33[_0x5ce508(0x692)]()[_0x5ce508(0xb20)]();const _0x3fa2c7=VisuMZ[_0x5ce508(0xbb3)][_0x5ce508(0x747)];for(const _0x24a347 of this[_0x5ce508(0x75f)]()){if(!_0x24a347)continue;const _0xec437a=_0x24a347[_0x5ce508(0x494)]||'';if(_0xec437a['match'](_0x3fa2c7[_0x5ce508(0xb51)]))return!![];if(_0xa29a33==='HP'&&_0xec437a[_0x5ce508(0x6d8)](_0x3fa2c7['disarmHpLifeSteal']))return!![];if(_0xa29a33==='MP'&&_0xec437a[_0x5ce508(0x6d8)](_0x3fa2c7[_0x5ce508(0x80f)]))return!![];}return![];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2f1)]=function(_0x18a1e7){const _0x2ab8b7=_0x5a8ff0;_0x18a1e7=_0x18a1e7[_0x2ab8b7(0x692)]()[_0x2ab8b7(0xb20)]();const _0x4512f8=VisuMZ['BattleCore']['LifeStealRegExp'];for(const _0x37500e of this[_0x2ab8b7(0x75f)]()){if(!_0x37500e)continue;const _0x492404=_0x37500e[_0x2ab8b7(0x494)]||'';if(_0x492404[_0x2ab8b7(0x6d8)](_0x4512f8[_0x2ab8b7(0x277)]))return!![];if(_0x18a1e7==='HP'&&_0x492404['match'](_0x4512f8[_0x2ab8b7(0x626)]))return!![];if(_0x18a1e7==='MP'&&_0x492404['match'](_0x4512f8[_0x2ab8b7(0x882)]))return!![];}return![];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbb5)]=function(_0x51909c){const _0x2c93c1=_0x5a8ff0;_0x51909c=_0x51909c[_0x2c93c1(0x692)]()['trim']();const _0x5cb7fe=VisuMZ[_0x2c93c1(0xbb3)]['LifeStealRegExp'];for(const _0x49e997 of this[_0x2c93c1(0x75f)]()){if(!_0x49e997)continue;const _0x255e5a=_0x49e997[_0x2c93c1(0x494)]||'';if(_0x255e5a['match'](_0x5cb7fe[_0x2c93c1(0x2bd)]))return!![];if(_0x51909c==='HP'&&_0x255e5a['match'](_0x5cb7fe[_0x2c93c1(0x91f)]))return!![];if(_0x51909c==='MP'&&_0x255e5a[_0x2c93c1(0x6d8)](_0x5cb7fe[_0x2c93c1(0x635)]))return!![];}return![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xaa6)]=Game_BattlerBase['prototype'][_0x5a8ff0(0x3cc)],Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3cc)]=function(){const _0x47aed9=_0x5a8ff0;VisuMZ['BattleCore'][_0x47aed9(0xaa6)][_0x47aed9(0x31b)](this),this['initMembersBattleCore']();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){const _0x4d1e61=_0x5a8ff0;this[_0x4d1e61(0x2fa)]=![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb53)]=Game_BattlerBase['prototype'][_0x5a8ff0(0x38a)],Game_BattlerBase['prototype'][_0x5a8ff0(0x38a)]=function(){const _0x19a7c7=_0x5a8ff0;this[_0x19a7c7(0x827)]={},VisuMZ['BattleCore'][_0x19a7c7(0xb53)][_0x19a7c7(0x31b)](this);},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x174)]=function(_0x4256f6){const _0x974867=_0x5a8ff0;return this[_0x974867(0x827)]=this['_cache']||{},this['_cache'][_0x4256f6]!==undefined;},Game_BattlerBase['prototype']['hardDamageCap']=function(){const _0x1d7ec3=_0x5a8ff0;if(this['_cache'][_0x1d7ec3(0x67d)]!==undefined)return this[_0x1d7ec3(0x827)][_0x1d7ec3(0x67d)];const _0x3d100f=/<DAMAGE CAP:[ ](\d+)>/i,_0x49dd27=this['traitObjects']()[_0x1d7ec3(0x5d7)](_0x19e778=>_0x19e778&&_0x19e778[_0x1d7ec3(0x494)][_0x1d7ec3(0x6d8)](_0x3d100f)?Number(RegExp['$1']):0x0);let _0xbe2522=_0x49dd27[_0x1d7ec3(0x6b9)]>0x0?Math[_0x1d7ec3(0x6dd)](..._0x49dd27):0x0;if(_0xbe2522<=0x0)_0xbe2522=VisuMZ[_0x1d7ec3(0xbb3)]['Settings'][_0x1d7ec3(0x8c7)][_0x1d7ec3(0x751)];return this[_0x1d7ec3(0x827)][_0x1d7ec3(0x67d)]=_0xbe2522,this[_0x1d7ec3(0x827)][_0x1d7ec3(0x67d)];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa69)]=function(){const _0x387e08=_0x5a8ff0;if(this[_0x387e08(0x827)][_0x387e08(0x9f2)]!==undefined)return this[_0x387e08(0x827)][_0x387e08(0x9f2)];let _0x78dad8=VisuMZ[_0x387e08(0xbb3)]['Settings'][_0x387e08(0x8c7)][_0x387e08(0xbde)];const _0x3a628b=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4321ca=this[_0x387e08(0x75f)]()[_0x387e08(0x5d7)](_0x1d66fd=>_0x1d66fd&&_0x1d66fd[_0x387e08(0x494)]['match'](_0x3a628b)?Number(RegExp['$1'])/0x64:0x0);return _0x78dad8=_0x4321ca[_0x387e08(0x731)]((_0x12ee0c,_0x46df35)=>_0x12ee0c+_0x46df35,_0x78dad8),this[_0x387e08(0x827)][_0x387e08(0x9f2)]=_0x78dad8,this['_cache'][_0x387e08(0x9f2)][_0x387e08(0x8b3)](0.01,0x1);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa7b)]=Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x374)],Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x374)]=function(){const _0x5bd7d1=_0x5a8ff0;VisuMZ[_0x5bd7d1(0xbb3)][_0x5bd7d1(0xa7b)]['call'](this),SceneManager[_0x5bd7d1(0x5c8)]()&&(this['requestMotion']('dead'),this[_0x5bd7d1(0x148)]=undefined);},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x407)]=function(){const _0x41b42a=_0x5a8ff0;if(!SceneManager[_0x41b42a(0x5c8)]())return null;if(!SceneManager[_0x41b42a(0x973)]['_spriteset'])return null;return SceneManager[_0x41b42a(0x973)]['_spriteset']['findTargetSprite'](this);},Game_BattlerBase[_0x5a8ff0(0xb6e)]['svBattlerAnchorX']=function(){const _0x58915e=_0x5a8ff0;return VisuMZ[_0x58915e(0xbb3)][_0x58915e(0xba1)][_0x58915e(0x1ba)]['AnchorX'];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x73b)]=function(){const _0x3ab33c=_0x5a8ff0;return VisuMZ[_0x3ab33c(0xbb3)][_0x3ab33c(0xba1)]['Actor']['AnchorY'];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x143)]=function(){const _0x84166d=_0x5a8ff0;return this['isActor']&&this['isActor']()?VisuMZ[_0x84166d(0xbb3)][_0x84166d(0xba1)][_0x84166d(0x1ba)][_0x84166d(0xb67)]:VisuMZ['BattleCore']['Settings']['Enemy'][_0x84166d(0xb67)];},Game_BattlerBase['prototype'][_0x5a8ff0(0x977)]=function(){return!![];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x323)]=function(){return 0x0;},Game_BattlerBase['prototype']['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x5a8ff0(0x580)]=function(_0xd1dd4){const _0x455679=_0x5a8ff0;if(!_0xd1dd4)return 0x0;let _0x35d439=0x0;const _0x5ea214=_0xd1dd4[_0x455679(0x494)];return _0x5ea214[_0x455679(0x6d8)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x35d439+=Number(RegExp['$1'])),_0x5ea214['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x35d439+=Number(RegExp['$1'])),_0x35d439;},Game_BattlerBase['prototype'][_0x5a8ff0(0x1c6)]=function(_0x5d99d9){const _0xb7ad4f=_0x5a8ff0;if(!_0x5d99d9)return 0x0;let _0x4324a3=0x0;const _0x5ae3b7=_0x5d99d9[_0xb7ad4f(0x494)];return _0x5ae3b7[_0xb7ad4f(0x6d8)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x4324a3+=Number(RegExp['$1'])),_0x5ae3b7[_0xb7ad4f(0x6d8)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4324a3+=Number(RegExp['$2'])),_0x4324a3;},VisuMZ[_0x5a8ff0(0xbb3)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa22)],Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa22)]=function(_0x1b8ebb){const _0x2e7f8e=_0x5a8ff0;if(_0x1b8ebb===this['deathStateId']()&&this[_0x2e7f8e(0x668)]())return!![];return VisuMZ['BattleCore'][_0x2e7f8e(0x4bb)]['call'](this,_0x1b8ebb);},Game_BattlerBase[_0x5a8ff0(0xb6e)]['isImmortal']=function(){return this['_immortal'];},Game_BattlerBase['prototype'][_0x5a8ff0(0x48b)]=function(_0x6f0c32){const _0x481e6e=_0x5a8ff0;_0x6f0c32?this[_0x481e6e(0x2b0)]():this['removeImmortal']();},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b0)]=function(){const _0x4b3bec=_0x5a8ff0;if(this[_0x4b3bec(0x46a)]())return;this[_0x4b3bec(0x2fa)]=!![],this[_0x4b3bec(0x890)]=![];},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8af)]=function(){const _0xc37970=_0x5a8ff0,_0x365791=this['isAlive']();this['_immortal']=![],_0x365791&&this['_deathStateApplied']&&this[_0xc37970(0x374)](),this[_0xc37970(0x890)]=![],this[_0xc37970(0x38a)](),this[_0xc37970(0x46a)]()&&_0x365791&&(this[_0xc37970(0x13b)](),this[_0xc37970(0x9b7)]());},VisuMZ['BattleCore'][_0x5a8ff0(0x6e4)]=Game_Action['prototype'][_0x5a8ff0(0xa0e)],Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa0e)]=function(){const _0x3cb1be=_0x5a8ff0;return this[_0x3cb1be(0x12a)]()?VisuMZ[_0x3cb1be(0xbb3)][_0x3cb1be(0x6e4)]['call'](this):0x0;},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Action_setAttack']=Game_Action[_0x5a8ff0(0xb6e)]['setAttack'],Game_Action['prototype'][_0x5a8ff0(0x420)]=function(){const _0x21215d=_0x5a8ff0;if(this['subject']()&&this[_0x21215d(0x6ee)]()[_0x21215d(0x336)]())VisuMZ[_0x21215d(0xbb3)]['Game_Action_setAttack'][_0x21215d(0x31b)](this);else BattleManager['_bypassCanCounterCheck']?VisuMZ[_0x21215d(0xbb3)]['Game_Action_setAttack']['call'](this):this[_0x21215d(0x9c3)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x76d)]=Game_BattlerBase[_0x5a8ff0(0xb6e)]['canAttack'],Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x336)]=function(){const _0x50fe4e=_0x5a8ff0;if(!this[_0x50fe4e(0x23e)]())return![];return VisuMZ[_0x50fe4e(0xbb3)][_0x50fe4e(0x76d)][_0x50fe4e(0x31b)](this);},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x23e)]=function(){const _0x52d395=_0x5a8ff0;for(const _0x4c2ba4 of this[_0x52d395(0x75f)]()){if(!_0x4c2ba4)continue;if(_0x4c2ba4[_0x52d395(0x494)][_0x52d395(0x6d8)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x561)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1e6)],Game_Action[_0x5a8ff0(0xb6e)]['setGuard']=function(){const _0x31292c=_0x5a8ff0;this['subject']()['canGuard']()&&VisuMZ[_0x31292c(0xbb3)]['Game_Action_setGuard']['call'](this);},VisuMZ['BattleCore']['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x114)],Game_BattlerBase['prototype']['canGuard']=function(){const _0x2b018e=_0x5a8ff0;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x2b018e(0xbb3)]['Game_BattlerBase_canGuard'][_0x2b018e(0x31b)](this);},Game_BattlerBase['prototype'][_0x5a8ff0(0x397)]=function(){const _0x6754aa=_0x5a8ff0;for(const _0x4bada9 of this['traitObjects']()){if(!_0x4bada9)continue;if(_0x4bada9[_0x6754aa(0x494)][_0x6754aa(0x6d8)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x5a8ff0(0xb6e)]['canUseItemCommand']=function(){const _0x24c496=_0x5a8ff0;for(const _0x4e3b36 of this[_0x24c496(0x75f)]()){if(!_0x4e3b36)continue;if(_0x4e3b36[_0x24c496(0x494)][_0x24c496(0x6d8)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x5a8ff0(0x688)]=Game_BattlerBase['prototype'][_0x5a8ff0(0x1ae)],Game_BattlerBase['prototype'][_0x5a8ff0(0x1ae)]=function(_0xa93f88){const _0x28ca17=_0x5a8ff0;if(_0xa93f88&&_0xa93f88[_0x28ca17(0x494)][_0x28ca17(0x6d8)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x440716=this[_0x28ca17(0x6b8)]()[_0x28ca17(0x4c4)]();if(_0x440716[_0x28ca17(0x6b9)]===0x1&&_0x440716[0x0]===this)return![];}return VisuMZ[_0x28ca17(0xbb3)][_0x28ca17(0x688)]['call'](this,_0xa93f88);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb8a)]=function(){const _0x4e4839=_0x5a8ff0;return VisuMZ[_0x4e4839(0xbb3)][_0x4e4839(0xba1)][_0x4e4839(0x2dc)][_0x4e4839(0x815)];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x218)]=Game_Battler['prototype']['regenerateAll'],Game_Battler['prototype'][_0x5a8ff0(0xb7b)]=function(){const _0x46c392=_0x5a8ff0;if(SceneManager[_0x46c392(0x5c8)]()){if(BattleManager[_0x46c392(0xa9d)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager[_0x46c392(0x5c8)]()&&BattleManager['isTpb']()&&this[_0x46c392(0xbbe)]===Graphics[_0x46c392(0x825)])return;this[_0x46c392(0xbbe)]=Graphics['frameCount'],SceneManager[_0x46c392(0x5c8)]()&&this['processBattleCoreJS'](_0x46c392(0xa02)),VisuMZ[_0x46c392(0xbb3)]['Game_Battler_regenerateAll'][_0x46c392(0x31b)](this),SceneManager[_0x46c392(0x5c8)]()&&(this['regenerateAllBattleCore'](),this[_0x46c392(0xa35)]('PostRegenerateJS'));},Game_Battler['prototype'][_0x5a8ff0(0xa53)]=function(){const _0x691379=_0x5a8ff0;if(SceneManager[_0x691379(0x5c8)]())for(const _0x4463f7 of this['traitObjects']()){if(!_0x4463f7)continue;this['onRegeneratePlayStateAnimation'](_0x4463f7);}},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x79d)]=function(_0x1e7e81){const _0x5c09fd=_0x5a8ff0;if(!Imported[_0x5c09fd(0x610)])return;if(!SceneManager[_0x5c09fd(0x5c8)]())return;if(this[_0x5c09fd(0x46a)]())return;if(this['isHidden']())return;if(_0x1e7e81[_0x5c09fd(0x494)][_0x5c09fd(0x6d8)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5082d8=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x5082d8,![],![]);}},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Battler_startTpbTurn']=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x49f)],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x49f)]=function(){const _0x1b7c1a=_0x5a8ff0;this[_0x1b7c1a(0xa35)]('PreStartTurnJS'),VisuMZ[_0x1b7c1a(0xbb3)][_0x1b7c1a(0x6d4)][_0x1b7c1a(0x31b)](this),this[_0x1b7c1a(0xa35)](_0x1b7c1a(0x463));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xbb7)]=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7fb)],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7fb)]=function(){const _0x70430b=_0x5a8ff0;this[_0x70430b(0xa35)]('PreEndTurnJS'),VisuMZ[_0x70430b(0xbb3)][_0x70430b(0xbb7)][_0x70430b(0x31b)](this),VisuMZ[_0x70430b(0xbb3)]['Settings'][_0x70430b(0x2dc)]['SyncBuffExpire']&&this[_0x70430b(0x924)](),this[_0x70430b(0xa35)](_0x70430b(0x12e));},Game_Battler['prototype'][_0x5a8ff0(0xa35)]=function(_0x5eb7a5){const _0x17c7f2=_0x5a8ff0;if(this[_0x17c7f2(0x5c4)]||this[_0x17c7f2(0x928)])return;const _0x471a13=VisuMZ['BattleCore']['Settings'][_0x17c7f2(0x2dc)];if(_0x471a13[_0x5eb7a5])_0x471a13[_0x5eb7a5][_0x17c7f2(0x31b)](this);for(const _0x33550f of this[_0x17c7f2(0x75f)]()){if(!_0x33550f)continue;key=VisuMZ[_0x17c7f2(0xbb3)][_0x17c7f2(0x5f9)](_0x33550f,_0x5eb7a5),VisuMZ[_0x17c7f2(0xbb3)]['JS'][key]&&VisuMZ[_0x17c7f2(0xbb3)]['JS'][key][_0x17c7f2(0x31b)](this,this,this,_0x33550f,0x0);}},Game_Battler['prototype'][_0x5a8ff0(0xc0e)]=function(){const _0x3a7ec6=_0x5a8ff0;return VisuMZ['BattleCore'][_0x3a7ec6(0xba1)][_0x3a7ec6(0x1ba)][_0x3a7ec6(0xbf5)]||![];},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x878)]=function(){const _0x5bcaac=_0x5a8ff0;if(this['isWaiting']()){if(this[_0x5bcaac(0xc0e)]()){if(this[_0x5bcaac(0x74d)]['some'](_0xe3fa9=>_0xe3fa9['item']()&&_0xe3fa9[_0x5bcaac(0x442)]()))return!![];}else{if(this[_0x5bcaac(0x74d)][_0x5bcaac(0x9b5)](_0x248289=>_0x248289['item']()&&_0x248289['isMagicSkill']()))return!![];}}if(BattleManager[_0x5bcaac(0xa9d)]()&&this['_tpbState']===_0x5bcaac(0x22b))return this[_0x5bcaac(0xc0e)]()?this[_0x5bcaac(0x718)]()&&this[_0x5bcaac(0x718)]()[_0x5bcaac(0x12a)]()&&this[_0x5bcaac(0x718)]()[_0x5bcaac(0x442)]():this[_0x5bcaac(0x718)]()&&this['currentAction']()['item']()&&this[_0x5bcaac(0x718)]()['isMagicSkill']();return![];},Game_Battler['prototype'][_0x5a8ff0(0xa26)]=function(){const _0x46dc2d=_0x5a8ff0;if(BattleManager[_0x46dc2d(0xa9d)]()&&this['_tpbState']===_0x46dc2d(0x22b))return this[_0x46dc2d(0xc0e)]()?this[_0x46dc2d(0x718)]()&&this['currentAction']()[_0x46dc2d(0x12a)]()&&!this[_0x46dc2d(0x718)]()[_0x46dc2d(0x442)]():this[_0x46dc2d(0x718)]()&&this[_0x46dc2d(0x718)]()[_0x46dc2d(0x12a)]()&&!this[_0x46dc2d(0x718)]()[_0x46dc2d(0x49e)]();return![];},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x209)],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x209)]=function(){const _0x4c5061=_0x5a8ff0;VisuMZ['BattleCore'][_0x4c5061(0x5d1)]['call'](this),this[_0x4c5061(0x2a0)]=[];},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbca)]=function(){const _0x38fe5b=_0x5a8ff0;if(!this['_damagePopupArray'])this[_0x38fe5b(0x209)]();return this[_0x38fe5b(0x2a0)][_0x38fe5b(0x6b9)]>0x0;},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbdd)]=function(){const _0x4d79d2=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x4d79d2(0x2a0)])this[_0x4d79d2(0x209)]();this[_0x4d79d2(0x317)]();const _0x458d00=this['battler']();if(_0x458d00)_0x458d00[_0x4d79d2(0x6f1)]();},Game_Battler['prototype'][_0x5a8ff0(0x317)]=function(){const _0x367f6f=_0x5a8ff0,_0x422513=this[_0x367f6f(0xa41)]();if(_0x422513[_0x367f6f(0x37b)]||_0x422513[_0x367f6f(0x7a9)]){const _0x4c288a=JsonEx[_0x367f6f(0x78e)](_0x422513);_0x4c288a[_0x367f6f(0x6fa)]=![],_0x4c288a[_0x367f6f(0xb8f)]=0x0,this[_0x367f6f(0x2a0)][_0x367f6f(0x23b)](_0x4c288a);if(!_0x422513[_0x367f6f(0x710)]&&!_0x422513['mpDamage'])return;}if(_0x422513['hpAffected']){const _0x5b4ddf=JsonEx[_0x367f6f(0x78e)](_0x422513);_0x5b4ddf[_0x367f6f(0x37b)]=![],_0x5b4ddf[_0x367f6f(0x7a9)]=![],_0x5b4ddf[_0x367f6f(0xb8f)]=0x0,this[_0x367f6f(0x2a0)][_0x367f6f(0x23b)](_0x5b4ddf);}if(_0x422513[_0x367f6f(0xb8f)]!==0x0){const _0x4f4869=JsonEx[_0x367f6f(0x78e)](_0x422513);_0x4f4869[_0x367f6f(0x37b)]=![],_0x4f4869[_0x367f6f(0x7a9)]=![],_0x4f4869['hpAffected']=![],this[_0x367f6f(0x2a0)][_0x367f6f(0x23b)](_0x4f4869);}},Game_Battler['prototype'][_0x5a8ff0(0x14c)]=function(){const _0x4f85ba=_0x5a8ff0;if(!this[_0x4f85ba(0x2a0)])this[_0x4f85ba(0x209)]();return VisuMZ[_0x4f85ba(0xbb3)][_0x4f85ba(0xba1)]['Damage']['NewPopupBottom']?this[_0x4f85ba(0x2a0)]['shift']():this['_damagePopupArray'][_0x4f85ba(0xa14)]();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x31a)]=function(_0x53964e,_0x1a46de){const _0x4df6ff=_0x5a8ff0;if(!SceneManager[_0x4df6ff(0x5c8)]())return;if(BattleManager[_0x4df6ff(0x994)]())return;if(!this['battler']())return;if(_0x53964e[_0x4df6ff(0x6b9)]<=0x0)return;_0x1a46de=_0x1a46de||{},_0x1a46de['textColor']=_0x1a46de['textColor']||'#ffffff',_0x1a46de[_0x4df6ff(0xa39)]=_0x1a46de[_0x4df6ff(0xa39)]||[0x0,0x0,0x0,0x0],_0x1a46de['flashDuration']=_0x1a46de[_0x4df6ff(0xb1b)]||0x0,this[_0x4df6ff(0x407)]()['setupTextPopup'](_0x53964e,_0x1a46de);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x975)]=function(_0x3e2ca7,_0xe2a771,_0x3c1e7c){const _0x59097e=_0x5a8ff0;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x59097e(0x994)]())return;if(!this[_0x59097e(0x407)]())return;if(_0xe2a771['length']<=0x0)return;_0x3c1e7c=_0x3c1e7c||{},_0x3c1e7c['textColor']=_0x3c1e7c[_0x59097e(0x932)]||_0x59097e(0xa4a),_0x3c1e7c[_0x59097e(0xa39)]=_0x3c1e7c[_0x59097e(0xa39)]||[0x0,0x0,0x0,0x0],_0x3c1e7c['flashDuration']=_0x3c1e7c['flashDuration']||0x0,this[_0x59097e(0x407)]()['setupIconTextPopup'](_0x3e2ca7,_0xe2a771,_0x3c1e7c);},Game_Battler['prototype'][_0x5a8ff0(0x5b8)]=function(){const _0x26ff14=_0x5a8ff0;if(this['isHidden']())return![];if(this[_0x26ff14(0x6b2)]()&&this[_0x26ff14(0x4c5)]())return!![];if(this[_0x26ff14(0x172)]()&&this[_0x26ff14(0xb75)]()){if(this[_0x26ff14(0x46a)]()&&this['allowCollapse']())return![];}else{if(this[_0x26ff14(0x46a)]())return![];}return!![];},VisuMZ['BattleCore']['Game_Battler_clearMotion']=Game_Battler[_0x5a8ff0(0xb6e)]['clearMotion'],Game_Battler['prototype'][_0x5a8ff0(0x875)]=function(){const _0x400a45=_0x5a8ff0;VisuMZ[_0x400a45(0xbb3)][_0x400a45(0xb19)][_0x400a45(0x31b)](this),this[_0x400a45(0x36f)]();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2e3)]=function(){return!![];},Game_Battler['prototype'][_0x5a8ff0(0x76b)]=function(){return![];},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Battler_onBattleStart']=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x413)],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x413)]=function(_0x5c8f2a){const _0x4a55db=_0x5a8ff0;VisuMZ[_0x4a55db(0xbb3)][_0x4a55db(0x429)][_0x4a55db(0x31b)](this,_0x5c8f2a),this['onBattleStartBattleCore'](_0x5c8f2a),this[_0x4a55db(0x209)]();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9fb)]=function(_0x42b79a){const _0x564c7e=_0x5a8ff0;this[_0x564c7e(0x37a)](![]),this[_0x564c7e(0xbe2)]=undefined,this[_0x564c7e(0x260)]=undefined;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x720)]=Game_Battler[_0x5a8ff0(0xb6e)]['onBattleEnd'],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x17b)]=function(){const _0x285222=_0x5a8ff0;VisuMZ[_0x285222(0xbb3)][_0x285222(0x720)][_0x285222(0x31b)](this),this[_0x285222(0x69d)]();},Game_Battler['prototype']['onBattleEndBattleCore']=function(){const _0x917e0=_0x5a8ff0;this[_0x917e0(0xbe2)]=undefined,this[_0x917e0(0x260)]=undefined;},VisuMZ['BattleCore'][_0x5a8ff0(0x722)]=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x304)],Game_Battler['prototype']['performActionStart']=function(_0x50d646){const _0x75950f=_0x5a8ff0;VisuMZ[_0x75950f(0xbb3)][_0x75950f(0x722)][_0x75950f(0x31b)](this,_0x50d646);if(!_0x50d646[_0x75950f(0x26e)]()){const _0x6fe822=this[_0x75950f(0x407)]();_0x6fe822&&_0x6fe822['stepForward']();}this[_0x75950f(0x37a)](![]);},Game_Battler['prototype'][_0x5a8ff0(0x7ac)]=function(){const _0x352e54=_0x5a8ff0;this['_performDamageMotion']=undefined;const _0x435f26=this[_0x352e54(0x353)];this[_0x352e54(0x353)]=![];if(BattleManager[_0x352e54(0x5b3)]()&&this[_0x352e54(0x6e5)]()){const _0x4d94b0=this['battler']();if(_0x4d94b0&&_0x435f26)_0x4d94b0['stepForward']();return;}const _0x2bc361=this['battler']();if(_0x2bc361)_0x2bc361['stepBack']();this[_0x352e54(0x37a)](![]),this[_0x352e54(0x9b7)]();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5ca)]=function(_0x146f38){const _0x44e0f1=_0x5a8ff0;if(_0x146f38[_0x44e0f1(0x701)]())this[_0x44e0f1(0x21f)]();else{if(_0x146f38[_0x44e0f1(0x26e)]())this[_0x44e0f1(0x5bd)](_0x44e0f1(0x400));else{if(_0x146f38[_0x44e0f1(0x442)]())this[_0x44e0f1(0x5bd)](_0x44e0f1(0x9d9));else{if(_0x146f38[_0x44e0f1(0x2b4)]())[0x1,0x2,0x5,0x6][_0x44e0f1(0x597)](_0x146f38[_0x44e0f1(0x12a)]()[_0x44e0f1(0x66e)][_0x44e0f1(0xb69)])?this['performAttack']():this[_0x44e0f1(0x5bd)](_0x44e0f1(0xbfb));else _0x146f38[_0x44e0f1(0x947)]()&&this[_0x44e0f1(0x5bd)](_0x44e0f1(0x12a));}}}},Game_Battler[_0x5a8ff0(0xb6e)]['getAttackMotion']=function(){const _0x5717fd=_0x5a8ff0;return $dataSystem[_0x5717fd(0x631)][0x0];},Game_Battler['prototype']['getAttackWeaponAnimationId']=function(){const _0x3d1c4f=_0x5a8ff0,_0x1016ef=this[_0x3d1c4f(0x798)]();return _0x1016ef?_0x1016ef[_0x3d1c4f(0x9d4)]:0x0;},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x82f)]=function(_0x1924c9){const _0x4b3b98=_0x5a8ff0;if(!$gameSystem['isSideView']())return;const _0x34c9b8=this[_0x4b3b98(0x407)](),_0x442564=_0x1924c9[_0x4b3b98(0x407)]();if(!_0x34c9b8||!_0x442564)return;const _0x1d2bf0=_0x442564[_0x4b3b98(0x7bd)],_0x516025=_0x442564[_0x4b3b98(0x4b6)];this[_0x4b3b98(0x3cf)](_0x1d2bf0,_0x516025,0x0,![],_0x4b3b98(0x65b),-0x1),_0x34c9b8['updatePosition']();const _0x109e58=VisuMZ[_0x4b3b98(0xbb3)][_0x4b3b98(0xba1)][_0x4b3b98(0x828)];let _0x493a8b=(_0x442564[_0x4b3b98(0x3fa)]+_0x34c9b8[_0x4b3b98(0x3fa)])/0x2;_0x493a8b*=this[_0x4b3b98(0x34b)]()?0x1:-0x1;let _0x4afd80=_0x109e58[_0x4b3b98(0x74e)]*(this[_0x4b3b98(0x34b)]()?0x1:-0x1);_0x1924c9[_0x4b3b98(0x17c)](_0x493a8b,_0x4afd80,0x0,![],_0x4b3b98(0x65b)),_0x442564['updatePosition']();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5bd)]=function(_0x16589a){const _0x2babbc=_0x5a8ff0;if(SceneManager[_0x2babbc(0x5c8)]()){const _0x5c6aa7=this[_0x2babbc(0x407)]();_0x5c6aa7&&(_0x5c6aa7[_0x2babbc(0x889)](_0x16589a),[_0x2babbc(0x596),_0x2babbc(0x4f6),_0x2babbc(0x226)][_0x2babbc(0x597)](_0x16589a)&&this[_0x2babbc(0x474)]());}this['clearFreezeMotion']();},Game_Battler['prototype'][_0x5a8ff0(0x474)]=function(){},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2f9)]=function(_0x5f3f99){const _0x83f111=_0x5a8ff0;if(SceneManager[_0x83f111(0x5c8)]()){const _0x917974=this[_0x83f111(0x407)]();if(_0x917974)_0x917974[_0x83f111(0x5c1)](_0x5f3f99);}},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb40)]=function(){const _0x543b2f=_0x5a8ff0;if(SceneManager[_0x543b2f(0x5c8)]()){const _0x3a7736=this[_0x543b2f(0x424)]();this['startWeaponAnimation'](_0x3a7736);}},Game_Battler['prototype']['performCastAnimation']=function(_0x5356fa,_0x31a832){const _0x2653be=_0x5a8ff0;if(!_0x5356fa)return;if(!_0x5356fa['item']())return;if(_0x5356fa[_0x2653be(0x701)]())return;if(_0x5356fa[_0x2653be(0x26e)]())return;if(_0x5356fa[_0x2653be(0x947)]())return;if($gameTemp['_playTestFastMode'])return;let _0x4de2ba=0x0;const _0x4511d6=VisuMZ[_0x2653be(0xbb3)][_0x2653be(0xba1)][_0x2653be(0x828)],_0xdf2e19=_0x5356fa[_0x2653be(0x12a)]()[_0x2653be(0x494)];if(_0xdf2e19[_0x2653be(0x6d8)](/<CAST ANIMATION: (\d+)>/i))_0x4de2ba=Number(RegExp['$1']);else{if(_0xdf2e19[_0x2653be(0x6d8)](/<NO CAST ANIMATION>/i))return;else{if(_0x5356fa[_0x2653be(0x593)]())_0x4de2ba=_0x4511d6[_0x2653be(0x9cb)];else{if(_0x5356fa[_0x2653be(0x191)]())_0x4de2ba=_0x4511d6['CastPhysical'];else _0x5356fa[_0x2653be(0x442)]()&&(_0x4de2ba=_0x4511d6[_0x2653be(0x8fd)]);}}}_0x4de2ba>0x0&&$gameTemp[_0x2653be(0xb09)]([this],_0x4de2ba,!!_0x31a832);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x645)]=function(){const _0xc9611d=_0x5a8ff0;SoundManager['playReflection']();let _0x2ab319=VisuMZ['BattleCore'][_0xc9611d(0xba1)]['ActionSequence'][_0xc9611d(0x838)];_0x2ab319>0x0&&(Imported[_0xc9611d(0x610)]?$gameTemp['requestFauxAnimation']([this],_0x2ab319):$gameTemp[_0xc9611d(0xb09)]([this],_0x2ab319));},Game_Battler[_0x5a8ff0(0xb6e)]['isActiveTpbReady']=function(){const _0x16840d=_0x5a8ff0;if(!$gameSystem[_0x16840d(0xa92)]())return![];if(!BattleManager[_0x16840d(0x5b3)]())return![];if(!this[_0x16840d(0x6b2)]())return![];if(this[_0x16840d(0x6e5)]())return!![];if(this['isTpbReady']())return!![];if(this[_0x16840d(0xbf0)]>=0x1)return!![];return![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x1dc)]=Game_Battler[_0x5a8ff0(0xb6e)]['performDamage'],Game_Battler['prototype'][_0x5a8ff0(0x3bc)]=function(){const _0x3525b1=_0x5a8ff0;this[_0x3525b1(0x220)]()&&(this[_0x3525b1(0x148)]=!![]),VisuMZ[_0x3525b1(0xbb3)][_0x3525b1(0x1dc)][_0x3525b1(0x31b)](this),this['performFlinch'](),this[_0x3525b1(0x436)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Battler_performMiss']=Game_Battler['prototype']['performMiss'],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7d5)]=function(){const _0xd614c=_0x5a8ff0;this[_0xd614c(0x220)]()&&(this[_0xd614c(0x148)]=!![]),VisuMZ[_0xd614c(0xbb3)][_0xd614c(0x3a3)][_0xd614c(0x31b)](this),this[_0xd614c(0x6e1)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x1d1)]=Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa0a)],Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa0a)]=function(){const _0x104b16=_0x5a8ff0;this['isActiveTpbReady']()&&(this[_0x104b16(0x148)]=!![]),VisuMZ[_0x104b16(0xbb3)]['Game_Battler_performEvasion']['call'](this),this[_0x104b16(0x6e1)]();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6e1)]=function(){const _0x593838=_0x5a8ff0;if(!$gameSystem[_0x593838(0xa92)]())return;if(this[_0x593838(0x353)])return;this['_flinched']=!![];const _0x9f525d=this[_0x593838(0x407)]();if(_0x9f525d)_0x9f525d[_0x593838(0x84d)]();},Game_Battler['prototype'][_0x5a8ff0(0x436)]=function(){const _0xc00b05=_0x5a8ff0;if(!this[_0xc00b05(0x2e3)]())return;const _0x55bb71=VisuMZ[_0xc00b05(0xbb3)][_0xc00b05(0xba1)]['Actor'];if(!(_0x55bb71[_0xc00b05(0x2c9)]??![]))return;if(this[_0xc00b05(0xa04)]<=0x0)return;const _0x9f4bd2=this[_0xc00b05(0x407)]();if(_0x9f4bd2){const _0xfea924=this[_0xc00b05(0xa04)],_0x501608=(_0xfea924/this[_0xc00b05(0xa2a)])['clamp'](0.8,0x1),_0x21aab6=_0x55bb71['ShakeFlinchPower']??0x30,_0x3aac34=_0x501608*_0x21aab6;_0x9f4bd2[_0xc00b05(0x62f)](_0x3aac34,_0x501608);}},Game_Battler['prototype'][_0x5a8ff0(0x9b7)]=function(){const _0x45ec30=_0x5a8ff0;if(this['isDead']()&&this[_0x45ec30(0x599)]!==_0x45ec30(0x1ef)){this[_0x45ec30(0x5bd)](_0x45ec30(0x1ef));return;}if(this[_0x45ec30(0x46a)]()&&this['_motionType']===_0x45ec30(0x1ef))return;if(!!this[_0x45ec30(0x5ce)])return;if(this['isEnemy']()){if(!this[_0x45ec30(0x6f0)]()&&this!==BattleManager[_0x45ec30(0xbee)]){if(this[_0x45ec30(0x407)]())this[_0x45ec30(0x407)]()[_0x45ec30(0x91c)]();}this['clearFreezeMotion']();return;}if(this[_0x45ec30(0x599)]===_0x45ec30(0xb4d))return;if(this[_0x45ec30(0x599)]===_0x45ec30(0x62a)&&!BattleManager[_0x45ec30(0x6e5)]())return;if(this[_0x45ec30(0x599)]===_0x45ec30(0x400)&&!BattleManager[_0x45ec30(0x6e5)]())return;this[_0x45ec30(0x875)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x45ec30(0xbee)])return;if(this[_0x45ec30(0x407)]()&&BattleManager[_0x45ec30(0x6e5)]()){this[_0x45ec30(0x407)]()[_0x45ec30(0x91c)](),this[_0x45ec30(0x36f)]();return;}},Game_Enemy['prototype'][_0x5a8ff0(0x6f0)]=function(){const _0x53b50e=_0x5a8ff0;if(!this[_0x53b50e(0xb75)]())return![];const _0x236b88=this[_0x53b50e(0x407)]();if(!_0x236b88)return![];const _0x203269=_0x236b88[_0x53b50e(0x14e)];if(!_0x203269)return![];const _0x3fcb95=_0x203269[_0x53b50e(0x386)];return _0x3fcb95&&!_0x3fcb95['loop'];},Game_Battler['prototype'][_0x5a8ff0(0x92f)]=function(){const _0xebb4a0=_0x5a8ff0;return this[_0xebb4a0(0x458)];},Game_Battler[_0x5a8ff0(0xb6e)]['setBattlerFlip']=function(_0x45a8bf){const _0x23335a=_0x5a8ff0;if(!$gameSystem[_0x23335a(0xa92)]())return;this[_0x23335a(0x458)]=_0x45a8bf;const _0x41e86c=this[_0x23335a(0x407)]();if(_0x41e86c)_0x41e86c[_0x23335a(0x4b9)]();},Game_Battler[_0x5a8ff0(0xb6e)]['setBattlerFacePoint']=function(_0x2cf1bc,_0x328cb4,_0x4fa6be){const _0x38b29e=_0x5a8ff0;if(!$gameSystem[_0x38b29e(0xa92)]())return;const _0x34c576=this[_0x38b29e(0x407)]();if(!_0x34c576)return;if(_0x2cf1bc===_0x34c576[_0x38b29e(0x7bd)])return;let _0x2c2846=![];if(this['isActor']()){if(_0x2cf1bc>_0x34c576[_0x38b29e(0x7bd)])_0x2c2846=!![];if(_0x2cf1bc<_0x34c576[_0x38b29e(0x7bd)])_0x2c2846=![];}else{if(this[_0x38b29e(0x172)]()){if(_0x2cf1bc>_0x34c576[_0x38b29e(0x7bd)])_0x2c2846=![];if(_0x2cf1bc<_0x34c576['_baseX'])_0x2c2846=!![];}};this['setBattlerFlip'](_0x4fa6be?!_0x2c2846:_0x2c2846),_0x34c576[_0x38b29e(0x4b9)]();},Game_Battler[_0x5a8ff0(0xb6e)]['moveBattlerDistance']=function(_0x44573d,_0x4ffdcd,_0x427b44,_0x4e06c1,_0x5e47c7){const _0x27ad53=_0x5a8ff0;if(!$gameSystem[_0x27ad53(0xa92)]())return;const _0x4c0063=this[_0x27ad53(0x407)]();if(!_0x4c0063)return;if(_0x4e06c1)this[_0x27ad53(0xafd)](_0x44573d+_0x4c0063['_baseX'],_0x4ffdcd+_0x4c0063['_baseY'],![]);_0x44573d+=_0x4c0063[_0x27ad53(0x7bd)]-_0x4c0063[_0x27ad53(0x603)],_0x4ffdcd+=_0x4c0063[_0x27ad53(0x4b6)]-_0x4c0063['_homeY'],_0x4c0063[_0x27ad53(0x607)](_0x44573d,_0x4ffdcd,_0x427b44);if(Imported[_0x27ad53(0x610)])_0x4c0063[_0x27ad53(0x472)](_0x5e47c7||_0x27ad53(0x65b));},Game_Battler['prototype'][_0x5a8ff0(0x3cf)]=function(_0x3e63c6,_0x107539,_0x2eac21,_0x13f4c2,_0x364fd7,_0x3a2f1f){const _0x3fc74d=_0x5a8ff0;if(!$gameSystem[_0x3fc74d(0xa92)]())return;const _0x1ecd1c=this[_0x3fc74d(0x407)]();if(!_0x1ecd1c)return;if(_0x3e63c6===Infinity||_0x107539===Infinity)return;if(isNaN(_0x3e63c6)||isNaN(_0x107539))return;_0x3a2f1f=_0x3a2f1f||0x0;if(_0x3a2f1f>0x0){if(_0x1ecd1c[_0x3fc74d(0x7bd)]>_0x3e63c6)_0x3e63c6+=_0x1ecd1c[_0x3fc74d(0x3fa)]/0x2+_0x3a2f1f;if(_0x1ecd1c[_0x3fc74d(0x7bd)]<_0x3e63c6)_0x3e63c6-=_0x1ecd1c[_0x3fc74d(0x3fa)]/0x2+_0x3a2f1f;}if(_0x13f4c2)this[_0x3fc74d(0xafd)](_0x3e63c6,_0x107539,![]);_0x3e63c6-=_0x1ecd1c['_homeX'],_0x107539-=_0x1ecd1c['_homeY'],_0x1ecd1c[_0x3fc74d(0x607)](_0x3e63c6,_0x107539,_0x2eac21);if(Imported['VisuMZ_0_CoreEngine'])_0x1ecd1c[_0x3fc74d(0x472)](_0x364fd7||'Linear');},Game_Battler['prototype']['moveBattlerHomeDistance']=function(_0x4756c5,_0x298bb2,_0x54beee,_0x37a4cf,_0x4da1d8){const _0x6bcb33=_0x5a8ff0;if(!$gameSystem[_0x6bcb33(0xa92)]())return;const _0x424c7e=this[_0x6bcb33(0x407)]();if(!_0x424c7e)return;if(_0x37a4cf)this['setBattlerFacePoint'](_0x4756c5+_0x424c7e[_0x6bcb33(0x7bd)],_0x298bb2+_0x424c7e['_baseY'],![]);_0x4756c5+=_0x424c7e[_0x6bcb33(0x603)],_0x298bb2+=_0x424c7e[_0x6bcb33(0x27a)],_0x424c7e['startHomeMove'](_0x4756c5,_0x298bb2,_0x54beee,_0x4da1d8),this[_0x6bcb33(0xbe2)]=_0x4756c5,this[_0x6bcb33(0x260)]=_0x298bb2;},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9fc)]=function(_0x472f17,_0x54dc95,_0xa7c89f,_0x410ade,_0x51dd8c,_0x345314){const _0xb079d3=_0x5a8ff0;if(!$gameSystem[_0xb079d3(0xa92)]())return;const _0x3d0c89=this['battler']();if(!_0x3d0c89)return;_0x345314=_0x345314||0x0;if(_0x345314>0x0){if(_0x3d0c89['_baseX']>_0x472f17)_0x472f17+=_0x3d0c89['width']/0x2+_0x345314;if(_0x3d0c89[_0xb079d3(0x7bd)]<_0x472f17)_0x472f17-=_0x3d0c89[_0xb079d3(0x3fa)]/0x2+_0x345314;}if(_0x410ade)this[_0xb079d3(0xafd)](_0x472f17,_0x54dc95,![]);_0x3d0c89[_0xb079d3(0x762)](_0x472f17,_0x54dc95,_0xa7c89f,_0x51dd8c),this[_0xb079d3(0xbe2)]=_0x472f17,this[_0xb079d3(0x260)]=_0x54dc95;},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x529)]=function(_0x6a88b8,_0x17bf56,_0x136b5c){const _0x14a899=_0x5a8ff0;if(!$gameSystem[_0x14a899(0xa92)]())return;const _0x49b904=this['battler']();if(!_0x49b904)return;_0x49b904[_0x14a899(0x845)](_0x6a88b8,_0x17bf56,_0x136b5c);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x138)]=function(_0x1d1626,_0x107dec){const _0x543152=_0x5a8ff0;if(!$gameSystem[_0x543152(0xa92)]())return;const _0x5c56ff=this['battler']();if(!_0x5c56ff)return;_0x5c56ff[_0x543152(0x72e)](_0x1d1626,_0x107dec);},Game_Battler[_0x5a8ff0(0xb6e)]['spinBattler']=function(_0x513970,_0x28410b,_0x287c10,_0x4395d3){const _0x101aa4=_0x5a8ff0;if(!$gameSystem[_0x101aa4(0xa92)]())return;const _0x50485d=this[_0x101aa4(0x407)]();if(!_0x50485d)return;_0x50485d[_0x101aa4(0x222)](_0x513970,_0x28410b,_0x287c10,_0x4395d3);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaf9)]=function(_0x54c955,_0x54dce0,_0x19ca9e,_0x12b62d){const _0x22a107=_0x5a8ff0;if(!$gameSystem[_0x22a107(0xa92)]())return;const _0x169834=this[_0x22a107(0x407)]();if(!_0x169834)return;this[_0x22a107(0x34b)]()&&(_0x54c955*=-0x1,_0x54dce0*=-0x1),_0x169834[_0x22a107(0xa97)](_0x54c955,_0x54dce0,_0x19ca9e,_0x12b62d);},Game_Battler['prototype'][_0x5a8ff0(0x72b)]=function(_0x2ec2d1,_0x1c0606,_0x1d9b9a,_0x128964){if(!$gameSystem['isSideView']())return;const _0x50db3c=this['battler']();if(!_0x50db3c)return;_0x50db3c['startGrow'](_0x2ec2d1,_0x1c0606,_0x1d9b9a,_0x128964);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x165)]=function(_0x1d54d1,_0x25d940,_0x54071c){const _0x11feb9=_0x5a8ff0;if(!$gameSystem[_0x11feb9(0xa92)]())return;const _0xe71c26=this['battler']();if(!_0xe71c26)return;_0xe71c26[_0x11feb9(0x55e)](_0x1d54d1,_0x25d940,_0x54071c);},Game_Battler['prototype']['clearFreezeMotion']=function(){const _0x5563fd=_0x5a8ff0,_0x1a594b=!!this[_0x5563fd(0x5ce)];this[_0x5563fd(0x5ce)]=undefined,_0x1a594b&&(this[_0x5563fd(0x9b7)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x431)]=function(){const _0x2fbb52=_0x5a8ff0;if(!SceneManager[_0x2fbb52(0x5c8)]())return;const _0x18268d=this[_0x2fbb52(0x407)]();if(!_0x18268d)return;let _0x31df88=this[_0x2fbb52(0x34b)]()?_0x18268d[_0x2fbb52(0x846)]:_0x18268d[_0x2fbb52(0x14e)][_0x2fbb52(0x846)];_0x31df88&&_0x31df88[_0x2fbb52(0x681)](0x0);},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5da)]=function(_0x303824,_0x45342d,_0x4e6814){const _0x4f6fcf=_0x5a8ff0;if(this['isEnemy']()&&!this[_0x4f6fcf(0xb75)]())return;let _0x44574b=0x0,_0x4007e9=0x0;_0x303824[_0x4f6fcf(0x6d8)](/ATTACK[ ](\d+)/i)&&(_0x4007e9=Number(RegExp['$1']),_0x4007e9--);if(this[_0x4f6fcf(0x34b)]()){const _0x283bd6=this[_0x4f6fcf(0xb94)]();_0x44574b=_0x283bd6[_0x4007e9]?_0x283bd6[_0x4007e9][_0x4f6fcf(0xa1d)]:0x0;}else this['isEnemy']()&&(_0x44574b=this['svBattlerData']()[_0x4f6fcf(0xa1d)]||0x0);const _0x4d1ef5=$dataSystem['attackMotions'][_0x44574b];_0x303824[_0x4f6fcf(0x6d8)](/attack/i)&&(_0x303824=['thrust',_0x4f6fcf(0x596),_0x4f6fcf(0x226)][_0x4d1ef5[_0x4f6fcf(0xb69)]]||_0x4f6fcf(0x596)),this[_0x4f6fcf(0x5ce)]={'motionType':_0x303824,'weaponImageId':_0x45342d?_0x4d1ef5[_0x4f6fcf(0x9d4)]:0x0,'pattern':_0x4e6814};},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2d6)]=function(_0x13c564){const _0x23b0b2=_0x5a8ff0;if(!_0x13c564)return![];return _0x13c564[_0x23b0b2(0x6b8)]()===this[_0x23b0b2(0x6b8)]();},Game_Battler['prototype']['isOpponent']=function(_0x3b82de){const _0x3b4b5d=_0x5a8ff0;if(!_0x3b82de)return![];return _0x3b82de['opponentsUnit']()===this[_0x3b4b5d(0x6b8)]();},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x913)]=function(){return![];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x913)]=function(){const _0x1a4f37=_0x5a8ff0;return this[_0x1a4f37(0x30f)]()['match'](/\$/i);},Game_Enemy['prototype'][_0x5a8ff0(0x913)]=function(){const _0x49681c=_0x5a8ff0;return this[_0x49681c(0xb75)]()&&this[_0x49681c(0xaae)]()[_0x49681c(0x6d8)](/\$/i);},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Actor_setup']=Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)],Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)]=function(_0x144dac){const _0x140ae5=_0x5a8ff0;VisuMZ[_0x140ae5(0xbb3)][_0x140ae5(0xaf7)]['call'](this,_0x144dac),this[_0x140ae5(0xb9d)]();},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb9d)]=function(){const _0x398538=_0x5a8ff0;this['_battlePortrait']='',this[_0x398538(0x749)]()&&this['actor']()[_0x398538(0x494)][_0x398538(0x6d8)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x69c)]=function(){const _0x4cf7a0=_0x5a8ff0;if(this[_0x4cf7a0(0x600)]()!=='')return this['getBattlePortrait']();else{if(Imported[_0x4cf7a0(0xc12)]&&this['getMenuImage']()!=='')return this[_0x4cf7a0(0x3e8)]();}return'';},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x600)]=function(){const _0xc9e24=_0x5a8ff0;if(this[_0xc9e24(0x7d1)]===undefined)this[_0xc9e24(0xb9d)]();return this['_battlePortrait'];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7a6)]=function(_0x583849){const _0x1dcf3a=_0x5a8ff0;if(this[_0x1dcf3a(0x7d1)]===undefined)this[_0x1dcf3a(0xb9d)]();this[_0x1dcf3a(0x7d1)]=_0x583849;if(SceneManager['isSceneBattle']()&&$gameParty[_0x1dcf3a(0x211)]()[_0x1dcf3a(0x597)](this)){const _0x59453f=SceneManager[_0x1dcf3a(0x973)][_0x1dcf3a(0x694)];_0x59453f&&_0x59453f[_0x1dcf3a(0xb92)](this);}},Game_Actor['prototype'][_0x5a8ff0(0x83b)]=function(){return!![];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb0c)]=function(){const _0x2a5094=_0x5a8ff0;if(!this[_0x2a5094(0x82e)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x2a5094(0xb6e)]['isAutoBattle'][_0x2a5094(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x9c5)]=Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6d3)],Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6d3)]=function(){const _0x1772c4=_0x5a8ff0;if(BattleManager[_0x1772c4(0x671)]&&!ConfigManager[_0x1772c4(0x3e0)])return this[_0x1772c4(0x6c1)]();else{return VisuMZ[_0x1772c4(0xbb3)]['Game_Actor_makeActionList'][_0x1772c4(0x31b)](this);;}},Game_Actor['prototype'][_0x5a8ff0(0x6c1)]=function(){const _0x2371da=_0x5a8ff0,_0x26266d=[],_0x28e377=new Game_Action(this);return _0x28e377[_0x2371da(0x420)](),_0x26266d['push'](_0x28e377),_0x26266d;},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1b4)]=function(){const _0x355d41=_0x5a8ff0;return this['currentClass']()[_0x355d41(0x494)][_0x355d41(0x6d8)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x355d41(0x194)](/[\r\n]+/):VisuMZ['BattleCore'][_0x355d41(0xba1)]['ActorCmd'][_0x355d41(0x863)];},Game_Actor['prototype'][_0x5a8ff0(0x7a5)]=function(){const _0x51c775=_0x5a8ff0;if(this[_0x51c775(0x827)][_0x51c775(0xa4f)]!==undefined)return this['_cache'][_0x51c775(0xa4f)];return this[_0x51c775(0x749)]()[_0x51c775(0x494)][_0x51c775(0x6d8)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x51c775(0x827)][_0x51c775(0xa4f)]=eval(RegExp['$1']),this[_0x51c775(0x827)][_0x51c775(0x4e4)]=eval(RegExp['$2'])):this[_0x51c775(0x827)]['svAnchorX']=Game_Battler[_0x51c775(0xb6e)][_0x51c775(0x7a5)][_0x51c775(0x31b)](this),this[_0x51c775(0x827)][_0x51c775(0xa4f)];},Game_Actor[_0x5a8ff0(0xb6e)]['svBattlerAnchorY']=function(){const _0x1da1d5=_0x5a8ff0;if(this[_0x1da1d5(0x827)][_0x1da1d5(0x4e4)]!==undefined)return this[_0x1da1d5(0x827)][_0x1da1d5(0x4e4)];return this[_0x1da1d5(0x749)]()[_0x1da1d5(0x494)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x1da1d5(0x827)][_0x1da1d5(0xa4f)]=eval(RegExp['$1']),this[_0x1da1d5(0x827)][_0x1da1d5(0x4e4)]=eval(RegExp['$2'])):this[_0x1da1d5(0x827)][_0x1da1d5(0x4e4)]=Game_Battler[_0x1da1d5(0xb6e)][_0x1da1d5(0x73b)][_0x1da1d5(0x31b)](this),this[_0x1da1d5(0x827)][_0x1da1d5(0x4e4)];},Game_Actor['prototype']['svBattlerShadowVisible']=function(){const _0xe34893=_0x5a8ff0;if(this[_0xe34893(0x827)][_0xe34893(0x658)]!==undefined)return this[_0xe34893(0x827)][_0xe34893(0x658)];if(this[_0xe34893(0x749)]()[_0xe34893(0x494)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0xe34893(0x827)][_0xe34893(0x658)]=!![];else this[_0xe34893(0x749)]()[_0xe34893(0x494)][_0xe34893(0x6d8)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache']['svShadow']=![]:this['_cache'][_0xe34893(0x658)]=Game_Battler[_0xe34893(0xb6e)][_0xe34893(0x143)][_0xe34893(0x31b)](this);return this[_0xe34893(0x827)]['svShadow'];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x977)]=function(){const _0x167da2=_0x5a8ff0;return VisuMZ['BattleCore'][_0x167da2(0xba1)][_0x167da2(0x1ba)][_0x167da2(0x3f6)];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x474)]=function(){const _0x466eb5=_0x5a8ff0,_0x5e7bd4=this['weapons'](),_0x443ea3=_0x5e7bd4[0x0]?_0x5e7bd4[0x0][_0x466eb5(0xa1d)]:0x0,_0x5a8006=$dataSystem[_0x466eb5(0x631)][_0x443ea3];_0x5a8006&&this[_0x466eb5(0x2f9)](_0x5a8006[_0x466eb5(0x9d4)]);},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7e7)]=function(_0x27e425){const _0x2ca7af=_0x5a8ff0;Game_Battler[_0x2ca7af(0xb6e)]['performAction'][_0x2ca7af(0x31b)](this,_0x27e425),this[_0x2ca7af(0x5ca)](_0x27e425);},Game_Actor['prototype'][_0x5a8ff0(0x798)]=function(){const _0x48f06f=_0x5a8ff0,_0x123ee7=this['weapons'](),_0x354ac9=_0x123ee7[0x0]?_0x123ee7[0x0]['wtypeId']:0x0;return $dataSystem[_0x48f06f(0x631)][_0x354ac9];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x26a)]=function(_0x385d6a){const _0x5506d8=_0x5a8ff0;_0x385d6a=_0x385d6a||0x1,_0x385d6a--;const _0x5bb769=this[_0x5506d8(0xb94)]();return _0x5bb769[_0x385d6a]?_0x5bb769[_0x385d6a][_0x5506d8(0x759)]:0x0;},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x56f)]=function(_0x1d3f0e){const _0x4560f6=_0x5a8ff0;_0x1d3f0e=_0x1d3f0e||0x1,_0x1d3f0e--;const _0x2e89b2=this[_0x4560f6(0xb94)](),_0x117977=_0x2e89b2[_0x1d3f0e]?_0x2e89b2[_0x1d3f0e][_0x4560f6(0xa1d)]:0x0;return $dataSystem[_0x4560f6(0x631)][_0x117977];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6c0)]=function(_0x3807cb){const _0xced4c9=_0x5a8ff0;_0x3807cb=_0x3807cb||0x1,_0x3807cb--;const _0x187c1b=this[_0xced4c9(0xb94)](),_0x55785d=_0x187c1b[_0x3807cb]?_0x187c1b[_0x3807cb][_0xced4c9(0xa1d)]:0x0,_0x48a91e=$dataSystem[_0xced4c9(0x631)][_0x55785d];if(_0x48a91e){if(_0x48a91e[_0xced4c9(0xb69)]===0x0)this[_0xced4c9(0x5bd)](_0xced4c9(0x4f6));else{if(_0x48a91e[_0xced4c9(0xb69)]===0x1)this['requestMotion'](_0xced4c9(0x596));else _0x48a91e[_0xced4c9(0xb69)]===0x2&&this[_0xced4c9(0x5bd)]('missile');}this[_0xced4c9(0x2f9)](_0x48a91e[_0xced4c9(0x9d4)]);}},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x514)]=function(_0x38c8b5){const _0x1b52ce=_0x5a8ff0;if(this[_0x1b52ce(0x34b)]()){const _0x4f4926=this[_0x1b52ce(0xb94)]();if(_0x4f4926[_0x1b52ce(0x6b9)]>0x0){const _0x2ad992=_0x4f4926[_0x38c8b5];if(_0x2ad992)_0x38c8b5=this[_0x1b52ce(0xa71)]()[_0x1b52ce(0x70f)](_0x2ad992);}}this[_0x1b52ce(0x7d9)]=_0x38c8b5||0x0,this[_0x1b52ce(0x827)]={};},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x50b)]=function(){const _0x308bad=_0x5a8ff0;this[_0x308bad(0x7d9)]=this[_0x308bad(0x7d9)]||0x0,this[_0x308bad(0x7d9)]++,this['_cache']={};},Game_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x21c)]=function(){const _0x4cc9fb=_0x5a8ff0;this[_0x4cc9fb(0x7d9)]=undefined,this[_0x4cc9fb(0x827)]={};},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Actor_equips']=Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa71)],Game_Actor[_0x5a8ff0(0xb6e)]['equips']=function(){const _0x522ed2=_0x5a8ff0;let _0x2f07a5=VisuMZ[_0x522ed2(0xbb3)][_0x522ed2(0x2c2)]['call'](this);if(this['_tempEquipCheck'])return _0x2f07a5;if(this[_0x522ed2(0x7d9)]!==undefined){this[_0x522ed2(0x63a)]=!![];const _0x2c0f82=this[_0x522ed2(0xb4e)]();for(let _0x5791b2=0x0;_0x5791b2<_0x2c0f82[_0x522ed2(0x6b9)];_0x5791b2++){_0x2c0f82[_0x5791b2]===0x1&&this[_0x522ed2(0x7d9)]!==_0x5791b2&&(_0x2f07a5[_0x5791b2]=null);}this[_0x522ed2(0x63a)]=undefined;}return _0x2f07a5;},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x590)]=function(_0x32626d){const _0xafb7f2=_0x5a8ff0;return _0x32626d['isActor']()?_0x32626d[_0xafb7f2(0xb94)]()['length']||0x1:0x1;},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x725)]=function(_0xf6c97c,_0x4b7794){const _0x1df072=_0x5a8ff0;_0xf6c97c&&_0xf6c97c[_0x1df072(0x34b)]()&&_0xf6c97c[_0x1df072(0x514)](_0x4b7794),this[_0x1df072(0x7b2)]();},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x31d)]=function(_0x140c87){const _0xa17eff=_0x5a8ff0;_0x140c87&&_0x140c87[_0xa17eff(0x34b)]()&&_0x140c87['clearActiveWeaponSlot'](),this['callNextMethod']();},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x323)]=function(){const _0x7ac535=_0x5a8ff0;let _0x1b1724=_0x7ac535(0x323);if(this[_0x7ac535(0x174)](_0x1b1724))return this['_cache'][_0x1b1724];return this[_0x7ac535(0x827)][_0x1b1724]=this[_0x7ac535(0x580)](this[_0x7ac535(0x749)]()),this[_0x7ac535(0x827)][_0x1b1724];},Game_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb01)]=function(){const _0x2e6936=_0x5a8ff0;let _0x1b8899=_0x2e6936(0xb01);if(this[_0x2e6936(0x174)](_0x1b8899))return this[_0x2e6936(0x827)][_0x1b8899];return this[_0x2e6936(0x827)][_0x1b8899]=this['createBattleUIOffsetY'](this['actor']()),this[_0x2e6936(0x827)][_0x1b8899];},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Enemy_setup']=Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)],Game_Enemy[_0x5a8ff0(0xb6e)]['setup']=function(_0xa2b8c9,_0xc6428a,_0x77f80e){const _0x13f341=_0x5a8ff0;_0xa2b8c9=DataManager[_0x13f341(0x5f2)](_0xa2b8c9),VisuMZ[_0x13f341(0xbb3)]['Game_Enemy_setup'][_0x13f341(0x31b)](this,_0xa2b8c9,_0xc6428a,_0x77f80e),Imported[_0x13f341(0x9ad)]&&this['initElementStatusCore'](),this[_0x13f341(0x65a)](),this[_0x13f341(0x329)](),this[_0x13f341(0x726)](),Imported[_0x13f341(0x9ad)]&&this[_0x13f341(0x1eb)]();},Game_Enemy['prototype'][_0x5a8ff0(0x65a)]=function(){const _0x42a344=_0x5a8ff0,_0x9ba050=VisuMZ[_0x42a344(0xbb3)][_0x42a344(0xba1)][_0x42a344(0x85b)];this[_0x42a344(0x64f)]=_0x9ba050[_0x42a344(0x1a6)],this[_0x42a344(0x1a2)]={},this[_0x42a344(0x5e4)]();},Game_Enemy[_0x5a8ff0(0xb6e)]['setupBattleCoreData']=function(){const _0xd17555=_0x5a8ff0,_0x27d8d1=VisuMZ['BattleCore']['Settings'][_0xd17555(0x85b)],_0x18c602=this['enemy']()[_0xd17555(0x494)];this['_svBattlerData']={'name':'','wtypeId':_0x27d8d1[_0xd17555(0x3af)],'collapse':_0x27d8d1[_0xd17555(0x169)],'motionIdle':_0x27d8d1[_0xd17555(0x8e3)],'width':_0x27d8d1[_0xd17555(0x263)]||0x40,'height':_0x27d8d1[_0xd17555(0x21d)]||0x40,'anchorX':_0x27d8d1[_0xd17555(0x69b)]||0x0,'anchorY':_0x27d8d1['AnchorY']||0x0,'shadow':_0x27d8d1['Shadow']};_0x18c602[_0xd17555(0x6d8)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0xd17555(0x64f)]=Number(RegExp['$1']));const _0x608854=this[_0xd17555(0x1a2)];if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW BATTLER: (.*)>/i))_0x608854[_0xd17555(0xa4b)]=String(RegExp['$1']);else{if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x39c556=String(RegExp['$1'])[_0xd17555(0x194)](/[\r\n]+/)['remove']('');_0x608854[_0xd17555(0xa4b)]=DataManager['processRandomizedData'](_0x39c556);}}_0x18c602['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x608854['anchorX']=eval(RegExp['$1']),_0x608854[_0xd17555(0xbb9)]=eval(RegExp['$2']));if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW COLLAPSE>/i))_0x608854[_0xd17555(0x5d8)]=!![];else _0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x608854[_0xd17555(0x5d8)]=![]);if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW SHOW SHADOW>/i))_0x608854[_0xd17555(0x8ac)]=!![];else _0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x608854[_0xd17555(0x8ac)]=![]);if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x608854[_0xd17555(0x44d)]=String(RegExp['$1'])[_0xd17555(0x44e)]()[_0xd17555(0xb20)]();else{if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0xb102b=String(RegExp['$1'])[_0xd17555(0x194)](/[\r\n]+/)['remove']('');_0x608854['motionIdle']=DataManager['processRandomizedData'](_0xb102b);}}_0x18c602['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x608854[_0xd17555(0x3fa)]=Number(RegExp['$1']),_0x608854[_0xd17555(0x75c)]=Number(RegExp['$2']));if(_0x18c602[_0xd17555(0x6d8)](/<SIDEVIEW WEAPON: (.*)>/i))_0x608854[_0xd17555(0xa1d)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x18c602['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x354cd0=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xd17555(0xc1d)](''),_0x425c48=DataManager[_0xd17555(0x454)](_0x354cd0);_0x608854['wtypeId']=DataManager[_0xd17555(0x7d4)](_0x425c48);}}if(Imported[_0xd17555(0x9ad)]){const _0x20b5c6=this['getTraitSetKeys']();for(const _0x44d4b8 of _0x20b5c6){const _0x5abee6=this[_0xd17555(0x74c)](_0x44d4b8)['Name'][_0xd17555(0x692)]()[_0xd17555(0xb20)](),_0x3b09e8=_0x44d4b8[_0xd17555(0x692)]()[_0xd17555(0xb20)]();if(_0x18c602['match'](VisuMZ[_0xd17555(0x122)][_0xd17555(0x318)][_0xd17555(0x3f0)[_0xd17555(0x907)](_0x3b09e8,_0x5abee6)]))_0x608854[_0xd17555(0xa4b)]=String(RegExp['$1']);else{if(_0x18c602[_0xd17555(0x6d8)](VisuMZ[_0xd17555(0x122)][_0xd17555(0x318)][_0xd17555(0xb7e)['format'](_0x3b09e8,_0x5abee6)])){const _0x1f790e=String(RegExp['$1'])[_0xd17555(0x194)](/[\r\n]+/)['remove']('');_0x608854[_0xd17555(0xa4b)]=DataManager['processRandomizedData'](_0x1f790e);}}if(_0x18c602[_0xd17555(0x6d8)](VisuMZ[_0xd17555(0x122)][_0xd17555(0x318)][_0xd17555(0x43d)['format'](_0x3b09e8,_0x5abee6)]))_0x608854[_0xd17555(0xa1d)]=DataManager[_0xd17555(0x7d4)](RegExp['$1']);else{if(_0x18c602[_0xd17555(0x6d8)](VisuMZ[_0xd17555(0x122)]['RegExp'][_0xd17555(0x9fd)['format'](_0x3b09e8,_0x5abee6)])){const _0x434042=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xd17555(0xc1d)](''),_0x305ee6=DataManager['processRandomizedData'](_0x434042);_0x608854[_0xd17555(0xa1d)]=DataManager[_0xd17555(0x7d4)](_0x305ee6);}}if(_0x18c602[_0xd17555(0x6d8)](VisuMZ[_0xd17555(0x122)]['RegExp'][_0xd17555(0x618)['format'](_0x3b09e8,_0x5abee6)]))_0x608854['motionIdle']=String(RegExp['$1'])[_0xd17555(0x44e)]()[_0xd17555(0xb20)]();else{if(_0x18c602[_0xd17555(0x6d8)](VisuMZ[_0xd17555(0x122)][_0xd17555(0x318)][_0xd17555(0xc17)[_0xd17555(0x907)](_0x3b09e8,_0x5abee6)])){const _0x324c97=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xd17555(0xc1d)]('');_0x608854['motionIdle']=DataManager[_0xd17555(0x454)](_0x324c97);}}}}},Game_Enemy[_0x5a8ff0(0xb6e)]['attackAnimationId1']=function(){const _0x337f07=_0x5a8ff0;return this[_0x337f07(0x64f)]||0x0;},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x689)]=function(){const _0x20a0b4=_0x5a8ff0;return this[_0x20a0b4(0xbfe)]();},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x26a)]=function(_0x344fef){const _0x34c5ed=_0x5a8ff0;return this[_0x34c5ed(0xbfe)]();},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2e3)]=function(){const _0x7645df=_0x5a8ff0;if(this[_0x7645df(0xb15)]()[_0x7645df(0x494)][_0x7645df(0x6d8)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x7645df(0xb6e)][_0x7645df(0x2e3)][_0x7645df(0x31b)](this);},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x76b)]=function(){const _0x4391b5=_0x5a8ff0;if(this['enemy']()[_0x4391b5(0x494)][_0x4391b5(0x6d8)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2a3)]=function(){const _0x358f52=_0x5a8ff0,_0x5a62a4=[];for(const _0x5f32d7 of this[_0x358f52(0xb15)]()['actions']){const _0x2b77a1=$dataSkills[_0x5f32d7[_0x358f52(0x644)]];if(_0x2b77a1&&!_0x5a62a4['includes'](_0x2b77a1))_0x5a62a4[_0x358f52(0x23b)](_0x2b77a1);}return _0x5a62a4;},Game_Enemy['prototype'][_0x5a8ff0(0x323)]=function(){const _0x5807a9=_0x5a8ff0;let _0x188dcf=_0x5807a9(0x323);if(this[_0x5807a9(0x174)](_0x188dcf))return this[_0x5807a9(0x827)][_0x188dcf];return this['_cache'][_0x188dcf]=this[_0x5807a9(0x580)](this[_0x5807a9(0xb15)]()),this[_0x5807a9(0x827)][_0x188dcf];},Game_Enemy[_0x5a8ff0(0xb6e)]['battleUIOffsetY']=function(){const _0x258b53=_0x5a8ff0;let _0x24ea5d=_0x258b53(0xb01);if(this['checkCacheKey'](_0x24ea5d))return this['_cache'][_0x24ea5d];return this[_0x258b53(0x827)][_0x24ea5d]=this[_0x258b53(0x1c6)](this[_0x258b53(0xb15)]()),this[_0x258b53(0x827)][_0x24ea5d];},Game_Enemy[_0x5a8ff0(0xb6e)]['svBattlerData']=function(){const _0x22f8da=_0x5a8ff0;if(this[_0x22f8da(0x1a2)]!==undefined)return this[_0x22f8da(0x1a2)];return this[_0x22f8da(0x329)](),this[_0x22f8da(0x1a2)];},Game_Enemy['prototype'][_0x5a8ff0(0xb75)]=function(){const _0x2810db=_0x5a8ff0;return this['svBattlerData']()[_0x2810db(0xa4b)]!=='';},Game_Enemy['prototype']['svBattlerName']=function(){const _0x5ebe2a=_0x5a8ff0;return this[_0x5ebe2a(0xb6c)]()[_0x5ebe2a(0xa4b)];},Game_Enemy['prototype'][_0x5a8ff0(0x977)]=function(){const _0x4445c8=_0x5a8ff0;return this['hasSvBattler']()?VisuMZ['BattleCore'][_0x4445c8(0xba1)][_0x4445c8(0x1ba)][_0x4445c8(0x3f6)]:VisuMZ['BattleCore'][_0x4445c8(0xba1)][_0x4445c8(0x85b)]['SmoothImage'];},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7e7)]=function(_0x12b883){const _0xb8679=_0x5a8ff0;Game_Battler[_0xb8679(0xb6e)][_0xb8679(0x7e7)][_0xb8679(0x31b)](this,_0x12b883);if(this[_0xb8679(0xb75)]())this[_0xb8679(0x5ca)](_0x12b883);},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x21f)]=function(){const _0x1e36b4=_0x5a8ff0,_0x3c63f0=this[_0x1e36b4(0xb6c)]()[_0x1e36b4(0xa1d)]||0x0,_0x3b0a63=$dataSystem[_0x1e36b4(0x631)][_0x3c63f0];if(_0x3b0a63){if(_0x3b0a63[_0x1e36b4(0xb69)]===0x0)this[_0x1e36b4(0x5bd)](_0x1e36b4(0x4f6));else{if(_0x3b0a63[_0x1e36b4(0xb69)]===0x1)this[_0x1e36b4(0x5bd)](_0x1e36b4(0x596));else _0x3b0a63[_0x1e36b4(0xb69)]===0x2&&this[_0x1e36b4(0x5bd)](_0x1e36b4(0x226));}}},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x474)]=function(){const _0x5d7e4d=_0x5a8ff0,_0x135dda=this['svBattlerData']()[_0x5d7e4d(0xa1d)]||0x0,_0x21a704=$dataSystem[_0x5d7e4d(0x631)][_0x135dda];_0x21a704&&this[_0x5d7e4d(0x2f9)](_0x21a704['weaponImageId']);},Game_Enemy['prototype'][_0x5a8ff0(0x798)]=function(){const _0x39ddcc=_0x5a8ff0,_0x2356ee=this[_0x39ddcc(0xb6c)]()[_0x39ddcc(0xa1d)]||0x0;return $dataSystem[_0x39ddcc(0x631)][_0x2356ee];},Game_Enemy[_0x5a8ff0(0xb6e)]['getAttackMotionSlot']=function(_0x137182){const _0x40f548=_0x5a8ff0;return this[_0x40f548(0x798)]();},Game_Enemy[_0x5a8ff0(0xb6e)]['performDamage']=function(){const _0x2aea64=_0x5a8ff0;Game_Battler[_0x2aea64(0xb6e)][_0x2aea64(0x3bc)][_0x2aea64(0x31b)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this[_0x2aea64(0x5bd)]('damage'),SoundManager[_0x2aea64(0xabf)]();},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa0a)]=function(){const _0x3afb02=_0x5a8ff0;Game_Battler[_0x3afb02(0xb6e)]['performEvasion']['call'](this),this[_0x3afb02(0x5bd)](_0x3afb02(0x85f));},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x911)]=function(){const _0x4d804a=_0x5a8ff0;Game_Battler['prototype'][_0x4d804a(0x911)]['call'](this),this[_0x4d804a(0x5bd)](_0x4d804a(0x85f));},Game_Enemy[_0x5a8ff0(0xb6e)]['performCounter']=function(){const _0x211bb5=_0x5a8ff0;Game_Battler['prototype']['performCounter'][_0x211bb5(0x31b)](this),this[_0x211bb5(0x21f)]();},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8ca)]=function(){const _0x2c903a=_0x5a8ff0;if(this[_0x2c903a(0xb75)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x2c903a(0xb6c)]()[_0x2c903a(0x5d8)];}else return!![];},Game_Enemy[_0x5a8ff0(0xb6e)]['svBattlerAnchorX']=function(){return this['svBattlerData']()['anchorX'];},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x73b)]=function(){const _0x5ae778=_0x5a8ff0;return this['svBattlerData']()[_0x5ae778(0xbb9)];},Game_Enemy[_0x5a8ff0(0xb6e)]['svBattlerShadowVisible']=function(){const _0x17f896=_0x5a8ff0;return this[_0x17f896(0xb6c)]()[_0x17f896(0x8ac)];},VisuMZ['BattleCore'][_0x5a8ff0(0x8b0)]=Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb0d)],Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb0d)]=function(_0x4849e8){const _0x5f55f8=_0x5a8ff0;VisuMZ['BattleCore']['Game_Enemy_transform'][_0x5f55f8(0x31b)](this,_0x4849e8),this[_0x5f55f8(0x65a)](),this[_0x5f55f8(0x329)]();const _0x2a8a82=this[_0x5f55f8(0x407)]();_0x2a8a82&&(_0x2a8a82[_0x5f55f8(0x620)]=undefined,_0x2a8a82[_0x5f55f8(0x2b2)](this));},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e4)]=function(){const _0x9c33bc=_0x5a8ff0,_0x42b0ac=VisuMZ[_0x9c33bc(0xbb3)][_0x9c33bc(0xba1)]['Enemy'];this[_0x9c33bc(0x441)]=_0x42b0ac['NameDamageVisibility']??0x0;},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x491)]=function(){const _0x101b73=_0x5a8ff0;return this[_0x101b73(0x441)]&&this['_nameTempVisibleDuration']>0x0;},Game_Enemy[_0x5a8ff0(0xb6e)]['updateNameTempVisibility']=function(){const _0x400a8c=_0x5a8ff0;this[_0x400a8c(0x441)]&&this[_0x400a8c(0x441)]>0x0&&this[_0x400a8c(0x441)]--;},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x36a)]=function(){const _0x51f4f6=_0x5a8ff0;this[_0x51f4f6(0x441)]=0x0;},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x726)]=function(){const _0x15efd3=_0x5a8ff0;this[_0x15efd3(0x89b)]();const _0x223e8b=this[_0x15efd3(0xb15)]()[_0x15efd3(0x494)]||'';if(_0x223e8b[_0x15efd3(0x6d8)](/<ASPECT NAME:[ ](.*)>/i)){const _0x52e5fa=String(RegExp['$1']);this[_0x15efd3(0x32a)]()[_0x15efd3(0xa4b)]=_0x52e5fa[_0x15efd3(0x907)](this[_0x15efd3(0x9af)]());}_0x223e8b['match'](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x15efd3(0x32a)]()['iconIndex']=Number(RegExp['$1'])),_0x223e8b[_0x15efd3(0x6d8)](/<ASPECT COLOR:[ ](.*)>/i)&&(this[_0x15efd3(0x32a)]()['nameColor']=String(RegExp['$1'])),_0x223e8b['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x15efd3(0x32a)]()[_0x15efd3(0x8fb)]=String(RegExp['$1']));},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x89b)]=function(){const _0xf9601a=_0x5a8ff0,_0x95c378=VisuMZ[_0xf9601a(0xbb3)][_0xf9601a(0xba1)][_0xf9601a(0x85b)]['AspectNameFmt']??_0xf9601a(0x303);this[_0xf9601a(0x130)]={'name':_0x95c378[_0xf9601a(0x907)](this[_0xf9601a(0x9af)]()),'iconIndex':VisuMZ[_0xf9601a(0xbb3)]['Settings'][_0xf9601a(0x85b)][_0xf9601a(0xf9)]??0x1a,'nameColor':VisuMZ['BattleCore']['Settings']['Enemy']['AspectColor']??'2','description':''};},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x32a)]=function(){const _0x3bb166=_0x5a8ff0;if(this[_0x3bb166(0x130)]===undefined)this['setupBattleCoreAspects']();return this[_0x3bb166(0x130)];},Game_Enemy['prototype']['hasAspectData']=function(){const _0x1fc228=_0x5a8ff0;return(this[_0x1fc228(0x32a)]()[_0x1fc228(0x8fb)]||'')[_0x1fc228(0x6b9)]>0x0;},Game_BattlerBase['prototype'][_0x5a8ff0(0x622)]=function(){const _0x4b626d=_0x5a8ff0;return VisuMZ[_0x4b626d(0xbb3)][_0x4b626d(0xba1)][_0x4b626d(0x8c7)][_0x4b626d(0xfa)];},Game_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x622)]=function(){const _0x4eb1d7=_0x5a8ff0,_0x1fc018=this[_0x4eb1d7(0xb15)]()?this['enemy']()[_0x4eb1d7(0x494)]||'':'';if(_0x1fc018[_0x4eb1d7(0x6d8)](/<POPUP POSITION: HEAD>/i))return _0x4eb1d7(0x26f);else{if(_0x1fc018[_0x4eb1d7(0x6d8)](/<POPUP POSITION: CENTER>/i))return _0x4eb1d7(0x5a5);else{if(_0x1fc018[_0x4eb1d7(0x6d8)](/<POPUP POSITION: BASE>/i))return _0x4eb1d7(0x670);}}return Game_BattlerBase[_0x4eb1d7(0xb6e)]['damagePopupPosition']['call'](this);},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2ed)]=function(){return 0x0;},Game_Enemy[_0x5a8ff0(0xb6e)]['damagePopupOffsetX']=function(){const _0x2b4d82=_0x5a8ff0,_0x2baf46=this[_0x2b4d82(0xb15)]()?this[_0x2b4d82(0xb15)]()[_0x2b4d82(0x494)]||'':'';if(_0x2baf46[_0x2b4d82(0x6d8)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x2b4d82(0xb6e)][_0x2b4d82(0x2ed)]['call'](this);},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4cd)]=function(){return 0x0;},Game_Enemy[_0x5a8ff0(0xb6e)]['damagePopupOffsetY']=function(){const _0x1b80b9=_0x5a8ff0,_0x17ef8e=this[_0x1b80b9(0xb15)]()?this[_0x1b80b9(0xb15)]()[_0x1b80b9(0x494)]||'':'';if(_0x17ef8e[_0x1b80b9(0x6d8)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x1b80b9(0xb6e)][_0x1b80b9(0x4cd)][_0x1b80b9(0x31b)](this);},Game_Unit[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa35)]=function(_0x2b901a){const _0x1933bd=_0x5a8ff0;for(const _0x4449ee of this[_0x1933bd(0x2c0)]()){if(_0x4449ee)_0x4449ee[_0x1933bd(0xa35)](_0x2b901a);}},Game_Unit[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3b5)]=function(){const _0x2e83fd=_0x5a8ff0,_0x12d20c=this[_0x2e83fd(0x4c4)]();return _0x12d20c[Math['randomInt'](_0x12d20c['length'])];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x3f5)]=Game_Party[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x86f)],Game_Party[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x86f)]=function(_0xbb814e){const _0x493c7c=_0x5a8ff0;VisuMZ[_0x493c7c(0xbb3)]['Game_Party_addActor']['call'](this,_0xbb814e),BattleManager[_0x493c7c(0xabe)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x874)]=Game_Party[_0x5a8ff0(0xb6e)]['removeActor'],Game_Party[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbf1)]=function(_0xde306c){const _0x293e72=_0x5a8ff0;VisuMZ[_0x293e72(0xbb3)][_0x293e72(0x874)][_0x293e72(0x31b)](this,_0xde306c),BattleManager[_0x293e72(0xabe)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x770)]=Game_Troop[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)],Game_Troop[_0x5a8ff0(0xb6e)]['setup']=function(_0x2e52a8){const _0x582df4=_0x5a8ff0;$gameTemp[_0x582df4(0x2d7)](),$gameTemp[_0x582df4(0x757)](_0x2e52a8),VisuMZ[_0x582df4(0xbb3)]['Game_Troop_setup'][_0x582df4(0x31b)](this,_0x2e52a8),this[_0x582df4(0x6a4)]();},VisuMZ['BattleCore']['Game_Troop_expTotal']=Game_Troop[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xf2)],Game_Troop[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xf2)]=function(){const _0x1289aa=_0x5a8ff0;let _0x4873fd=VisuMZ[_0x1289aa(0xbb3)]['Game_Troop_expTotal'][_0x1289aa(0x31b)](this);return this['expRate']&&(_0x4873fd*=this['expRate']()),Math[_0x1289aa(0x447)](_0x4873fd);},Game_Troop[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x10a)]=function(){return 0x1;},Game_Troop[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6a4)]=function(){const _0x338fa2=_0x5a8ff0,_0x5f1107=DataManager[_0x338fa2(0x7c9)](this[_0x338fa2(0x868)]()['id']);if(_0x5f1107['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x419769=RegExp['$1'][_0x338fa2(0x194)](',')['map'](_0x54bd5a=>Number(_0x54bd5a));this[_0x338fa2(0xa5e)](),this[_0x338fa2(0x2fb)](_0x419769);}},Game_Troop['prototype'][_0x5a8ff0(0xa5e)]=function(){const _0x3715d9=_0x5a8ff0;let _0x363a5a='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x363a5a+=_0x3715d9(0x7cf),Imported['VisuMZ_2_BattleSystemBTB']&&(VisuMZ[_0x3715d9(0xba9)][_0x3715d9(0x978)]<1.11&&(alert(_0x363a5a[_0x3715d9(0x907)]('BTB')),SceneManager[_0x3715d9(0xad2)]())),Imported[_0x3715d9(0x775)]&&(VisuMZ[_0x3715d9(0x6c9)][_0x3715d9(0x978)]<1.19&&(alert(_0x363a5a[_0x3715d9(0x907)](_0x3715d9(0x40e))),SceneManager[_0x3715d9(0xad2)]())),Imported[_0x3715d9(0x195)]&&(VisuMZ[_0x3715d9(0x90b)][_0x3715d9(0x978)]<1.15&&(alert(_0x363a5a['format']('STB')),SceneManager[_0x3715d9(0xad2)]()));},Game_Troop['prototype'][_0x5a8ff0(0x2fb)]=function(_0x387581){const _0x18cb26=_0x5a8ff0;this['_namesCount']={};for(const _0x59463f of this['members']()){if(!_0x59463f)continue;_0x59463f[_0x18cb26(0x350)]('');}for(const _0x382833 of _0x387581){const _0x5cd492=$dataTroops[_0x382833];if(_0x5cd492)this[_0x18cb26(0x6c8)](_0x5cd492);}this[_0x18cb26(0xb13)]();},Game_Troop[_0x5a8ff0(0xb6e)]['addExtendedTroopMembers']=function(_0x2c33cd){const _0x5f1fed=_0x5a8ff0;for(const _0x569d7e of _0x2c33cd[_0x5f1fed(0x2c0)]){if($dataEnemies[_0x569d7e[_0x5f1fed(0x2b8)]]){const _0x4a98f8=_0x569d7e[_0x5f1fed(0x2b8)],_0x388114=_0x569d7e['x'],_0x304666=_0x569d7e['y'],_0x2e9daa=new Game_Enemy(_0x4a98f8,_0x388114,_0x304666);_0x569d7e[_0x5f1fed(0x702)]&&_0x2e9daa[_0x5f1fed(0xb7d)](),this[_0x5f1fed(0xae6)][_0x5f1fed(0x23b)](_0x2e9daa);}}},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Map_setupBattleback']=Game_Map[_0x5a8ff0(0xb6e)]['setupBattleback'],Game_Map[_0x5a8ff0(0xb6e)]['setupBattleback']=function(){const _0x4bec9b=_0x5a8ff0;VisuMZ[_0x4bec9b(0xbb3)]['Game_Map_setupBattleback'][_0x4bec9b(0x31b)](this),this[_0x4bec9b(0x62e)]();},Game_Map[_0x5a8ff0(0xb6e)]['setupBattlebackBattleCore']=function(){const _0x22267b=_0x5a8ff0;this['_regionBattleback1']={},this[_0x22267b(0x7d3)]={};if(!$dataMap)return;const _0x27b7af=$dataMap['note'];if(!_0x27b7af)return;const _0x137085=_0x27b7af[_0x22267b(0x6d8)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x137085)for(const _0x50b2ef of _0x137085){_0x50b2ef[_0x22267b(0x6d8)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x180502=Number(RegExp['$1']),_0x5e916a=Number(RegExp['$2']),_0x598e15=_0x5e916a===0x1?this[_0x22267b(0x97d)]:this[_0x22267b(0x7d3)],_0x430030=String(RegExp['$3']);_0x598e15[_0x180502]=_0x430030;}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x9d3)]=Game_Map['prototype'][_0x5a8ff0(0x2ef)],Game_Map[_0x5a8ff0(0xb6e)]['battleback1Name']=function(){const _0x59ffcc=_0x5a8ff0;if(!BattleManager['isBattleTest']()){const _0x17ce6b=$gamePlayer[_0x59ffcc(0xb98)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x59ffcc(0x97d)]&&this[_0x59ffcc(0x97d)][_0x17ce6b])return this['_regionBattleback1'][_0x17ce6b];}return VisuMZ[_0x59ffcc(0xbb3)][_0x59ffcc(0x9d3)]['call'](this);},VisuMZ['BattleCore'][_0x5a8ff0(0xa8b)]=Game_Map['prototype']['battleback2Name'],Game_Map['prototype'][_0x5a8ff0(0x384)]=function(){const _0x140f4d=_0x5a8ff0;if(!BattleManager[_0x140f4d(0xa8c)]()){const _0x5b10f2=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x140f4d(0x97d)]&&this['_regionBattleback2'][_0x5b10f2])return this[_0x140f4d(0x7d3)][_0x5b10f2];}return VisuMZ[_0x140f4d(0xbb3)]['Game_Map_battleback2Name'][_0x140f4d(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x255)]=Game_Map[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x93c)],Game_Map[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x93c)]=function(){const _0x7ee676=_0x5a8ff0;let _0x32a7b5=JsonEx['makeDeepCopy'](VisuMZ[_0x7ee676(0xbb3)][_0x7ee676(0x255)][_0x7ee676(0x31b)](this));return VisuMZ[_0x7ee676(0xbb3)][_0x7ee676(0x7eb)](_0x32a7b5);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x7eb)]=function(_0x519946){const _0x1ae610=_0x5a8ff0;var _0x104df9,_0xf7b811,_0x125815;for(_0x125815=_0x519946['length']-0x1;_0x125815>0x0;_0x125815--){_0x104df9=Math['floor'](Math[_0x1ae610(0x539)]()*(_0x125815+0x1)),_0xf7b811=_0x519946[_0x125815],_0x519946[_0x125815]=_0x519946[_0x104df9],_0x519946[_0x104df9]=_0xf7b811;}return _0x519946;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x231)]=Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x461)],Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x461)]=function(_0xd889d7){const _0x282f4b=_0x5a8ff0;return $gameTemp[_0x282f4b(0x1f9)](this),VisuMZ['BattleCore']['Game_Interpreter_PluginCommand']['call'](this,_0xd889d7);},VisuMZ[_0x5a8ff0(0xbb3)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x15f)],Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x15f)]=function(){const _0x331b5f=_0x5a8ff0;if(SceneManager[_0x331b5f(0x5c8)]())switch(this[_0x331b5f(0x5d2)]){case _0x331b5f(0x8d5):if(Imported[_0x331b5f(0x9f4)]){if($gameScreen['battleCameraData']()[_0x331b5f(0x1ea)]>0x0)return!![];this[_0x331b5f(0x5d2)]='';}break;case _0x331b5f(0x300):if(BattleManager['_spriteset']['isAnimationPlaying']())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x2bc):if(BattleManager[_0x331b5f(0x566)][_0x331b5f(0x7b6)]())return!![];this[_0x331b5f(0x5d2)]='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x331b5f(0x542)]()[_0x331b5f(0x8f8)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x331b5f(0x196)]>0x0)return!![];this['_waitMode']='';}break;case _0x331b5f(0x5b0):if(BattleManager[_0x331b5f(0x566)][_0x331b5f(0x3cd)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x865):if(BattleManager['_spriteset'][_0x331b5f(0x27c)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x180):if(BattleManager[_0x331b5f(0x566)][_0x331b5f(0x14d)]())return!![];this['_waitMode']='';break;case'battlelog':if(BattleManager[_0x331b5f(0xb61)][_0x331b5f(0x71e)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0xc0f):if(BattleManager[_0x331b5f(0x566)][_0x331b5f(0x349)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x7fa):if(BattleManager['_spriteset'][_0x331b5f(0x21a)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x3a8):if(BattleManager[_0x331b5f(0x566)][_0x331b5f(0x153)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x478):if(BattleManager['_spriteset'][_0x331b5f(0x745)]())return!![];this[_0x331b5f(0x5d2)]='';break;case _0x331b5f(0x182):if(Imported[_0x331b5f(0x19c)]){if(BattleManager['_spriteset'][_0x331b5f(0x5c3)]())return!![];this[_0x331b5f(0x5d2)]='';}break;case _0x331b5f(0x2b1):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x331b5f(0x542)]()['skewDuration']>0x0)return!![];this[_0x331b5f(0x5d2)]='';}break;case _0x331b5f(0x8c5):if(BattleManager[_0x331b5f(0x566)]['isAnyoneSpinning']())return!![];this[_0x331b5f(0x5d2)]='';break;case'battleZoom':if(Imported[_0x331b5f(0x9f4)]){if($gameScreen[_0x331b5f(0x542)]()['zoomDuration']>0x0)return!![];this[_0x331b5f(0x5d2)]='';}break;case _0x331b5f(0x63f):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0x331b5f(0x566)][_0x331b5f(0x9f5)]){if(BattleManager['_spriteset'][_0x331b5f(0x9f5)]())return!![];this['_waitMode']='battleInjectAni';}else this[_0x331b5f(0x5d2)]='';break;}break;case _0x331b5f(0xbe0):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0x331b5f(0x566)]['isAnyoneInjectAnimating']())return!![];this[_0x331b5f(0x5d2)]='';}break;}return VisuMZ[_0x331b5f(0xbb3)][_0x331b5f(0x647)]['call'](this);},VisuMZ['BattleCore']['Game_Interpreter_command301']=Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x271)],Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x271)]=function(_0x1bef97){const _0x7ff89b=_0x5a8ff0;return!$gameParty['inBattle']()?this['command301_PreBattleEvent'](_0x1bef97):VisuMZ['BattleCore'][_0x7ff89b(0xb2c)][_0x7ff89b(0x31b)](this,_0x1bef97);},Game_Interpreter[_0x5a8ff0(0xb6e)]['command3011']=function(_0x1a5b45){const _0x22c965=_0x5a8ff0;return VisuMZ[_0x22c965(0xbb3)]['Game_Interpreter_command301'][_0x22c965(0x31b)](this,_0x1a5b45),BattleManager[_0x22c965(0x272)](_0x1bc79b=>{const _0x18f4fe=_0x22c965;this[_0x18f4fe(0x5bc)][this['_indent']]=_0x1bc79b;}),!![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xc09)]=function(_0x4efe80){const _0x4545e0=_0x5a8ff0,_0x488cfa=$dataCommonEvents[_0x4efe80];if(!_0x488cfa)return![];if(_0x488cfa[_0x4545e0(0x1e1)][_0x4545e0(0x6b9)]<=0x1)return![];return!![];},Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa09)]=function(_0xd5b8a5){const _0x3cc086=_0x5a8ff0,_0x5ae74c=VisuMZ[_0x3cc086(0xbb3)][_0x3cc086(0xba1)][_0x3cc086(0x2dc)],_0x26c32c=_0x5ae74c[_0x3cc086(0x3b1)],_0x3eb920=$dataCommonEvents[_0x26c32c];if(_0x3eb920&&VisuMZ[_0x3cc086(0xbb3)][_0x3cc086(0xc09)](_0x26c32c)){const _0x429aa4=this['isOnCurrentMap']()?this[_0x3cc086(0x96b)]:0x0,_0x4a3c66=_0x3eb920[_0x3cc086(0x1e1)];this[_0x3cc086(0x337)](_0x4a3c66,_0x429aa4),this['_list']=JsonEx[_0x3cc086(0x78e)](this[_0x3cc086(0x8cf)]);const _0x21b357={'code':0xbc3,'indent':this[_0x3cc086(0xb47)],'parameters':JsonEx[_0x3cc086(0x78e)](_0xd5b8a5)};return this['_list'][_0x3cc086(0x192)](this['_index']+0x1,0x0,_0x21b357),!![];}else return VisuMZ[_0x3cc086(0xbb3)][_0x3cc086(0xb2c)][_0x3cc086(0x31b)](this,_0xd5b8a5);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x344)]=BattleManager[_0x5a8ff0(0xae3)],BattleManager[_0x5a8ff0(0xae3)]=function(){const _0x324963=_0x5a8ff0;VisuMZ[_0x324963(0xbb3)][_0x324963(0x344)][_0x324963(0x31b)](this),this['onEncounterBattleCore']();},BattleManager[_0x5a8ff0(0xc08)]=function(){const _0x50f1d7=_0x5a8ff0,_0x18283e=VisuMZ[_0x50f1d7(0xbb3)][_0x50f1d7(0xba1)]['Mechanics'],_0x1ac87d=_0x18283e[_0x50f1d7(0x3b1)];_0x1ac87d&&VisuMZ[_0x50f1d7(0xbb3)][_0x50f1d7(0xc09)](_0x1ac87d)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp['reserveCommonEvent'](_0x18283e['BattleStartEvent']),$gameMap[_0x50f1d7(0x4ec)](),$gameMap[_0x50f1d7(0x96d)]['_preBattleCommonEvent']=!![]),_0x18283e[_0x50f1d7(0x369)]>0x0&&(this[_0x50f1d7(0xb10)]=!![]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x772)]=Scene_Map[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9ff)],Scene_Map[_0x5a8ff0(0xb6e)]['updateCallMenu']=function(){const _0x1e4cf1=_0x5a8ff0;if(BattleManager[_0x1e4cf1(0xa76)])return;VisuMZ[_0x1e4cf1(0xbb3)][_0x1e4cf1(0x772)][_0x1e4cf1(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x8c2)]=Scene_Map[_0x5a8ff0(0xb6e)]['launchBattle'],Scene_Map['prototype']['launchBattle']=function(){const _0x2aa6b1=_0x5a8ff0;BattleManager[_0x2aa6b1(0xa76)]?this['battleCorePreBattleCommonEvent']():VisuMZ[_0x2aa6b1(0xbb3)][_0x2aa6b1(0x8c2)][_0x2aa6b1(0x31b)](this);},Scene_Map[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8c1)]=function(){const _0x1c6386=_0x5a8ff0;this[_0x1c6386(0xbb4)]=!![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x60c)]=SceneManager['isSceneChanging'],SceneManager[_0x5a8ff0(0xa49)]=function(){const _0x353932=_0x5a8ff0;if(BattleManager[_0x353932(0xa76)])return![];return VisuMZ[_0x353932(0xbb3)][_0x353932(0x60c)][_0x353932(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x452)]=Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e7)],Game_Interpreter[_0x5a8ff0(0xb6e)]['terminate']=function(){const _0x1ebbb7=_0x5a8ff0;VisuMZ[_0x1ebbb7(0xbb3)][_0x1ebbb7(0x452)]['call'](this),this[_0x1ebbb7(0x3a6)]&&(this[_0x1ebbb7(0x3a6)]=undefined,SceneManager[_0x1ebbb7(0x973)][_0x1ebbb7(0x81e)]());},Scene_Map[_0x5a8ff0(0xb6e)]['battleCoreResumeLaunchBattle']=function(){const _0x38a6b5=_0x5a8ff0;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x38a6b5(0x52a)]=!![],this[_0x38a6b5(0x4cb)]();},VisuMZ['BattleCore']['Scene_Map_initializeAfter']=Scene_Map['prototype'][_0x5a8ff0(0x4aa)],Scene_Map['prototype'][_0x5a8ff0(0x4aa)]=function(){const _0xdb4a8b=_0x5a8ff0;VisuMZ['BattleCore']['Scene_Map_initializeAfter'][_0xdb4a8b(0x31b)](this),BattleManager[_0xdb4a8b(0x52a)]&&(this['_active']=!![],BattleManager[_0xdb4a8b(0x52a)]=undefined);},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Map_initialize']=Scene_Map[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)],Scene_Map[_0x5a8ff0(0xb6e)]['initialize']=function(){const _0x579bf9=_0x5a8ff0;VisuMZ[_0x579bf9(0xbb3)][_0x579bf9(0x43e)][_0x579bf9(0x31b)](this),$gameTemp[_0x579bf9(0x2d7)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x4d2)]=Scene_ItemBase['prototype'][_0x5a8ff0(0x795)],Scene_ItemBase['prototype'][_0x5a8ff0(0x795)]=function(){const _0x4c7296=_0x5a8ff0;VisuMZ['BattleCore'][_0x4c7296(0x4d2)]['call'](this);if(this[_0x4c7296(0x12a)]()[_0x4c7296(0x494)]['match'](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x4c7296(0x12a)]()[_0x4c7296(0x494)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x4c7296(0x162)]=[]),DataManager[_0x4c7296(0x50a)](this['item']())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x9e0)]=Scene_Options[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x92b)],Scene_Options[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x92b)]=function(){const _0x3205ba=_0x5a8ff0;let _0x3cdf11=VisuMZ[_0x3205ba(0xbb3)][_0x3205ba(0x9e0)][_0x3205ba(0x31b)](this);const _0x1c2171=VisuMZ[_0x3205ba(0xbb3)][_0x3205ba(0xba1)];if(_0x1c2171[_0x3205ba(0x4be)][_0x3205ba(0x80d)]&&_0x1c2171[_0x3205ba(0x4be)][_0x3205ba(0x414)])_0x3cdf11+=0x2;if(_0x1c2171[_0x3205ba(0x395)]['AddOption']&&_0x1c2171['HpGauge'][_0x3205ba(0x414)])_0x3cdf11+=0x1;return _0x3cdf11;},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Battle_initialize']=Scene_Battle['prototype'][_0x5a8ff0(0x4aa)],Scene_Battle[_0x5a8ff0(0xb6e)]['initialize']=function(){const _0x56aeb5=_0x5a8ff0;VisuMZ[_0x56aeb5(0xbb3)][_0x56aeb5(0x3d9)][_0x56aeb5(0x31b)](this),this[_0x56aeb5(0x279)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x348)]=Scene_Battle[_0x5a8ff0(0xb6e)]['start'],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x84c)]=function(){const _0x5f1ce9=_0x5a8ff0;SceneManager[_0x5f1ce9(0x35f)]()?(Scene_Message['prototype'][_0x5f1ce9(0x84c)][_0x5f1ce9(0x31b)](this),this[_0x5f1ce9(0x566)]&&this['_spriteset']['update'](),BattleManager[_0x5f1ce9(0x398)]&&BattleManager[_0x5f1ce9(0x921)]()):(VisuMZ[_0x5f1ce9(0xbb3)]['Scene_Battle_start'][_0x5f1ce9(0x31b)](this),$gameTroop[_0x5f1ce9(0x2eb)]());},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x8e0)]=Scene_Battle['prototype'][_0x5a8ff0(0x4cb)],Scene_Battle['prototype'][_0x5a8ff0(0x4cb)]=function(){const _0x3424da=_0x5a8ff0;SceneManager[_0x3424da(0xa60)]()?Scene_Message[_0x3424da(0xb6e)][_0x3424da(0x4cb)][_0x3424da(0x31b)](this):VisuMZ['BattleCore'][_0x3424da(0x8e0)][_0x3424da(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x58f)]=Scene_Battle['prototype'][_0x5a8ff0(0x5e7)],Scene_Battle['prototype'][_0x5a8ff0(0x5e7)]=function(){const _0x17562b=_0x5a8ff0;SceneManager[_0x17562b(0xa60)]()?Scene_Message[_0x17562b(0xb6e)][_0x17562b(0x5e7)][_0x17562b(0x31b)](this):VisuMZ[_0x17562b(0xbb3)][_0x17562b(0x58f)]['call'](this),$gameTemp[_0x17562b(0x57c)](),this[_0x17562b(0x279)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x380)]=function(){const _0x826b1d=_0x5a8ff0;if(ConfigManager[_0x826b1d(0x3c4)]&&ConfigManager[_0x826b1d(0xa1a)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x826b1d(0x483)]()==='border')return![];else{return Scene_Message[_0x826b1d(0xb6e)][_0x826b1d(0x380)][_0x826b1d(0x31b)](this);;}}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa95)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x205)],Scene_Battle[_0x5a8ff0(0xb6e)]['createCancelButton']=function(){const _0x568bba=_0x5a8ff0;VisuMZ[_0x568bba(0xbb3)][_0x568bba(0xa95)][_0x568bba(0x31b)](this),this['battleLayoutStyle']()===_0x568bba(0xbad)&&this[_0x568bba(0x2c1)]();},Scene_Battle['prototype'][_0x5a8ff0(0x286)]=function(_0x240827){const _0x3b525e=_0x5a8ff0;_0x240827?(this['_windowLayer']['x']=(Graphics[_0x3b525e(0x3fa)]-Graphics[_0x3b525e(0x650)])/0x2,this[_0x3b525e(0x437)]['y']=(Graphics[_0x3b525e(0x75c)]-Graphics[_0x3b525e(0x830)])/0x2):(this['_windowLayer']['x']=Graphics[_0x3b525e(0x3fa)]*0xa,this[_0x3b525e(0x437)]['y']=Graphics[_0x3b525e(0x75c)]*0xa);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x200)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa9b)],Scene_Battle['prototype'][_0x5a8ff0(0xa9b)]=function(){const _0x1bac35=_0x5a8ff0,_0x36f52f=BattleManager[_0x1bac35(0x749)]();VisuMZ[_0x1bac35(0xbb3)][_0x1bac35(0x200)][_0x1bac35(0x31b)](this);if(_0x36f52f){if(_0x36f52f===BattleManager[_0x1bac35(0x749)]())return;if(_0x36f52f===BattleManager['_subject'])return;if(_0x36f52f[_0x1bac35(0x407)]())_0x36f52f[_0x1bac35(0x407)]()[_0x1bac35(0x1bf)]();}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x87e)]=Scene_Battle['prototype'][_0x5a8ff0(0x498)],Scene_Battle['prototype']['selectPreviousCommand']=function(){const _0xfcd37e=_0x5a8ff0,_0x247971=BattleManager[_0xfcd37e(0x749)]();if(_0x247971&&_0x247971['battler'])_0x247971[_0xfcd37e(0x407)]()[_0xfcd37e(0x1bf)]();VisuMZ[_0xfcd37e(0xbb3)][_0xfcd37e(0x87e)][_0xfcd37e(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x4ea)]=Scene_Battle[_0x5a8ff0(0xb6e)]['createAllWindows'],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x179)]=function(){const _0xeb42d2=_0x5a8ff0;this[_0xeb42d2(0x654)](),VisuMZ['BattleCore']['Scene_Battle_createAllWindows'][_0xeb42d2(0x31b)](this),this[_0xeb42d2(0x7a3)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x64a)]=Scene_Battle['prototype'][_0x5a8ff0(0x810)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x810)]=function(){const _0x2786be=_0x5a8ff0;if(VisuMZ[_0x2786be(0xbb3)][_0x2786be(0xba1)][_0x2786be(0x10f)][_0x2786be(0x5fd)])return VisuMZ['BattleCore'][_0x2786be(0xba1)][_0x2786be(0x10f)][_0x2786be(0x5fd)][_0x2786be(0x31b)](this);return VisuMZ[_0x2786be(0xbb3)][_0x2786be(0x64a)]['call'](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x4b3)]=Scene_Battle['prototype'][_0x5a8ff0(0xbc4)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbc4)]=function(){const _0x53f1f0=_0x5a8ff0;VisuMZ[_0x53f1f0(0xbb3)][_0x53f1f0(0x4b3)][_0x53f1f0(0x31b)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xac4)]=function(){const _0x3eaa50=_0x5a8ff0,_0x5e3f76=this[_0x3eaa50(0x9ab)];_0x5e3f76[_0x3eaa50(0xba6)](_0x3eaa50(0xa73),this[_0x3eaa50(0x44b)][_0x3eaa50(0x164)](this)),_0x5e3f76[_0x3eaa50(0xba6)](_0x3eaa50(0x73d),this[_0x3eaa50(0x6ec)]['bind'](this));const _0x35f577=this['battleLayoutStyle']();switch(_0x35f577){case'xp':case'portrait':return this[_0x3eaa50(0x9ab)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x44b)]=function(){const _0x35c21=_0x5a8ff0;BattleManager[_0x35c21(0x671)]=!![],$gameParty['makeActions'](),this[_0x35c21(0xa9b)](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6ec)]=function(){const _0x2acbe5=_0x5a8ff0;this[_0x2acbe5(0x42f)]()?(this['_callSceneOptions']=!![],this['_logWindow'][_0x2acbe5(0x23b)](_0x2acbe5(0xaaf),VisuMZ[_0x2acbe5(0xbb3)][_0x2acbe5(0xba1)][_0x2acbe5(0x3fe)][_0x2acbe5(0x9e6)])):this[_0x2acbe5(0x471)]();},Scene_Battle[_0x5a8ff0(0xb6e)]['isQueueOptionsMenu']=function(){const _0x1d81bb=_0x5a8ff0;return BattleManager[_0x1d81bb(0x5b3)]();},Scene_Battle[_0x5a8ff0(0xb6e)]['callOptions']=function(){const _0xa7bcb6=_0x5a8ff0;this['_callSceneOptions']=![],this[_0xa7bcb6(0x566)][_0xa7bcb6(0x25f)](),this['_windowLayer'][_0xa7bcb6(0xb22)]=![];if(BattleManager[_0xa7bcb6(0xa8c)]())($dataSystem['battleback1Name']||$dataSystem[_0xa7bcb6(0x384)])&&SceneManager[_0xa7bcb6(0xa5b)]();else($gameMap[_0xa7bcb6(0x2ef)]()||$gameMap['battleback2Name']())&&SceneManager[_0xa7bcb6(0xa5b)]();SceneManager[_0xa7bcb6(0x23b)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0xa7bcb6(0x398)]=BattleManager[_0xa7bcb6(0x749)]());},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3f2)],Scene_Battle[_0x5a8ff0(0xb6e)]['updateBattleProcess']=function(){const _0x16e978=_0x5a8ff0;VisuMZ[_0x16e978(0xbb3)]['Scene_Battle_updateBattleProcess'][_0x16e978(0x31b)](this);if(this[_0x16e978(0x6b7)]&&!BattleManager[_0x16e978(0xbee)])this[_0x16e978(0x471)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x7f9)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)],Scene_Battle['prototype'][_0x5a8ff0(0x25f)]=function(){const _0x114bc7=_0x5a8ff0;VisuMZ[_0x114bc7(0xbb3)]['Scene_Battle_update']['call'](this),this['updateOnceParallelInterpreters']();},Scene_Battle['prototype'][_0x5a8ff0(0x7a3)]=function(){const _0x37acd1=_0x5a8ff0,_0x430ae7=this[_0x37acd1(0x57d)]();this[_0x37acd1(0x523)]=new Window_AutoBattleCancel(_0x430ae7),this['_autoBattleWindow'][_0x37acd1(0xb7d)](),this[_0x37acd1(0xa57)](this[_0x37acd1(0x523)]);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x57d)]=function(){const _0x23650f=_0x5a8ff0;return VisuMZ[_0x23650f(0xbb3)][_0x23650f(0xba1)][_0x23650f(0x4be)][_0x23650f(0x55c)][_0x23650f(0x31b)](this);},Scene_Battle[_0x5a8ff0(0xb6e)]['clearOnceParallelInterpreters']=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x676)]=function(){const _0x16da45=_0x5a8ff0;if(!this[_0x16da45(0x2ca)])return;for(const _0x59aa3d of this[_0x16da45(0x2ca)]){_0x59aa3d&&_0x59aa3d[_0x16da45(0x25f)]();}},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaf0)]=function(_0xd5465c){const _0x3a3fd3=_0x5a8ff0,_0x48a7ac=$dataCommonEvents[_0xd5465c];if(!_0x48a7ac)return;const _0x4f6d60=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x4f6d60),_0x4f6d60[_0x3a3fd3(0x15d)](_0xd5465c);},Scene_Battle[_0x5a8ff0(0xb6e)]['addOnceParallelInterpreter']=function(_0x284a5b){const _0x391486=_0x5a8ff0;this[_0x391486(0x2ca)]=this['_onceParallelInterpreters']||[],this[_0x391486(0x2ca)][_0x391486(0x23b)](_0x284a5b);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7e0)]=function(_0x806777){const _0x4cd632=_0x5a8ff0;this[_0x4cd632(0x2ca)]=this[_0x4cd632(0x2ca)]||[],this[_0x4cd632(0x2ca)][_0x4cd632(0xc1d)](_0x806777);},Game_Troop[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2eb)]=function(){const _0x57e865=_0x5a8ff0;for(const _0x105c1a of this['troop']()[_0x57e865(0x24d)]){if(!this[_0x57e865(0x564)](_0x105c1a))continue;SceneManager['_scene']['playOnceParallelTroopPage'](_0x105c1a);}},Game_Troop['prototype'][_0x5a8ff0(0x564)]=function(_0x370eae){const _0x1250fc=_0x5a8ff0;if(!_0x370eae)return;for(const _0xd31771 of _0x370eae['list']){if([0x6c,0x198][_0x1250fc(0x597)](_0xd31771[_0x1250fc(0xa07)])){const _0x189842=_0xd31771['parameters'][0x0];if(_0x189842[_0x1250fc(0x6d8)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x64d)]=function(_0x15eea1){const _0x12d8b4=_0x5a8ff0;if(!_0x15eea1)return;const _0x4eceab=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x4eceab),_0x4eceab[_0x12d8b4(0x312)](_0x15eea1);};function Game_BattleOnceParallelInterpreter(){const _0x148cbb=_0x5a8ff0;this[_0x148cbb(0x4aa)](...arguments);}Game_BattleOnceParallelInterpreter[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Game_Interpreter[_0x5a8ff0(0xb6e)]),Game_BattleOnceParallelInterpreter['prototype'][_0x5a8ff0(0x18c)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x15d)]=function(_0x24cf95){const _0x35f1e2=_0x5a8ff0,_0x182519=$dataCommonEvents[_0x24cf95];_0x182519?this['setup'](_0x182519[_0x35f1e2(0x1e1)],0x0):this[_0x35f1e2(0x5e7)]();},Game_BattleOnceParallelInterpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e7)]=function(){const _0x176e8b=_0x5a8ff0;if(!SceneManager[_0x176e8b(0x5c8)]())return;SceneManager['_scene'][_0x176e8b(0x7e0)](this),Game_Interpreter[_0x176e8b(0xb6e)][_0x176e8b(0x5e7)][_0x176e8b(0x31b)](this);},Game_BattleOnceParallelInterpreter[_0x5a8ff0(0xb6e)]['setTroopPage']=function(_0x193c4a){const _0x2dfb6c=_0x5a8ff0;_0x193c4a?this['setup'](_0x193c4a[_0x2dfb6c(0x1e1)],0x0):this[_0x2dfb6c(0x5e7)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9fa)]=function(){const _0x462e8a=_0x5a8ff0;return VisuMZ[_0x462e8a(0xbb3)][_0x462e8a(0xba1)][_0x462e8a(0x3fe)]['DisablePartyCmd'];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x79b)]=Scene_Battle[_0x5a8ff0(0xb6e)]['startPartyCommandSelection'],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa0f)]=function(){const _0x347198=_0x5a8ff0;this[_0x347198(0x9fa)]()?this['onDisabledPartyCommandSelection']():VisuMZ[_0x347198(0xbb3)][_0x347198(0x79b)][_0x347198(0x31b)](this);},Scene_Battle['prototype']['onDisabledPartyCommandSelection']=function(){const _0x56d0f7=_0x5a8ff0;if(BattleManager[_0x56d0f7(0xbb6)]())this[_0x56d0f7(0xa9b)]();else BattleManager['isTpb']()&&VisuMZ[_0x56d0f7(0xbb3)][_0x56d0f7(0x79b)][_0x56d0f7(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x30e)]=Scene_Battle[_0x5a8ff0(0xb6e)]['commandFight'],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1ce)]=function(){const _0x539f94=_0x5a8ff0;BattleManager['isTpb']()?(this['tpbCommandFight'](),this[_0x539f94(0xbf9)]()):VisuMZ[_0x539f94(0xbb3)][_0x539f94(0x30e)]['call'](this);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa7a)]=function(){const _0x54c1aa=_0x5a8ff0;if(!VisuMZ[_0x54c1aa(0xbb3)][_0x54c1aa(0x4c1)])return;if(Imported[_0x54c1aa(0x775)]&&BattleManager['isCTB']())return;const _0x5db023=$gameParty[_0x54c1aa(0x4c4)]()[_0x54c1aa(0x6e0)](_0x1681f4=>_0x1681f4['isTpbCharged']()&&_0x1681f4[_0x54c1aa(0x7ca)]());BattleManager[_0x54c1aa(0x711)]=_0x5db023[0x0]||null,BattleManager[_0x54c1aa(0x711)]&&BattleManager[_0x54c1aa(0x711)][_0x54c1aa(0x4de)](_0x54c1aa(0x5d5));},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Battle_commandEscape']=Scene_Battle[_0x5a8ff0(0xb6e)]['commandEscape'],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1fa)]=function(){const _0x3d0067=_0x5a8ff0;VisuMZ[_0x3d0067(0xbb3)][_0x3d0067(0x871)][_0x3d0067(0x31b)](this);if(!BattleManager[_0x3d0067(0xa9d)]())BattleManager[_0x3d0067(0x711)]=null;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xc19)]=Scene_Battle[_0x5a8ff0(0xb6e)]['createActorCommandWindow'],Scene_Battle['prototype'][_0x5a8ff0(0x832)]=function(){const _0xf0a93f=_0x5a8ff0;VisuMZ[_0xf0a93f(0xbb3)]['Scene_Battle_createActorCommandWindow'][_0xf0a93f(0x31b)](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x27d)]=function(){const _0x5434f7=_0x5a8ff0,_0x29dc52=this[_0x5434f7(0x8d1)];_0x29dc52[_0x5434f7(0xba6)](_0x5434f7(0x62a),this[_0x5434f7(0x280)][_0x5434f7(0x164)](this)),_0x29dc52[_0x5434f7(0xba6)]('autoBattle',this[_0x5434f7(0xb86)]['bind'](this)),_0x29dc52[_0x5434f7(0xba6)](_0x5434f7(0xaf4),this[_0x5434f7(0xbb2)][_0x5434f7(0x164)](this)),BattleManager[_0x5434f7(0xa9d)]()&&(this['isPartyCommandWindowDisabled']()?delete _0x29dc52[_0x5434f7(0x25e)][_0x5434f7(0xb8c)]:_0x29dc52[_0x5434f7(0xba6)](_0x5434f7(0xb8c),this[_0x5434f7(0x449)][_0x5434f7(0x164)](this)));},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x280)]=function(){const _0x3f05d7=_0x5a8ff0;this[_0x3f05d7(0x1fa)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb86)]=function(){const _0x27b543=_0x5a8ff0;BattleManager['actor']()[_0x27b543(0x3c5)](),BattleManager['finishActorInput'](),BattleManager[_0x27b543(0x91a)](),this[_0x27b543(0x1b8)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbb2)]=function(){const _0x1cbef7=_0x5a8ff0,_0x441c5d=BattleManager[_0x1cbef7(0x778)](),_0x19319d=this['_actorCommandWindow'][_0x1cbef7(0x372)]();_0x441c5d[_0x1cbef7(0xa4c)](_0x19319d),BattleManager[_0x1cbef7(0x749)]()[_0x1cbef7(0x61b)]($dataSkills[_0x19319d]),this['onSelectAction']();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x449)]=function(){const _0x29ad3b=_0x5a8ff0;this['tpbActorSwitchConditionsMet']()?this[_0x29ad3b(0x583)]():this[_0x29ad3b(0x41c)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x4c1)]=![],Scene_Battle['prototype'][_0x5a8ff0(0x24c)]=function(){const _0x154f59=_0x5a8ff0;if(Imported[_0x154f59(0x775)]&&BattleManager[_0x154f59(0x49c)]())return![];else{if(!VisuMZ[_0x154f59(0xbb3)][_0x154f59(0x4c1)])return![];const _0x4efb31=$gameParty[_0x154f59(0x4c4)]()[_0x154f59(0x6e0)](_0x45c292=>_0x45c292['isTpbCharged']()&&_0x45c292[_0x154f59(0x7ca)]());return _0x4efb31['length']>0x0&&BattleManager[_0x154f59(0x749)]()!==_0x4efb31[_0x4efb31[_0x154f59(0x6b9)]-0x1];}},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x583)]=function(){const _0x466847=_0x5a8ff0,_0x2e1ff0=BattleManager[_0x466847(0x749)](),_0x2fb04d=_0x2e1ff0['battler']();if(_0x2fb04d)_0x2fb04d['stepBack']();const _0x49d92e=$gameParty[_0x466847(0x4c4)]()[_0x466847(0x6e0)](_0x162df9=>_0x162df9[_0x466847(0x27f)]()&&_0x162df9['canInput']()),_0x2de041=_0x49d92e[_0x466847(0x70f)](_0x2e1ff0),_0x141659=_0x49d92e[_0x2de041+0x1];BattleManager[_0x466847(0x711)]=_0x141659||null;if(_0x141659)_0x141659['setActionState'](_0x466847(0x5d5));_0x2e1ff0['setActionState'](_0x466847(0xad6)),this['changeInputWindow']();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x41c)]=function(){const _0x1a8fb8=_0x5a8ff0;this[_0x1a8fb8(0x9ab)]['setup'](),this[_0x1a8fb8(0x8d1)][_0x1a8fb8(0x69e)]();if(!VisuMZ[_0x1a8fb8(0xbb3)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1a8fb8(0x49c)]())return;if(BattleManager[_0x1a8fb8(0x711)]){BattleManager['_currentActor']['setActionState'](_0x1a8fb8(0xad6));const _0x40077b=BattleManager[_0x1a8fb8(0x711)]['battler']();if(_0x40077b)_0x40077b[_0x1a8fb8(0x1bf)]();}BattleManager[_0x1a8fb8(0x711)]=null;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6e8)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x66c)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x66c)]=function(){const _0x558af6=_0x5a8ff0;VisuMZ['BattleCore'][_0x558af6(0x6e8)][_0x558af6(0x31b)](this),this['createHelpWindowBattleCore']();},Scene_Battle['prototype'][_0x5a8ff0(0x898)]=function(){const _0x1f0ec2=_0x5a8ff0;this[_0x1f0ec2(0x8d1)][_0x1f0ec2(0x1d0)](this['_helpWindow']),this[_0x1f0ec2(0x9ab)][_0x1f0ec2(0x1d0)](this['_helpWindow']);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x654)]=function(){const _0x4c3e2d=_0x5a8ff0;if(!VisuMZ[_0x4c3e2d(0xbb3)]['Settings']['Enemy']['NameLegacy'])return;this[_0x4c3e2d(0x467)]=new Sprite(),this[_0x4c3e2d(0x467)]['x']=this[_0x4c3e2d(0x437)]['x'],this['_enemyNameContainer']['y']=this[_0x4c3e2d(0x437)]['y'];const _0x283346=this[_0x4c3e2d(0xf8)]['indexOf'](this[_0x4c3e2d(0x437)]);this[_0x4c3e2d(0x585)](this['_enemyNameContainer'],_0x283346);for(let _0x5f0092=0x0;_0x5f0092<0x8;_0x5f0092++){const _0x4b0c95=new Window_EnemyName(_0x5f0092);this[_0x4c3e2d(0x467)]['addChild'](_0x4b0c95);}},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Battle_createEnemyWindow']=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x64b)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x64b)]=function(){const _0x67ec0b=_0x5a8ff0;VisuMZ[_0x67ec0b(0xbb3)][_0x67ec0b(0x8d4)]['call'](this),this[_0x67ec0b(0x8a3)]();},Scene_Battle[_0x5a8ff0(0xb6e)]['createMultiTargetWindows']=function(){const _0x131c2e=_0x5a8ff0;this[_0x131c2e(0x401)](!![]),this[_0x131c2e(0x401)](![]);},Scene_Battle['prototype']['multiTargetWindowRect']=function(_0xb49a4d){const _0x1cbae7=_0x5a8ff0,_0x9405cc=Window_BattleMultiTarget[_0x1cbae7(0xa12)],_0x4f47a2=this[_0x1cbae7(0x58b)](0x1,!![]);let _0xd4f8cc=_0xb49a4d?Graphics[_0x1cbae7(0x650)]-_0x9405cc:0x0;_0xd4f8cc+=_0xb49a4d?Window_BattleMultiTarget[_0x1cbae7(0xb4b)]:Window_BattleMultiTarget['ENEMY_OFFSET_X'];const _0x5a3281=[_0x1cbae7(0x20f)][_0x1cbae7(0x597)](this[_0x1cbae7(0x483)]())?0x0:this['_statusWindow'][_0x1cbae7(0x75c)];let _0x17e5cd=Graphics[_0x1cbae7(0x830)]-_0x5a3281-_0x4f47a2;return _0x17e5cd+=_0xb49a4d?Window_BattleMultiTarget[_0x1cbae7(0xa03)]:Window_BattleMultiTarget[_0x1cbae7(0x934)],new Rectangle(_0xd4f8cc,_0x17e5cd,_0x9405cc,_0x4f47a2);},Scene_Battle[_0x5a8ff0(0xb6e)]['createMultiTargetWindow']=function(_0x41f357){const _0x3290ba=_0x5a8ff0,_0x35ead9=this[_0x3290ba(0xa40)](_0x41f357),_0x7c8b4d=new Window_BattleMultiTarget(_0x35ead9,_0x41f357);this[_0x3290ba(0x3e2)](_0x7c8b4d),_0x41f357?this[_0x3290ba(0xa16)]=_0x7c8b4d:this[_0x3290ba(0x8dc)]=_0x7c8b4d;},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Battle_needsInputWindowChangeIBS']=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb80)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb80)]=function(){const _0x13ad7a=_0x5a8ff0;if(this[_0x13ad7a(0xb9f)])return![];return VisuMZ[_0x13ad7a(0xbb3)]['Scene_Battle_needsInputWindowChangeIBS'][_0x13ad7a(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x685)]=Scene_Battle['prototype'][_0x5a8ff0(0x9ca)],Scene_Battle[_0x5a8ff0(0xb6e)]['updateCancelButton']=function(){const _0x4c44e3=_0x5a8ff0;if(this['_cancelButton']&&this[_0x4c44e3(0xb9f)]){this[_0x4c44e3(0xa8a)][_0x4c44e3(0xb22)]=!![];return;}VisuMZ[_0x4c44e3(0xbb3)][_0x4c44e3(0x685)]['call'](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xaab)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x958)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x958)]=function(){const _0x1d8e89=_0x5a8ff0;if(this['_inBattleStatusMode'])return![];return VisuMZ[_0x1d8e89(0xbb3)]['Scene_Battle_isTimeActiveIBS'][_0x1d8e89(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x3f9)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x179)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x179)]=function(){const _0x340cd7=_0x5a8ff0;VisuMZ[_0x340cd7(0xbb3)][_0x340cd7(0x3f9)][_0x340cd7(0x31b)](this),this[_0x340cd7(0x1ac)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x2c5)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbc4)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbc4)]=function(){const _0x317d3d=_0x5a8ff0;VisuMZ[_0x317d3d(0xbb3)][_0x317d3d(0x2c5)][_0x317d3d(0x31b)](this);const _0x162e2b=this['_partyCommandWindow'];_0x162e2b['setHandler'](_0x317d3d(0x55f),this[_0x317d3d(0x6af)][_0x317d3d(0x164)](this,_0x162e2b));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xc00)]=Scene_Battle['prototype'][_0x5a8ff0(0x832)],Scene_Battle['prototype'][_0x5a8ff0(0x832)]=function(){const _0x396d93=_0x5a8ff0;VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindowIBS'][_0x396d93(0x31b)](this);const _0x58201f=this['_actorCommandWindow'];_0x58201f[_0x396d93(0xba6)](_0x396d93(0x55f),this[_0x396d93(0x6af)][_0x396d93(0x164)](this,_0x58201f));},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1ac)]=function(){const _0x35e87c=_0x5a8ff0,_0x2da285=this[_0x35e87c(0x41a)](),_0x1141cc=new Window_InBattleStatus(_0x2da285);this[_0x35e87c(0x3e2)](_0x1141cc),_0x1141cc['hide'](),_0x1141cc[_0x35e87c(0x69e)](),this[_0x35e87c(0xa86)]=_0x1141cc;},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x41a)]=function(){const _0x3fe1f5=_0x5a8ff0;if(VisuMZ[_0x3fe1f5(0xbb3)]['Settings'][_0x3fe1f5(0xbc8)][_0x3fe1f5(0x1a3)])return VisuMZ[_0x3fe1f5(0xbb3)][_0x3fe1f5(0xba1)][_0x3fe1f5(0xbc8)][_0x3fe1f5(0x1a3)]['call'](this);const _0x4bc5d0=Graphics[_0x3fe1f5(0x650)]>0x3e8?0x78:0x0,_0x5ed994=this[_0x3fe1f5(0xa6d)]['y']+this[_0x3fe1f5(0xa6d)]['height'],_0x3b1376=Graphics[_0x3fe1f5(0x650)]-_0x4bc5d0*0x2,_0x88a0d=Graphics[_0x3fe1f5(0x830)]-_0x5ed994-this['windowAreaHeight']();return new Rectangle(_0x4bc5d0,_0x5ed994,_0x3b1376,_0x88a0d);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6af)]=function(_0x92407b){const _0x2a96b6=_0x5a8ff0;this[_0x2a96b6(0x3e2)](this[_0x2a96b6(0xa86)]),this[_0x2a96b6(0xb9f)]=!![],this['_helpWindow'][_0x2a96b6(0x996)]();const _0x5fb91c=['xp',_0x2a96b6(0x9e7),_0x2a96b6(0xbad),_0x2a96b6(0x570),_0x2a96b6(0x20f)];let _0x5a885b=_0x5fb91c[_0x2a96b6(0x597)](this[_0x2a96b6(0x483)]());_0x5a885b&&(_0x92407b['hide'](),_0x92407b[_0x2a96b6(0x69e)]()),this['_inBattleStatusWindow'][_0x2a96b6(0x2b2)](BattleManager['actor']()||$gameParty[_0x2a96b6(0x211)]()[0x0]),this['_inBattleStatusWindow']['setReturnWindow'](_0x92407b),this[_0x2a96b6(0xa86)]['show'](),this[_0x2a96b6(0xa86)][_0x2a96b6(0x6f6)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x568)]=function(){const _0x53e1a5=_0x5a8ff0;this[_0x53e1a5(0xb9f)]=![],this[_0x53e1a5(0xa6d)]['hide']();const _0x119207=this['_inBattleStatusWindow'][_0x53e1a5(0x18a)]();_0x119207[_0x53e1a5(0x996)](),_0x119207[_0x53e1a5(0x6f6)](),_0x119207[_0x53e1a5(0x88d)](),this[_0x53e1a5(0xa86)][_0x53e1a5(0xb7d)](),this[_0x53e1a5(0xa86)][_0x53e1a5(0x69e)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x483)]=function(){const _0x17f7b3=_0x5a8ff0;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x17f7b3(0x7f8)])return this[_0x17f7b3(0x7f8)];return this[_0x17f7b3(0x7f8)]=VisuMZ[_0x17f7b3(0xbb3)][_0x17f7b3(0xba1)][_0x17f7b3(0x22e)][_0x17f7b3(0xae2)]['toLowerCase']()[_0x17f7b3(0xb20)](),this[_0x17f7b3(0x7f8)]==='sideview_ui'&&!Imported[_0x17f7b3(0xb0e)]&&(this[_0x17f7b3(0x7f8)]=_0x17f7b3(0x22f)),this['_battleLayoutStyle']===_0x17f7b3(0x20f)&&!Imported[_0x17f7b3(0x675)]&&(this['_battleLayoutStyle']='default'),this[_0x17f7b3(0x7f8)];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x560)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x82d)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x82d)]=function(){const _0x4e91d9=_0x5a8ff0,_0x26e2dc=this[_0x4e91d9(0x483)]();switch(_0x26e2dc){case _0x4e91d9(0x1e1):return this[_0x4e91d9(0x58b)](Math['max'](0x1,$gameParty[_0x4e91d9(0x62b)]()),!![]);break;case _0x4e91d9(0xbad):return this[_0x4e91d9(0x58b)](0x4,!![]);break;default:return VisuMZ[_0x4e91d9(0xbb3)][_0x4e91d9(0x560)][_0x4e91d9(0x31b)](this);break;}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x520)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x364)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x364)]=function(){const _0x3db42a=_0x5a8ff0,_0x397d94=this[_0x3db42a(0x483)]();switch(_0x397d94){case'border':return this[_0x3db42a(0x326)]();break;case'default':case _0x3db42a(0x1e1):case'xp':case _0x3db42a(0x9e7):default:return VisuMZ[_0x3db42a(0xbb3)][_0x3db42a(0x520)][_0x3db42a(0x31b)](this);break;}},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x96f)]=function(){const _0xd71a28=_0x5a8ff0,_0x2935ec=this[_0xd71a28(0x483)]();switch(_0x2935ec){case'xp':case'portrait':return this[_0xd71a28(0x119)]();break;case _0xd71a28(0xbad):return this[_0xd71a28(0x203)]();break;case'default':case _0xd71a28(0x1e1):default:return this[_0xd71a28(0xbcc)]();break;}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x8e1)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6cb)],Scene_Battle[_0x5a8ff0(0xb6e)]['partyCommandWindowRect']=function(){const _0x4348c9=_0x5a8ff0,_0x3d8f86=this[_0x4348c9(0x483)]();switch(_0x3d8f86){case'xp':case _0x4348c9(0x9e7):return this[_0x4348c9(0x278)]();break;case _0x4348c9(0xbad):return this['partyCommandWindowRectBorderStyle']();case _0x4348c9(0x22f):case'list':default:return this[_0x4348c9(0x237)]();break;}},Scene_Battle['prototype'][_0x5a8ff0(0x237)]=function(){const _0x288edb=_0x5a8ff0,_0x2f3bd4=VisuMZ['BattleCore'][_0x288edb(0xba1)]['BattleLayout'],_0x555cba=_0x2f3bd4[_0x288edb(0x3fc)]||0xc0,_0x41ba4e=this[_0x288edb(0x82d)](),_0x4b8684=this[_0x288edb(0x380)]()?Graphics[_0x288edb(0x650)]-_0x555cba:0x0,_0x4d72b3=Graphics['boxHeight']-_0x41ba4e;return new Rectangle(_0x4b8684,_0x4d72b3,_0x555cba,_0x41ba4e);},Scene_Battle[_0x5a8ff0(0xb6e)]['actorCommandWindowRect']=function(){const _0x333bb5=_0x5a8ff0;return this[_0x333bb5(0x6cb)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x16d)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7b5)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7b5)]=function(){const _0x4d5430=_0x5a8ff0;if(this['_inBattleStatusMode'])return;const _0x5a1ce8=this[_0x4d5430(0x483)]();switch(_0x5a1ce8){case'xp':case _0x4d5430(0x9e7):case'border':break;case'default':case'list':default:VisuMZ['BattleCore'][_0x4d5430(0x16d)][_0x4d5430(0x31b)](this);break;}},Scene_Battle['prototype'][_0x5a8ff0(0xbcc)]=function(){const _0x1bb5f7=_0x5a8ff0,_0x9e0d67=VisuMZ[_0x1bb5f7(0xbb3)][_0x1bb5f7(0xba1)][_0x1bb5f7(0x22e)],_0x40322b=Window_BattleStatus['prototype'][_0x1bb5f7(0xfb)](),_0x15b7ce=Graphics['boxWidth']-(_0x9e0d67[_0x1bb5f7(0x3fc)]||0xc0),_0xec87d4=this[_0x1bb5f7(0x82d)]()+_0x40322b,_0x476c96=this['isRightInputMode']()?0x0:Graphics[_0x1bb5f7(0x650)]-_0x15b7ce,_0x562733=Graphics[_0x1bb5f7(0x830)]-_0xec87d4+_0x40322b;return new Rectangle(_0x476c96,_0x562733,_0x15b7ce,_0xec87d4);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x119)]=function(){const _0x1d06fd=_0x5a8ff0,_0x507c9e=Window_BattleStatus['prototype'][_0x1d06fd(0xfb)](),_0x429b38=Graphics[_0x1d06fd(0x650)],_0x577ff7=this['windowAreaHeight']()+_0x507c9e,_0xabc3e3=0x0,_0x3ea97c=Graphics[_0x1d06fd(0x830)]-_0x577ff7+_0x507c9e;return new Rectangle(_0xabc3e3,_0x3ea97c,_0x429b38,_0x577ff7);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x278)]=function(){const _0x26ab99=_0x5a8ff0,_0x4ef1d6=Graphics[_0x26ab99(0x650)]/0x2,_0x308c1c=this['calcWindowHeight'](VisuMZ['BattleCore']['Settings'][_0x26ab99(0x22e)][_0x26ab99(0x693)],!![]),_0x5932a0=Math[_0x26ab99(0xb41)]((Graphics['boxWidth']-_0x4ef1d6)/0x2),_0xed8251=Graphics['boxHeight']-_0x308c1c-this['statusWindowRectXPStyle']()[_0x26ab99(0x75c)];return new Rectangle(_0x5932a0,_0xed8251,_0x4ef1d6,_0x308c1c);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x326)]=function(){const _0x46eed6=_0x5a8ff0,_0x339914=Graphics[_0x46eed6(0x3fa)],_0x5ade76=Math[_0x46eed6(0xb41)]((Graphics[_0x46eed6(0x650)]-_0x339914)/0x2),_0x120041=this[_0x46eed6(0xbd8)](),_0x1b600c=(Graphics[_0x46eed6(0x75c)]-Graphics[_0x46eed6(0x830)])/-0x2;return new Rectangle(_0x5ade76,_0x1b600c,_0x339914,_0x120041);},Scene_Battle['prototype'][_0x5a8ff0(0x203)]=function(){const _0x2b98e3=_0x5a8ff0,_0x52cfee=Graphics[_0x2b98e3(0x3fa)],_0x5ee28a=Math[_0x2b98e3(0xb41)]((Graphics[_0x2b98e3(0x650)]-_0x52cfee)/0x2),_0x38ba51=this['calcWindowHeight'](0x4,!![]),_0x362668=Graphics['boxHeight']-_0x38ba51+(Graphics['height']-Graphics[_0x2b98e3(0x830)])/0x2;return new Rectangle(_0x5ee28a,_0x362668,_0x52cfee,_0x38ba51);},Scene_Battle[_0x5a8ff0(0xb6e)]['partyCommandWindowRectBorderStyle']=function(){const _0x53902f=_0x5a8ff0,_0x6c06db=Math[_0x53902f(0x87f)](Graphics[_0x53902f(0x3fa)]/0x3),_0xd81d09=this[_0x53902f(0x380)]()?(Graphics[_0x53902f(0x3fa)]+Graphics[_0x53902f(0x650)])/0x2-_0x6c06db:(Graphics[_0x53902f(0x3fa)]-Graphics[_0x53902f(0x650)])/-0x2,_0x3c461e=this[_0x53902f(0x326)](),_0x604dd5=_0x3c461e['y']+_0x3c461e[_0x53902f(0x75c)],_0x19925a=this[_0x53902f(0x203)](),_0x549940=_0x19925a['y']-_0x604dd5;return new Rectangle(_0xd81d09,_0x604dd5,_0x6c06db,_0x549940);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x72c)]=function(){const _0x2e0107=_0x5a8ff0,_0x4a3a87=Math[_0x2e0107(0x447)](Graphics[_0x2e0107(0x3fa)]/0x3),_0x277cd5=Math[_0x2e0107(0xb41)]((Graphics[_0x2e0107(0x650)]-_0x4a3a87)/0x2),_0x7fbc06=this[_0x2e0107(0x559)](),_0x258884=_0x7fbc06['y'],_0x55ad1a=_0x7fbc06[_0x2e0107(0x75c)];return new Rectangle(_0x277cd5,_0x258884,_0x4a3a87,_0x55ad1a);},Scene_Battle[_0x5a8ff0(0xb6e)]['repositionCancelButtonBorderStyle']=function(){const _0x5ce1bc=_0x5a8ff0;this[_0x5ce1bc(0xa8a)]['y']=this[_0x5ce1bc(0xa6d)]['y']+this[_0x5ce1bc(0xa6d)][_0x5ce1bc(0x75c)],this[_0x5ce1bc(0x380)]()?this[_0x5ce1bc(0x483)]()===_0x5ce1bc(0xbad)?this['_cancelButton']['x']=0x8:this[_0x5ce1bc(0xa8a)]['x']=-this['_cancelButton'][_0x5ce1bc(0x3fa)]-0x4:this[_0x5ce1bc(0xa8a)]['x']=Graphics[_0x5ce1bc(0x3fa)]-(Graphics[_0x5ce1bc(0x3fa)]-Graphics[_0x5ce1bc(0x650)])/0x2-this[_0x5ce1bc(0xa8a)][_0x5ce1bc(0x3fa)]-0x4;},VisuMZ[_0x5a8ff0(0xbb3)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e1)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e1)]=function(){const _0x13ae19=_0x5a8ff0;if(this['battleLayoutStyle']()===_0x13ae19(0xbad))return this[_0x13ae19(0x72c)]();else return this['isSkillItemWindowsMiddle']()?this[_0x13ae19(0x904)]():VisuMZ[_0x13ae19(0xbb3)]['Scene_Battle_skillWindowRect']['call'](this);},VisuMZ['BattleCore']['Scene_Battle_itemWindowRect']=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8de)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8de)]=function(){const _0x2e5b06=_0x5a8ff0;if(this[_0x2e5b06(0x483)]()===_0x2e5b06(0xbad))return this['skillItemWindowRectBorderStyle']();else return this[_0x2e5b06(0x1e0)]()?this[_0x2e5b06(0x904)]():VisuMZ[_0x2e5b06(0xbb3)][_0x2e5b06(0x2a8)][_0x2e5b06(0x31b)](this);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1e0)]=function(){const _0x262e51=_0x5a8ff0;return VisuMZ[_0x262e51(0xbb3)]['Settings'][_0x262e51(0x22e)][_0x262e51(0x486)];},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x904)]=function(){const _0xc27f1a=_0x5a8ff0,_0x576d62=Sprite_Button[_0xc27f1a(0xb6e)]['blockWidth']()*0x2+0x4;let _0x132b55=Graphics[_0xc27f1a(0x650)]-_0x576d62;Imported[_0xc27f1a(0x610)]&&SceneManager[_0xc27f1a(0x1b2)]()&&(_0x132b55+=_0x576d62);const _0x195845=this[_0xc27f1a(0x5f8)](),_0x242d75=Graphics[_0xc27f1a(0x830)]-_0x195845-this['statusWindowRect']()[_0xc27f1a(0x75c)]+Window_BattleStatus[_0xc27f1a(0xb6e)]['extraHeight'](),_0x58029f=0x0;return new Rectangle(_0x58029f,_0x195845,_0x132b55,_0x242d75);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x48d)]=Scene_Battle['prototype'][_0x5a8ff0(0x57e)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x57e)]=function(){const _0x596aff=_0x5a8ff0;VisuMZ[_0x596aff(0xbb3)]['Scene_Battle_startActorSelection']['call'](this),this[_0x596aff(0xbc1)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x2e8)]=Scene_Battle['prototype'][_0x5a8ff0(0x440)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x440)]=function(){const _0x5d858c=_0x5a8ff0;VisuMZ['BattleCore']['Scene_Battle_startEnemySelection'][_0x5d858c(0x31b)](this),this[_0x5d858c(0x161)][_0x5d858c(0x9bf)](),this[_0x5d858c(0xbc1)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbc1)]=function(){const _0x116bcf=_0x5a8ff0,_0x3392b5=this[_0x116bcf(0x483)]();['xp','portrait',_0x116bcf(0xbad)][_0x116bcf(0x597)](_0x3392b5)&&this[_0x116bcf(0x8d1)][_0x116bcf(0x69e)](),(_0x3392b5===_0x116bcf(0xbad)||this[_0x116bcf(0x1e0)]())&&(this['_skillWindow'][_0x116bcf(0x69e)](),this[_0x116bcf(0xaff)][_0x116bcf(0x69e)]());},VisuMZ['BattleCore'][_0x5a8ff0(0x42e)]=Scene_Battle[_0x5a8ff0(0xb6e)]['onActorOk'],Scene_Battle[_0x5a8ff0(0xb6e)]['onActorOk']=function(){const _0x4de24d=_0x5a8ff0;VisuMZ[_0x4de24d(0xbb3)][_0x4de24d(0x42e)]['call'](this),this[_0x4de24d(0x1c9)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4c3)]=function(){const _0x4dbfb1=_0x5a8ff0;return[_0x4dbfb1(0x3fb),_0x4dbfb1(0x400),_0x4dbfb1(0xaf4)][_0x4dbfb1(0x597)](this[_0x4dbfb1(0x8d1)][_0x4dbfb1(0x5e0)]());},VisuMZ['BattleCore']['Scene_Battle_onActorCancel']=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x151)],Scene_Battle['prototype'][_0x5a8ff0(0x151)]=function(){const _0x9f4f35=_0x5a8ff0;this[_0x9f4f35(0x4c3)]()?(this[_0x9f4f35(0x694)][_0x9f4f35(0x996)](),this[_0x9f4f35(0xade)][_0x9f4f35(0xb7d)](),this[_0x9f4f35(0x8d1)][_0x9f4f35(0x88d)]()):VisuMZ[_0x9f4f35(0xbb3)]['Scene_Battle_onActorCancel'][_0x9f4f35(0x31b)](this),this[_0x9f4f35(0x358)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x2b3)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x224)],Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x224)]=function(){const _0x5ef1d9=_0x5a8ff0;if(!this[_0x5ef1d9(0x161)]['enemy']()){this['_enemyWindow'][_0x5ef1d9(0x88d)]();return;}const _0x2a336c=BattleManager[_0x5ef1d9(0x778)]();_0x2a336c[_0x5ef1d9(0x742)](this[_0x5ef1d9(0x161)][_0x5ef1d9(0xb15)]()),this['_enemyWindow'][_0x5ef1d9(0x912)](),VisuMZ[_0x5ef1d9(0xbb3)][_0x5ef1d9(0x2b3)][_0x5ef1d9(0x31b)](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6da)]=Scene_Battle[_0x5a8ff0(0xb6e)]['onEnemyCancel'],Scene_Battle[_0x5a8ff0(0xb6e)]['onEnemyCancel']=function(){const _0x3f075f=_0x5a8ff0;this[_0x3f075f(0x4c3)]()?(this[_0x3f075f(0x694)]['show'](),this[_0x3f075f(0x161)]['hide'](),this[_0x3f075f(0x8d1)][_0x3f075f(0x88d)]()):VisuMZ[_0x3f075f(0xbb3)][_0x3f075f(0x6da)][_0x3f075f(0x31b)](this),this['cancelTargetSelectionVisibility'](),this[_0x3f075f(0x161)][_0x3f075f(0x912)]();},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1c9)]=function(){const _0x5ef26d=_0x5a8ff0,_0x16911d=this[_0x5ef26d(0x483)]();(_0x16911d===_0x5ef26d(0xbad)||this[_0x5ef26d(0x1e0)]())&&(this[_0x5ef26d(0x524)][_0x5ef26d(0x6f6)](),this['_skillWindow']['active']&&this[_0x5ef26d(0x524)][_0x5ef26d(0x996)](),this[_0x5ef26d(0xaff)][_0x5ef26d(0x6f6)](),this[_0x5ef26d(0xaff)]['active']&&this[_0x5ef26d(0xaff)]['show']());},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x358)]=function(){const _0x4ba381=_0x5a8ff0,_0x111447=this[_0x4ba381(0x483)]();['xp',_0x4ba381(0x9e7),_0x4ba381(0xbad)][_0x4ba381(0x597)](_0x111447)&&this[_0x4ba381(0x8d1)][_0x4ba381(0x6f6)](),this[_0x4ba381(0x1c9)]();},Sprite_Battler[_0x5a8ff0(0x87a)]=VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x1ba)]['MotionSpeed'],VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x20c)]=Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3cc)],Sprite_Battler['prototype'][_0x5a8ff0(0x3cc)]=function(){const _0x5812cb=_0x5a8ff0;VisuMZ[_0x5812cb(0xbb3)][_0x5812cb(0x20c)]['call'](this),this[_0x5812cb(0x427)]();if(this[_0x5812cb(0x18c)]===Sprite_Enemy)this[_0x5812cb(0x68f)]();this[_0x5812cb(0xc1b)]();},Sprite_Battler['prototype']['initMembersBattleCore']=function(){const _0x2b193b=_0x5a8ff0;this[_0x2b193b(0x7bd)]=0x0,this[_0x2b193b(0x4b6)]=0x0,this[_0x2b193b(0xbe8)]=0x0,this[_0x2b193b(0x1cd)]=0x0,this[_0x2b193b(0x22d)]=0x0,this['_floatWholeDuration']=0x0,this[_0x2b193b(0x700)]=_0x2b193b(0x65b),this[_0x2b193b(0x18f)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x2b193b(0x8aa)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x2b193b(0xbe3)]=0xff,this[_0x2b193b(0x9c2)]=0x0,this[_0x2b193b(0x2bb)]=0x0,this[_0x2b193b(0x5f3)]='Linear',this['_currentAngle']=0x0,this[_0x2b193b(0x81a)]=0x0,this['_angleDuration']=0x0,this[_0x2b193b(0xab9)]=0x0,this[_0x2b193b(0x6b4)]='Linear',this[_0x2b193b(0x98b)]=!![],this[_0x2b193b(0xb0f)]=0x0,this[_0x2b193b(0x7cc)]=0x0,this[_0x2b193b(0x3e3)]=0x0,this[_0x2b193b(0x8cd)]=0x0,this[_0x2b193b(0x86d)]=0x0,this['_skewWholeDuration']=0x0,this[_0x2b193b(0x37c)]=_0x2b193b(0x65b),this[_0x2b193b(0xb36)]=0x1,this[_0x2b193b(0x7a7)]=0x1,this[_0x2b193b(0x112)]=0x1,this[_0x2b193b(0x95d)]=0x1,this[_0x2b193b(0x7cd)]=0x0,this[_0x2b193b(0x79e)]=0x0,this[_0x2b193b(0x623)]=_0x2b193b(0x65b),this[_0x2b193b(0x4f0)]=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this[_0x2b193b(0x2a7)]=0x0,this[_0x2b193b(0x4c9)]=0x0,this[_0x2b193b(0x36e)]=_0x2b193b(0x65b),this[_0x2b193b(0x262)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler['prototype'][_0x5a8ff0(0x68f)]=function(){const _0xd50ca0=_0x5a8ff0;this[_0xd50ca0(0x8a1)]=new Sprite(),this[_0xd50ca0(0x8a1)][_0xd50ca0(0x103)]=ImageManager[_0xd50ca0(0x2b7)](_0xd50ca0(0x3fd)),this[_0xd50ca0(0x8a1)][_0xd50ca0(0x103)][_0xd50ca0(0x186)]=VisuMZ[_0xd50ca0(0xbb3)][_0xd50ca0(0xba1)][_0xd50ca0(0x1ba)][_0xd50ca0(0x3f6)],this[_0xd50ca0(0x8a1)]['anchor']['x']=0.5,this[_0xd50ca0(0x8a1)]['anchor']['y']=0.5,this[_0xd50ca0(0x8a1)]['y']=-0x2,this[_0xd50ca0(0x8a1)][_0xd50ca0(0xb22)]=![],this[_0xd50ca0(0xa57)](this[_0xd50ca0(0x8a1)]);},Sprite_Battler[_0x5a8ff0(0xb6e)]['createDistortionSprite']=function(){const _0x4e9d61=_0x5a8ff0;this[_0x4e9d61(0x6d6)]=new Sprite(),this[_0x4e9d61(0x6d6)][_0x4e9d61(0x50e)]['x']=0.5,this[_0x4e9d61(0x6d6)]['anchor']['y']=0.5,this['addChild'](this['_distortionSprite']);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2e5)]=function(){const _0x4ceeae=_0x5a8ff0;if(this[_0x4ceeae(0x900)]&&this[_0x4ceeae(0x900)]()){Sprite['prototype'][_0x4ceeae(0x2e5)]['call'](this);return;}const _0x222e96=this[_0x4ceeae(0x6d6)];if(!_0x222e96)return;!_0x222e96[_0x4ceeae(0xa59)]&&_0x222e96['_createColorFilter'](),_0x222e96[_0x4ceeae(0xa59)][_0x4ceeae(0x492)](this[_0x4ceeae(0x170)]),_0x222e96['_colorFilter']['setBlendColor'](this[_0x4ceeae(0x1c8)]),_0x222e96[_0x4ceeae(0xa59)][_0x4ceeae(0x3e4)](this[_0x4ceeae(0x652)]);},Sprite_Battler[_0x5a8ff0(0xb6e)]['attachSpritesToDistortionSprite']=function(){const _0x4dfa44=_0x5a8ff0;if(!this['_distortionSprite'])return;if(this[_0x4dfa44(0x8a1)]){const _0x229652=this[_0x4dfa44(0x1cb)](this[_0x4dfa44(0x6d6)]);this[_0x4dfa44(0x585)](this[_0x4dfa44(0x8a1)],_0x229652),this['updateShadowVisibility']();}this[_0x4dfa44(0x14e)]&&this['_distortionSprite'][_0x4dfa44(0xa57)](this[_0x4dfa44(0x14e)]),this[_0x4dfa44(0x846)]&&this[_0x4dfa44(0x6d6)]['addChild'](this['_weaponSprite']),this[_0x4dfa44(0x84e)]&&this[_0x4dfa44(0x6d6)][_0x4dfa44(0xa57)](this[_0x4dfa44(0x84e)]),this[_0x4dfa44(0x362)]&&this[_0x4dfa44(0x6d6)][_0x4dfa44(0xa57)](this[_0x4dfa44(0x362)]),this[_0x4dfa44(0x99b)]&&this[_0x4dfa44(0x6d6)][_0x4dfa44(0xa57)](this[_0x4dfa44(0x99b)]);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5c5)]=function(){const _0xc4dd69=_0x5a8ff0;if(!this[_0xc4dd69(0x8a1)])return;if(this[_0xc4dd69(0x1aa)]&&this[_0xc4dd69(0x1aa)]['svBattlerShadowVisible']()){const _0x46376e=this[_0xc4dd69(0x8a1)][_0xc4dd69(0x103)];this['_shadowSprite']['setFrame'](0x0,0x0,_0x46376e['width'],_0x46376e['height']);}else this['_shadowSprite']['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1b6)]=function(){const _0x1c21bb=_0x5a8ff0;return SceneManager[_0x1c21bb(0x5c8)]()?SceneManager[_0x1c21bb(0x973)][_0x1c21bb(0x566)][_0x1c21bb(0x1f4)]:this[_0x1c21bb(0x4b4)];},Sprite_Battler['prototype'][_0x5a8ff0(0x31a)]=function(_0x38ebe2,_0x390b8f){const _0x3557b6=_0x5a8ff0;if(!this[_0x3557b6(0x1aa)]['isSpriteVisible']())return;if(BattleManager[_0x3557b6(0x994)]())return;const _0x442278=VisuMZ[_0x3557b6(0xbb3)][_0x3557b6(0xba1)]['Damage'],_0x1ceb60=new Sprite_Damage();_0x1ceb60['_duration']=_0x442278['PopupDuration'],this[_0x3557b6(0xa96)](_0x1ceb60),_0x1ceb60['setupTextPopup'](_0x38ebe2,_0x390b8f),this['addDamageSprite'](_0x1ceb60);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x975)]=function(_0xc6b7c1,_0x48cc00,_0x1871c5){const _0x3cce5f=_0x5a8ff0;if(!this[_0x3cce5f(0x1aa)][_0x3cce5f(0x83b)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x19eb35=VisuMZ['BattleCore']['Settings']['Damage'],_0x382df3=new Sprite_Damage();_0x382df3[_0x3cce5f(0x7ce)]=_0x19eb35['PopupDuration'],this['sortDamageSprites'](_0x382df3),_0x382df3[_0x3cce5f(0x975)](_0xc6b7c1,_0x48cc00,_0x1871c5),this[_0x3cce5f(0x7f2)](_0x382df3);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6f1)]=function(){const _0x117792=_0x5a8ff0;if(!this[_0x117792(0x1aa)][_0x117792(0xbca)]())return;while(this['_battler'][_0x117792(0xbca)]()){this[_0x117792(0x1aa)][_0x117792(0x83b)]()&&this[_0x117792(0x9db)]();}this[_0x117792(0x1aa)][_0x117792(0x209)](),this[_0x117792(0x1aa)][_0x117792(0x85d)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9db)]=function(){const _0x56532a=_0x5a8ff0;if(BattleManager[_0x56532a(0x994)]())return;const _0x1c627c=VisuMZ[_0x56532a(0xbb3)][_0x56532a(0xba1)]['Damage'],_0x47876a=new Sprite_Damage();_0x47876a[_0x56532a(0x7ce)]=_0x1c627c['PopupDuration'],this[_0x56532a(0xa96)](_0x47876a),_0x47876a[_0x56532a(0x681)](this[_0x56532a(0x1aa)]),_0x47876a[_0x56532a(0x470)](this[_0x56532a(0x1aa)]),this[_0x56532a(0x7f2)](_0x47876a);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7f2)]=function(_0x559077){const _0x505320=_0x5a8ff0;this[_0x505320(0x32f)]['push'](_0x559077);if(this[_0x505320(0xbec)]()){const _0x160cae=SceneManager['_scene'][_0x505320(0x694)];if(_0x160cae)_0x160cae[_0x505320(0x7f2)](_0x559077,this[_0x505320(0x1aa)]);}else{this[_0x505320(0x1b6)]()[_0x505320(0xa57)](_0x559077);if(SceneManager[_0x505320(0x8a2)]())_0x559077[_0x505320(0x90a)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x5a8ff0(0xbec)]=function(){const _0x4ff4b9=_0x5a8ff0;return!$gameSystem[_0x4ff4b9(0xa92)]()&&this[_0x4ff4b9(0x1aa)]&&this['_battler'][_0x4ff4b9(0x34b)]();return!$gameSystem['isSideView']()&&this['_battler']&&this[_0x4ff4b9(0x1aa)][_0x4ff4b9(0x34b)]()&&Window_BattleStatus[_0x4ff4b9(0xb6e)][_0x4ff4b9(0x483)]()===_0x4ff4b9(0x9e7);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa96)]=function(_0x400c4d){const _0x5338c4=_0x5a8ff0;this[_0x5338c4(0xa58)](_0x400c4d,!![]);const _0x1a9fff=VisuMZ['BattleCore']['Settings']['Damage'],_0x54f0f5=SceneManager[_0x5338c4(0x8a2)]()?-0x1:0x1;if(_0x1a9fff[_0x5338c4(0x3a2)])for(const _0x457329 of this[_0x5338c4(0x32f)]){_0x457329['x']+=_0x1a9fff[_0x5338c4(0x10e)]*_0x54f0f5,_0x457329['y']+=_0x1a9fff['PopupShiftY'];}else{const _0x529fb4=this[_0x5338c4(0x32f)][this[_0x5338c4(0x32f)]['length']-0x1];_0x529fb4&&(_0x400c4d['x']=_0x529fb4['x']+_0x1a9fff['PopupShiftX']*_0x54f0f5,_0x400c4d['y']=_0x529fb4['y']+_0x1a9fff[_0x5338c4(0x7ef)]);}},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa58)]=function(_0x50c53c,_0x197e16){const _0x7aa692=_0x5a8ff0,_0xf595a9=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x2ac0b6=this[_0x7aa692(0x7bd)];_0x2ac0b6+=this[_0x7aa692(0xaa4)]();let _0x58e789=this[_0x7aa692(0x4b6)];const _0x5c8ebb=this[_0x7aa692(0x6d6)][_0x7aa692(0x90a)]['y'];_0x58e789+=this[_0x7aa692(0x737)]();const _0x3326a3=SceneManager[_0x7aa692(0x973)]['_statusWindow'];if(_0x3326a3&&this[_0x7aa692(0x4b4)]===_0x3326a3){_0x2ac0b6+=_0x3326a3['x']-this[_0x7aa692(0x295)]();const _0x4eb40b=_0x3326a3['lineHeight']()*0x3/0x4;_0x58e789=_0x3326a3['y']+_0x4eb40b,_0x58e789=Math[_0x7aa692(0x60d)](_0x58e789,_0x3326a3['y']+this['y']-this['height']+_0x4eb40b);}_0x50c53c['x']=Math['round'](_0x2ac0b6+this[_0x7aa692(0x295)]()*_0xf595a9),_0x50c53c['y']=Math[_0x7aa692(0xb41)](_0x58e789+this[_0x7aa692(0x310)]());},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x5a8ff0(0xb6e)]['damageOffsetX'],Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x295)]=function(){const _0x5aeab5=_0x5a8ff0;let _0x5b1c8f=VisuMZ[_0x5aeab5(0xbb3)][_0x5aeab5(0x884)][_0x5aeab5(0x31b)](this),_0x2f6e88=VisuMZ[_0x5aeab5(0xbb3)][_0x5aeab5(0xba1)][_0x5aeab5(0x8c7)][_0x5aeab5(0xb8d)]||0x0;return _0x2f6e88+=this[_0x5aeab5(0x1aa)][_0x5aeab5(0x2ed)](),Math['round'](_0x5b1c8f+_0x2f6e88);},VisuMZ['BattleCore'][_0x5a8ff0(0xae0)]=Sprite_Battler[_0x5a8ff0(0xb6e)]['damageOffsetY'],Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x310)]=function(){const _0x1e1238=_0x5a8ff0;let _0x2f6a7c=VisuMZ['BattleCore'][_0x1e1238(0xae0)]['call'](this);switch(this['_battler'][_0x1e1238(0x622)]()){case'head':_0x2f6a7c-=this[_0x1e1238(0x75c)]*this['scale']['y'];break;case _0x1e1238(0x5a5):_0x2f6a7c-=this[_0x1e1238(0x75c)]*this[_0x1e1238(0x90a)]['y']*0.5;break;}let _0xd359e1=VisuMZ[_0x1e1238(0xbb3)][_0x1e1238(0xba1)][_0x1e1238(0x8c7)][_0x1e1238(0x723)]||0x0;return _0xd359e1+=this[_0x1e1238(0x1aa)][_0x1e1238(0x4cd)](),Math[_0x1e1238(0xb41)](_0x2f6a7c+_0xd359e1);},Sprite_Actor['prototype'][_0x5a8ff0(0x295)]=function(){const _0x11144a=_0x5a8ff0;return Sprite_Battler['prototype'][_0x11144a(0x295)][_0x11144a(0x31b)](this);},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x310)]=function(){const _0x170e2e=_0x5a8ff0;return Sprite_Battler['prototype'][_0x170e2e(0x310)][_0x170e2e(0x31b)](this);},Sprite_Battler[_0x5a8ff0(0xb6e)]['destroyDamageSprite']=function(_0xcdb90d){const _0x52de4d=_0x5a8ff0;this[_0x52de4d(0xbec)]()?SceneManager[_0x52de4d(0x973)]['_statusWindow'][_0x52de4d(0x5ed)](_0xcdb90d):(this[_0x52de4d(0x1b6)]()[_0x52de4d(0x297)](_0xcdb90d),this['_damages'][_0x52de4d(0xc1d)](_0xcdb90d),_0xcdb90d['destroy']());},VisuMZ['BattleCore']['Sprite_Battler_setHome']=Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x864)],Sprite_Battler['prototype'][_0x5a8ff0(0x864)]=function(_0x1832de,_0x47018a){const _0x1b3925=_0x5a8ff0,_0x10b262=VisuMZ[_0x1b3925(0xbb3)]['Settings'];if(this[_0x1b3925(0x18c)]===Sprite_Actor)_0x1832de+=_0x10b262['Actor'][_0x1b3925(0x45c)]||0x0,_0x47018a+=_0x10b262[_0x1b3925(0x1ba)][_0x1b3925(0x684)]||0x0;else this[_0x1b3925(0x18c)]===Sprite_Enemy&&(_0x1832de+=_0x10b262['Enemy'][_0x1b3925(0x45c)]||0x0,_0x47018a+=_0x10b262[_0x1b3925(0x85b)][_0x1b3925(0x684)]||0x0);this[_0x1b3925(0x1aa)]&&(_0x1832de=this[_0x1b3925(0x1aa)][_0x1b3925(0xbe2)]??_0x1832de,_0x47018a=this[_0x1b3925(0x1aa)][_0x1b3925(0x260)]??_0x47018a),VisuMZ[_0x1b3925(0xbb3)]['Sprite_Battler_setHome'][_0x1b3925(0x31b)](this,_0x1832de,_0x47018a),this[_0x1b3925(0x58d)]=this[_0x1b3925(0x603)],this['_targetHomeY']=this[_0x1b3925(0x27a)],this[_0x1b3925(0x2a7)]=0x0,this[_0x1b3925(0x4c9)]=0x0,this[_0x1b3925(0x36e)]=_0x1b3925(0x65b);},VisuMZ['BattleCore'][_0x5a8ff0(0x3e1)]=Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)],Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x2567d0=_0x5a8ff0;VisuMZ[_0x2567d0(0xbb3)][_0x2567d0(0x3e1)][_0x2567d0(0x31b)](this),!this[_0x2567d0(0x1aa)]&&this[_0x2567d0(0x739)]&&(this[_0x2567d0(0x739)][_0x2567d0(0xb22)]=![]);},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa94)],Sprite_Battler['prototype'][_0x5a8ff0(0xa94)]=function(){const _0x5e770f=_0x5a8ff0;this[_0x5e770f(0x496)](),this[_0x5e770f(0x2e0)](),this[_0x5e770f(0x35a)](),this[_0x5e770f(0x4b9)](),VisuMZ[_0x5e770f(0xbb3)][_0x5e770f(0x425)][_0x5e770f(0x31b)](this),this[_0x5e770f(0x365)](),this[_0x5e770f(0x228)]();if(this[_0x5e770f(0x18c)]===Sprite_Enemy)this[_0x5e770f(0xaa9)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x60f)]=Sprite_Battler[_0x5a8ff0(0xb6e)]['updatePosition'],Sprite_Battler[_0x5a8ff0(0xb6e)]['updatePosition']=function(){const _0x3be429=_0x5a8ff0;this[_0x3be429(0xa90)](),VisuMZ['BattleCore'][_0x3be429(0x60f)][_0x3be429(0x31b)](this),this['updatePositionBattleCore'](),this[_0x3be429(0x22a)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xc1f)]=function(){const _0x31cff0=_0x5a8ff0,_0x37d41c=this[_0x31cff0(0x1d5)]();if(this[_0x31cff0(0x1aa)]['isSelected']())this[_0x31cff0(0x9ed)]++,Graphics[_0x31cff0(0x825)]%0x1e<0xf?_0x37d41c[_0x31cff0(0xff)]([0xff,0xff,0xff,0x40]):_0x37d41c[_0x31cff0(0xff)]([0x0,0x0,0x0,0x0]);else this[_0x31cff0(0x9ed)]>0x0&&(this[_0x31cff0(0x9ed)]=0x0,_0x37d41c['setBlendColor']([0x0,0x0,0x0,0x0]));},Sprite_Battler['prototype'][_0x5a8ff0(0x58c)]=function(_0x440d3d,_0x213e62){const _0x1f9bd7=_0x5a8ff0,_0x155895=VisuMZ[_0x1f9bd7(0xbb3)][_0x1f9bd7(0xba1)];if(this[_0x1f9bd7(0x18c)]===Sprite_Actor)_0x440d3d+=_0x155895[_0x1f9bd7(0x1ba)][_0x1f9bd7(0x45c)]||0x0,_0x213e62+=_0x155895[_0x1f9bd7(0x1ba)][_0x1f9bd7(0x684)]||0x0;else this[_0x1f9bd7(0x18c)]===Sprite_Enemy&&(_0x440d3d+=_0x155895[_0x1f9bd7(0x85b)]['OffsetX']||0x0,_0x213e62+=_0x155895[_0x1f9bd7(0x85b)][_0x1f9bd7(0x684)]||0x0);const _0x4cb0a9=_0x440d3d-this[_0x1f9bd7(0x603)],_0x32e82f=_0x213e62-this[_0x1f9bd7(0x27a)];this[_0x1f9bd7(0x603)]=_0x440d3d,this[_0x1f9bd7(0x27a)]=_0x213e62,this['_offsetX']-=_0x4cb0a9,this[_0x1f9bd7(0xace)]-=_0x32e82f,this['_targetOffsetX']-=_0x4cb0a9,this[_0x1f9bd7(0xafa)]-=_0x32e82f,this[_0x1f9bd7(0x5f4)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x762)]=function(_0x21a0e2,_0x3edfdf,_0x260191,_0x18d147){const _0x5b9f1e=_0x5a8ff0,_0x1261ce=VisuMZ[_0x5b9f1e(0xbb3)]['Settings'];if(this[_0x5b9f1e(0x18c)]===Sprite_Actor)_0x21a0e2+=_0x1261ce[_0x5b9f1e(0x1ba)][_0x5b9f1e(0x45c)]||0x0,_0x3edfdf+=_0x1261ce[_0x5b9f1e(0x1ba)]['OffsetY']||0x0;else this[_0x5b9f1e(0x18c)]===Sprite_Enemy&&(_0x21a0e2+=_0x1261ce['Enemy'][_0x5b9f1e(0x45c)]||0x0,_0x3edfdf+=_0x1261ce['Enemy']['OffsetY']||0x0);(this['_targetHomeX']!==_0x21a0e2||this[_0x5b9f1e(0x1bb)]!==_0x3edfdf)&&(this[_0x5b9f1e(0x58d)]=_0x21a0e2,this[_0x5b9f1e(0x1bb)]=_0x3edfdf,this[_0x5b9f1e(0x2a7)]=_0x260191,this[_0x5b9f1e(0x4c9)]=_0x260191,this[_0x5b9f1e(0x36e)]=_0x18d147,_0x260191<=0x0&&this[_0x5b9f1e(0x65c)]());},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa90)]=function(){const _0x5cf824=_0x5a8ff0;if(this[_0x5cf824(0x2a7)]<=0x0)return;const _0x308767=this[_0x5cf824(0x2a7)],_0x2201dd=this[_0x5cf824(0x4c9)],_0x50d2a3=this[_0x5cf824(0x36e)];Imported['VisuMZ_0_CoreEngine']?(this['_homeX']=this['applyEasing'](this[_0x5cf824(0x603)],this[_0x5cf824(0x58d)],_0x308767,_0x2201dd,_0x50d2a3),this[_0x5cf824(0x27a)]=this[_0x5cf824(0x387)](this[_0x5cf824(0x27a)],this[_0x5cf824(0x1bb)],_0x308767,_0x2201dd,_0x50d2a3)):(this[_0x5cf824(0x603)]=(this['_homeX']*(_0x308767-0x1)+this[_0x5cf824(0x58d)])/_0x308767,this['_homeY']=(this[_0x5cf824(0x27a)]*(_0x308767-0x1)+this[_0x5cf824(0x1bb)])/_0x308767);this[_0x5cf824(0x2a7)]--;if(this[_0x5cf824(0x2a7)]<=0x0)this[_0x5cf824(0x65c)]();},Sprite_Battler['prototype'][_0x5a8ff0(0x65c)]=function(){const _0x26e0ea=_0x5a8ff0;this['_homeX']=this['_targetHomeX'],this[_0x26e0ea(0x27a)]=this[_0x26e0ea(0x1bb)];},Sprite_Battler['prototype'][_0x5a8ff0(0x233)]=function(){const _0x120a0e=_0x5a8ff0;this['_baseX']=this['x'],this[_0x120a0e(0x4b6)]=this['y'],this[_0x120a0e(0x20b)](),this['updateJump'](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x120a0e(0x737)](),this['y']+=this['extraPositionScaledY'](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x120a0e(0x87f)](this['y']);},Sprite_Battler['prototype'][_0x5a8ff0(0xaa4)]=function(){let _0x4b02ff=0x0;return _0x4b02ff;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x737)]=function(){const _0x214cbd=_0x5a8ff0;let _0x5474eb=0x0;return this[_0x214cbd(0x1aa)]&&!this[_0x214cbd(0x1aa)][_0x214cbd(0x76b)]()&&(_0x5474eb-=this[_0x214cbd(0xbe8)],_0x5474eb-=this['_jumpHeight']),_0x5474eb;},Sprite_Battler['prototype'][_0x5a8ff0(0xad4)]=function(){const _0x68cedb=_0x5a8ff0;let _0x358218=0x0;if(this[_0x68cedb(0x6d6)]&&this['constructor']!==Sprite_SvEnemy){const _0x194859=this[_0x68cedb(0x6d6)][_0x68cedb(0x90a)]['y'];_0x358218-=(_0x194859-0x1)*this[_0x68cedb(0x75c)];}return _0x358218;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4b9)]=function(){const _0x5372d=_0x5a8ff0,_0x169895=this[_0x5372d(0x1aa)]&&this[_0x5372d(0x1aa)]['isBattlerFlipped']();this[_0x5372d(0x4f0)]=(_0x169895?-0x1:0x1)*Math['abs'](this[_0x5372d(0x90a)]['x']);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x845)]=function(_0x1c7c0,_0x5e21c7,_0x37a64c){const _0x222a1a=_0x5a8ff0;if(!this[_0x222a1a(0x850)]())return;if(this[_0x222a1a(0x1cd)]===_0x1c7c0)return;this[_0x222a1a(0x1cd)]=_0x1c7c0,this['_floatDuration']=_0x5e21c7,this[_0x222a1a(0x957)]=_0x5e21c7,this[_0x222a1a(0x700)]=_0x37a64c||_0x222a1a(0x65b);if(_0x5e21c7<=0x0)this[_0x222a1a(0xbe8)]=_0x1c7c0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x20b)]=function(){const _0x49acfc=_0x5a8ff0;if(this[_0x49acfc(0x22d)]<=0x0)return;const _0x48ba76=this['_floatDuration'],_0x1788b3=this['_floatWholeDuration'],_0x2002a2=this['_floatEasing'];Imported['VisuMZ_0_CoreEngine']?this['_floatHeight']=this[_0x49acfc(0x387)](this[_0x49acfc(0xbe8)],this['_targetFloatHeight'],_0x48ba76,_0x1788b3,_0x2002a2):this[_0x49acfc(0xbe8)]=(this[_0x49acfc(0xbe8)]*(_0x48ba76-0x1)+this[_0x49acfc(0x1cd)])/_0x48ba76;this['_floatDuration']--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x982)]=function(){const _0x4b7090=_0x5a8ff0;this[_0x4b7090(0xbe8)]=this['_targetFloatHeight'];},Sprite_Battler[_0x5a8ff0(0xb6e)]['isFloating']=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x72e)]=function(_0xb9b3e4,_0xc840d6){const _0x5c3858=_0x5a8ff0;if(!this[_0x5c3858(0x850)]())return;if(_0xc840d6<=0x0)return;this[_0x5c3858(0xbbd)]=_0xb9b3e4,this[_0x5c3858(0x8aa)]=_0xc840d6,this[_0x5c3858(0xa5d)]=_0xc840d6;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6f8)]=function(){const _0x20002d=_0x5a8ff0;if(this['_jumpDuration']<=0x0)return;const _0x2510c4=this[_0x20002d(0xa5d)]-this[_0x20002d(0x8aa)],_0x49afe5=this[_0x20002d(0xa5d)]/0x2,_0x1532a2=this[_0x20002d(0xbbd)],_0x394115=-_0x1532a2/Math[_0x20002d(0x4c2)](_0x49afe5,0x2);this[_0x20002d(0x18f)]=_0x394115*Math['pow'](_0x2510c4-_0x49afe5,0x2)+_0x1532a2,this[_0x20002d(0x8aa)]--;if(this[_0x20002d(0x8aa)]<=0x0)return this[_0x20002d(0x44a)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x44a)]=function(){const _0x25196a=_0x5a8ff0;this[_0x25196a(0x18f)]=0x0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x73e)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype'][_0x5a8ff0(0x55e)]=function(_0x124040,_0x4df7df,_0x4784de){const _0x3e1f10=_0x5a8ff0;if(this[_0x3e1f10(0xbe3)]===_0x124040)return;this[_0x3e1f10(0xbe3)]=_0x124040,this[_0x3e1f10(0x9c2)]=_0x4df7df,this['_opacityWholeDuration']=_0x4df7df,this[_0x3e1f10(0x5f3)]=_0x4784de||_0x3e1f10(0x65b);if(_0x4df7df<=0x0)this[_0x3e1f10(0x485)]=_0x124040;},Sprite_Battler[_0x5a8ff0(0xb6e)]['updateOpacity']=function(){const _0x465e67=_0x5a8ff0;if(this['constructor'][_0x465e67(0xa4b)]===_0x465e67(0x997))return;if(this[_0x465e67(0x9c2)]<=0x0)return;const _0x28261a=this[_0x465e67(0x9c2)],_0x155067=this[_0x465e67(0x2bb)],_0x502778=this['_opacityEasing'];Imported[_0x465e67(0x610)]?this[_0x465e67(0x485)]=this[_0x465e67(0x387)](this[_0x465e67(0x485)],this[_0x465e67(0xbe3)],_0x28261a,_0x155067,_0x502778):this[_0x465e67(0x485)]=(this[_0x465e67(0x485)]*(_0x28261a-0x1)+this[_0x465e67(0xbe3)])/_0x28261a;this[_0x465e67(0x9c2)]--;if(this['_opacityDuration']<=0x0)this[_0x465e67(0xbb0)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbb0)]=function(){const _0x106789=_0x5a8ff0;this[_0x106789(0x485)]=this['_targetOpacity'];},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7e4)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaa9)]=function(){const _0x1cc939=_0x5a8ff0;this[_0x1cc939(0x8a1)][_0x1cc939(0xb22)]=this[_0x1cc939(0x1aa)][_0x1cc939(0xb75)](),this['updateShadowPosition']();},Sprite_Battler[_0x5a8ff0(0xb6e)]['updateShadowPosition']=function(){const _0x4078d7=_0x5a8ff0;if(!this[_0x4078d7(0x8a1)])return;this[_0x4078d7(0x8a1)]['y']=this[_0x4078d7(0x4b6)]-this['y']-0x2;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb52)]=function(){const _0x3ff601=_0x5a8ff0;if(!this[_0x3ff601(0x1aa)])return;this['_shadowScaleX']=this[_0x3ff601(0x1aa)][_0x3ff601(0x8be)](),this[_0x3ff601(0x672)]=this['_battler'][_0x3ff601(0x4ee)]();},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8be)]=function(){const _0x56257d=_0x5a8ff0,_0x378359=this[_0x56257d(0x34b)]()?this[_0x56257d(0x749)]():this[_0x56257d(0xb15)]();if(_0x378359){const _0x285750=_0x378359[_0x56257d(0x494)];if(_0x285750['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x285750['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4ee)]=function(){const _0xc50f08=_0x5a8ff0,_0x32e198=this[_0xc50f08(0x34b)]()?this[_0xc50f08(0x749)]():this[_0xc50f08(0xb15)]();if(_0x32e198){const _0x50f464=_0x32e198[_0xc50f08(0x494)];if(_0x50f464[_0xc50f08(0x6d8)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x50f464[_0xc50f08(0x6d8)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x496)]=function(){const _0x36a158=_0x5a8ff0;if(this[_0x36a158(0x18c)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x36a158(0xa9f)]();},Sprite_Battler['prototype'][_0x5a8ff0(0xa9f)]=function(){const _0x401541=_0x5a8ff0,_0x3411a3=this['_distortionSprite'];_0x3411a3&&(_0x3411a3['scale']['x']=this['mainSpriteScaleX'](),_0x3411a3[_0x401541(0x90a)]['y']=this[_0x401541(0xb5e)]());},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x232)]=function(){const _0x56af74=_0x5a8ff0;let _0x5bd429=0x1;return _0x5bd429*=this[_0x56af74(0x4f0)],_0x5bd429*=this[_0x56af74(0xb36)],_0x5bd429;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb5e)]=function(){const _0x213920=_0x5a8ff0;return 0x1*this[_0x213920(0x7a7)];},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x787)]=function(){const _0xf3517a=_0x5a8ff0;return this[_0xf3517a(0x3fa)]*this[_0xf3517a(0x232)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb45)]=function(){const _0x105d28=_0x5a8ff0;return this[_0x105d28(0x75c)]*this[_0x105d28(0xb5e)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e6)]=function(_0x19f794,_0x2bb37b,_0x3192d7,_0x5c3670){const _0x4239d5=_0x5a8ff0;if(!this['canMove']())return;if(!this[_0x4239d5(0x6d6)])return;if(this['_targetGrowX']===_0x19f794&&this[_0x4239d5(0x95d)]===_0x2bb37b)return;this[_0x4239d5(0x112)]=_0x19f794,this[_0x4239d5(0x95d)]=_0x2bb37b,this[_0x4239d5(0x7cd)]=_0x3192d7,this[_0x4239d5(0x79e)]=_0x3192d7,this['_growEasing']=_0x5c3670||'Linear',_0x3192d7<=0x0&&(this['_growX']=this[_0x4239d5(0x112)],this[_0x4239d5(0x7a7)]=this['_targetGrowY']);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa01)]=function(){const _0x44cd30=_0x5a8ff0;if(this[_0x44cd30(0x7cd)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x465724=this[_0x44cd30(0x7cd)],_0x280aa8=this[_0x44cd30(0x79e)],_0x57eae6=this[_0x44cd30(0x623)];Imported[_0x44cd30(0x610)]?(this[_0x44cd30(0xb36)]=this[_0x44cd30(0x387)](this[_0x44cd30(0xb36)],this['_targetGrowX'],_0x465724,_0x280aa8,_0x57eae6),this[_0x44cd30(0x7a7)]=this[_0x44cd30(0x387)](this[_0x44cd30(0x7a7)],this[_0x44cd30(0x95d)],_0x465724,_0x280aa8,_0x57eae6)):(this['_growX']=(this[_0x44cd30(0xb36)]*(_0x465724-0x1)+this[_0x44cd30(0x112)])/_0x465724,this[_0x44cd30(0x7a7)]=(this[_0x44cd30(0x7a7)]*(_0x465724-0x1)+this[_0x44cd30(0x95d)])/_0x465724);this[_0x44cd30(0x7cd)]--;if(this['_growDuration']<=0x0)this['onGrowEnd']();},Sprite_Battler['prototype'][_0x5a8ff0(0x140)]=function(){const _0x50afba=_0x5a8ff0;this['_growX']=this[_0x50afba(0x112)],this['_growY']=this['_targetGrowY'];},Sprite_Battler['prototype'][_0x5a8ff0(0xab6)]=function(){const _0x440d37=_0x5a8ff0;return this[_0x440d37(0x7cd)]>0x0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa97)]=function(_0x41976c,_0x468ec7,_0x147b64,_0x2f44bd){const _0x120444=_0x5a8ff0;if(!this[_0x120444(0x850)]())return;if(!this['_distortionSprite'])return;if(this['_targetSkewX']===_0x41976c&&this[_0x120444(0x8cd)]===_0x468ec7)return;this['_targetSkewX']=_0x41976c,this[_0x120444(0x8cd)]=_0x468ec7,this['_skewDuration']=_0x147b64,this['_skewWholeDuration']=_0x147b64,this[_0x120444(0x37c)]=_0x2f44bd||'Linear',_0x147b64<=0x0&&(this['_distortionSprite']['skew']['x']=this[_0x120444(0x3e3)],this[_0x120444(0x6d6)][_0x120444(0x7f6)]['y']=this['_targetSkewY']);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2e0)]=function(){const _0x431ee5=_0x5a8ff0;if(this[_0x431ee5(0x86d)]<=0x0)return;if(!this[_0x431ee5(0x6d6)])return;const _0x455093=this[_0x431ee5(0x86d)],_0x49b550=this[_0x431ee5(0x4f9)],_0x490361=this[_0x431ee5(0x37c)],_0x22f435=this[_0x431ee5(0x6d6)];Imported[_0x431ee5(0x610)]?(_0x22f435[_0x431ee5(0x7f6)]['x']=this[_0x431ee5(0x387)](_0x22f435[_0x431ee5(0x7f6)]['x'],this[_0x431ee5(0x3e3)],_0x455093,_0x49b550,_0x490361),_0x22f435[_0x431ee5(0x7f6)]['y']=this['applyEasing'](_0x22f435[_0x431ee5(0x7f6)]['y'],this[_0x431ee5(0x8cd)],_0x455093,_0x49b550,_0x490361)):(_0x22f435[_0x431ee5(0x7f6)]['x']=(_0x22f435[_0x431ee5(0x7f6)]['x']*(_0x455093-0x1)+this[_0x431ee5(0x3e3)])/_0x455093,_0x22f435[_0x431ee5(0x7f6)]['y']=(_0x22f435[_0x431ee5(0x7f6)]['y']*(_0x455093-0x1)+this['_targetSkewY'])/_0x455093);this['_skewDuration']--;if(this[_0x431ee5(0x86d)]<=0x0)this[_0x431ee5(0x419)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x419)]=function(){const _0x2c0975=_0x5a8ff0;this[_0x2c0975(0x6d6)][_0x2c0975(0x7f6)]['x']=this['_targetSkewX'],this[_0x2c0975(0x6d6)]['skew']['y']=this[_0x2c0975(0x8cd)];},Sprite_Battler['prototype'][_0x5a8ff0(0x638)]=function(){const _0xcf8587=_0x5a8ff0;return this[_0xcf8587(0x86d)]>0x0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x222)]=function(_0x1117d2,_0x2f5851,_0xe27880,_0x240660){const _0x141639=_0x5a8ff0;if(!this[_0x141639(0x850)]())return;if(!this['_distortionSprite'])return;if(this['_targetAngle']===_0x1117d2)return;this[_0x141639(0x81a)]=_0x1117d2,this[_0x141639(0xb4f)]=_0x2f5851,this[_0x141639(0xab9)]=_0x2f5851,this[_0x141639(0x6b4)]=_0xe27880||_0x141639(0x65b),this[_0x141639(0x98b)]=_0x240660,this['_angleRevertOnFinish']===undefined&&(this[_0x141639(0x98b)]=!![]),_0x2f5851<=0x0&&(this['_currentAngle']=_0x1117d2,this[_0x141639(0x98b)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x5a8ff0(0xb6e)]['updateSpin']=function(){const _0x3acac2=_0x5a8ff0;this['updateAngleCalculations'](),this[_0x3acac2(0x3db)]();},Sprite_Battler[_0x5a8ff0(0xb6e)]['updateAngleCalculations']=function(){const _0x59dd2b=_0x5a8ff0;if(this['_angleDuration']<=0x0)return;const _0x21094a=this[_0x59dd2b(0xb4f)],_0x24e4aa=this[_0x59dd2b(0xab9)],_0x369652=this[_0x59dd2b(0x6b4)];Imported[_0x59dd2b(0x610)]?this[_0x59dd2b(0x7ad)]=this[_0x59dd2b(0x387)](this[_0x59dd2b(0x7ad)],this[_0x59dd2b(0x81a)],_0x21094a,_0x24e4aa,_0x369652):this['_currentAngle']=(this['_currentAngle']*(_0x21094a-0x1)+this['_targetAngle'])/_0x21094a;this['_angleDuration']--;if(this[_0x59dd2b(0xb4f)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x376)]=function(){const _0x781d78=_0x5a8ff0;this[_0x781d78(0x7ad)]=this['_targetAngle'],this[_0x781d78(0x98b)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);},Sprite_Battler['prototype'][_0x5a8ff0(0x7c2)]=function(){const _0x139cac=_0x5a8ff0;return this[_0x139cac(0xb4f)]>0x0;},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3db)]=function(){const _0x40e3fd=_0x5a8ff0;if(!this[_0x40e3fd(0x6d6)])return;const _0x1c9964=this[_0x40e3fd(0x7ad)],_0x2642c1=this['scale']['x'],_0x1d2383=this[_0x40e3fd(0x1aa)][_0x40e3fd(0x34b)]()?-0x1:0x1;this['_distortionSprite'][_0x40e3fd(0x71c)]=_0x1c9964*_0x2642c1*_0x1d2383;const _0x4a81c0=this[_0x40e3fd(0x6d6)][_0x40e3fd(0x90a)]['y'];this[_0x40e3fd(0x6d6)]['y']=this[_0x40e3fd(0x75c)]*-0.5*(0x2-_0x4a81c0),this[_0x40e3fd(0x6d6)]['y']=Math[_0x40e3fd(0x447)](this[_0x40e3fd(0x6d6)]['y']);const _0x7ab7c7=[this[_0x40e3fd(0x84e)],this[_0x40e3fd(0x14e)],this[_0x40e3fd(0x99b)]];for(const _0x283d3b of _0x7ab7c7){if(!_0x283d3b)continue;_0x283d3b['y']=this['height']*0.5;}this[_0x40e3fd(0x8a1)]&&(this[_0x40e3fd(0x50d)]=this[_0x40e3fd(0x50d)]??0x1,this[_0x40e3fd(0x672)]=this['_shadowScaleY']??0x1,this[_0x40e3fd(0x8a1)]['scale']['x']=this['_distortionSprite'][_0x40e3fd(0x90a)]['x']*this[_0x40e3fd(0x50d)],this[_0x40e3fd(0x8a1)]['scale']['y']=this[_0x40e3fd(0x6d6)][_0x40e3fd(0x90a)]['y']*this[_0x40e3fd(0x672)]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x613)]=Sprite_Actor['prototype']['createStateSprite'],Sprite_Actor['prototype'][_0x5a8ff0(0x20e)]=function(){const _0x44eea3=_0x5a8ff0;VisuMZ[_0x44eea3(0xbb3)]['Sprite_Actor_createStateSprite'][_0x44eea3(0x31b)](this),VisuMZ['BattleCore'][_0x44eea3(0xba1)][_0x44eea3(0x395)][_0x44eea3(0x29f)]&&this[_0x44eea3(0xb23)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6ab)],Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6ab)]=function(){const _0xfa2094=_0x5a8ff0;VisuMZ[_0xfa2094(0xbb3)][_0xfa2094(0xba1)][_0xfa2094(0x395)][_0xfa2094(0x1de)]&&this[_0xfa2094(0xb23)](),VisuMZ[_0xfa2094(0xbb3)][_0xfa2094(0x8ee)][_0xfa2094(0x31b)](this);},Sprite_Battler[_0x5a8ff0(0xb6e)]['createHpGaugeSprite']=function(){const _0x4e0fb5=_0x5a8ff0;if(!ConfigManager[_0x4e0fb5(0x7dd)])return;if(this[_0x4e0fb5(0x18c)]===Sprite_SvEnemy)return;const _0x2ab66f=VisuMZ[_0x4e0fb5(0xbb3)][_0x4e0fb5(0xba1)][_0x4e0fb5(0x395)],_0x4f86f1=new Sprite_HpGauge();_0x4f86f1[_0x4e0fb5(0x50e)]['x']=_0x2ab66f[_0x4e0fb5(0x69b)],_0x4f86f1[_0x4e0fb5(0x50e)]['y']=_0x2ab66f[_0x4e0fb5(0x25b)],_0x4f86f1[_0x4e0fb5(0x90a)]['x']=_0x4f86f1['scale']['y']=_0x2ab66f[_0x4e0fb5(0xb1f)],this[_0x4e0fb5(0x739)]=_0x4f86f1,this[_0x4e0fb5(0xa57)](this['_hpGaugeSprite']),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x4e0fb5(0x963)](this[_0x4e0fb5(0x739)]);},VisuMZ['BattleCore']['Sprite_Battler_setBattler']=Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b2)],Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b2)]=function(_0x1a2614){const _0x2e842b=_0x5a8ff0,_0x4d3633=this[_0x2e842b(0x1aa)];VisuMZ[_0x2e842b(0xbb3)][_0x2e842b(0xbc0)][_0x2e842b(0x31b)](this,_0x1a2614),this['setupHpGaugeSprite'](_0x1a2614);if(_0x4d3633!==_0x1a2614)this[_0x2e842b(0xb52)]();},Sprite_Battler['prototype'][_0x5a8ff0(0x129)]=function(_0x224cf7){const _0x5ecc00=_0x5a8ff0;if(!_0x224cf7)return;if(!this['_hpGaugeSprite'])return;if(_0x224cf7['isActor']()){}else{if(_0x224cf7[_0x5ecc00(0x172)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x224cf7[_0x5ecc00(0xb75)]())return;}}this[_0x5ecc00(0x739)]['setup'](_0x224cf7,'hp');},Sprite_Battler['prototype']['hasStaticSvBattler']=function(){const _0x5f0ba1=_0x5a8ff0;return this[_0x5f0ba1(0x1aa)]&&this[_0x5f0ba1(0x1aa)][_0x5f0ba1(0x913)]();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x849)]=function(){const _0xe386bf=_0x5a8ff0,_0x557b2e=this[_0xe386bf(0x84e)][_0xe386bf(0x103)];if(!_0x557b2e)return;const _0x6d917=_0x557b2e[_0xe386bf(0x3fa)];let _0xdbc8f6=_0x557b2e[_0xe386bf(0x75c)];if(this['_battler']['isDead']()){if(this[_0xe386bf(0x270)])_0xdbc8f6=Math['max'](0x0,this[_0xe386bf(0x270)][_0xe386bf(0x75c)]-0x4);}this[_0xe386bf(0x84e)]['setFrame'](0x0,0x0,_0x6d917,_0xdbc8f6),this[_0xe386bf(0x3c0)](0x0,0x0,_0x6d917,_0xdbc8f6);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x365)]=function(){const _0xeec5b5=_0x5a8ff0;if(!this[_0xeec5b5(0x1aa)])return;if(!this[_0xeec5b5(0x739)])return;const _0x1b39c2=VisuMZ[_0xeec5b5(0xbb3)][_0xeec5b5(0xba1)]['HpGauge'],_0x247503=this[_0xeec5b5(0x739)];_0x247503['visible']=this[_0xeec5b5(0x9b3)]();const _0x51e80c=_0x1b39c2[_0xeec5b5(0x45c)],_0x2f0334=_0x1b39c2[_0xeec5b5(0x684)];_0x247503['x']=_0x51e80c,_0x247503['x']+=this[_0xeec5b5(0x1aa)]['battleUIOffsetX'](),_0x247503['y']=-this[_0xeec5b5(0x75c)]+_0x2f0334,_0x247503['y']+=this[_0xeec5b5(0x1aa)]['battleUIOffsetY'](),Spriteset_Battle[_0xeec5b5(0x954)]&&SceneManager[_0xeec5b5(0x973)][_0xeec5b5(0x566)]&&(_0x247503['x']+=this['x'],_0x247503['y']+=this['y']);},Sprite_Battler['prototype'][_0x5a8ff0(0x9b3)]=function(){const _0x5c24c7=_0x5a8ff0;if(!this[_0x5c24c7(0x1aa)])return![];if(this[_0x5c24c7(0x1aa)]['isActor']())return!![];if(this[_0x5c24c7(0x1aa)][_0x5c24c7(0xa2f)]())return![];if(this[_0x5c24c7(0x485)]<=0x0)return![];const _0x4b7428=this[_0x5c24c7(0x1aa)]['enemy']()['note'];if(_0x4b7428[_0x5c24c7(0x6d8)](/<SHOW HP GAUGE>/i))return!![];if(_0x4b7428[_0x5c24c7(0x6d8)](/<HIDE HP GAUGE>/i))return![];const _0x696e80=VisuMZ[_0x5c24c7(0xbb3)]['Settings'][_0x5c24c7(0x395)];if(_0x696e80[_0x5c24c7(0x519)]){if(_0x696e80[_0x5c24c7(0x79f)]&&BattleManager['isBattleTest']())return!![];if(this['_battler'][_0x5c24c7(0x923)])return![];return this['_battler']['hasBeenDefeatedBefore']();}return!![];},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x697)]=Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x553)],Sprite_Battler[_0x5a8ff0(0xb6e)]['isMoving']=function(){const _0x336009=_0x5a8ff0;if(!this[_0x336009(0x1aa)])return![];if(this[_0x336009(0x2a7)]>0x0)return!![];return VisuMZ[_0x336009(0xbb3)][_0x336009(0x697)]['call'](this);},VisuMZ['BattleCore'][_0x5a8ff0(0x26d)]=Sprite_Battler['prototype']['startMove'],Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x607)]=function(_0x5575d5,_0x1b4c8f,_0x27f3f4){const _0x2efedb=_0x5a8ff0;this[_0x2efedb(0x850)]()&&VisuMZ[_0x2efedb(0xbb3)][_0x2efedb(0x26d)][_0x2efedb(0x31b)](this,_0x5575d5,_0x1b4c8f,_0x27f3f4);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x850)]=function(){const _0x46431f=_0x5a8ff0;if(this[_0x46431f(0x1aa)]&&this['_battler'][_0x46431f(0x46a)]())return![];if(this[_0x46431f(0x1aa)]&&!this[_0x46431f(0x1aa)][_0x46431f(0x2e3)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x64e)]=function(){},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1bf)]=function(){const _0x35d178=_0x5a8ff0;this[_0x35d178(0x607)](0x0,0x0,0xc);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x813)]=function(){},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x84d)]=function(){const _0x2e62a3=_0x5a8ff0,_0x57dcf2=VisuMZ[_0x2e62a3(0xbb3)]['Settings']['Actor'],_0x535750=this[_0x2e62a3(0x1aa)]&&this[_0x2e62a3(0x1aa)][_0x2e62a3(0x34b)]()?0x1:-0x1,_0x5e6dc3=this[_0x2e62a3(0x7bd)]-this['_homeX']+_0x535750*_0x57dcf2[_0x2e62a3(0x3bf)],_0x5e0f7e=this[_0x2e62a3(0x4b6)]-this['_homeY']+_0x535750*_0x57dcf2[_0x2e62a3(0x389)],_0xa1bd90=_0x57dcf2[_0x2e62a3(0xbf6)];this[_0x2e62a3(0x607)](_0x5e6dc3,_0x5e0f7e,_0xa1bd90);},Sprite_Battler[_0x5a8ff0(0xb6e)]['startShakeFlinch']=function(_0x265428,_0x579a32){const _0x5df76e=_0x5a8ff0,_0x59589f=VisuMZ['BattleCore'][_0x5df76e(0xba1)]['Actor'];this[_0x5df76e(0x262)]=Math[_0x5df76e(0x447)]((_0x59589f[_0x5df76e(0x31c)]??0x18)*_0x579a32),this[_0x5df76e(0x377)]=Math[_0x5df76e(0x6dd)](this[_0x5df76e(0x377)],_0x265428);},Sprite_Battler[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x228)]=function(){const _0x4301ef=_0x5a8ff0,_0x57c4b2=VisuMZ[_0x4301ef(0xbb3)][_0x4301ef(0xba1)]['Actor'];if(!(_0x57c4b2[_0x4301ef(0x2c9)]??![]))return;if(this['_shakeFlinchDuration']>0x0){const _0x2a2c40=this[_0x4301ef(0x262)];this[_0x4301ef(0x377)]=this['_shakeFlinchPower']*(_0x2a2c40-0x1)/_0x2a2c40,this[_0x4301ef(0x262)]--,this[_0x4301ef(0x262)]<=0x0&&(this[_0x4301ef(0x377)]=0x0);}this[_0x4301ef(0x377)]>0x0?(this[_0x4301ef(0x84e)]['x']=Math[_0x4301ef(0x8c8)](this[_0x4301ef(0x377)])*(Math[_0x4301ef(0x539)]()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this['_mainSprite']['y']=this[_0x4301ef(0x75c)]*0.5,this['_mainSprite']['y']+=Math[_0x4301ef(0x8c8)](this[_0x4301ef(0x377)])*(Math[_0x4301ef(0x539)]()<0.5?-0x1:0x1))):(this['_mainSprite']['x']=0x0,this[_0x4301ef(0x84e)]['y']=this[_0x4301ef(0x75c)]*0.5);},VisuMZ['BattleCore']['Sprite_Actor_initMembers']=Sprite_Actor[_0x5a8ff0(0xb6e)]['initMembers'],Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3cc)]=function(){const _0x19da63=_0x5a8ff0;VisuMZ[_0x19da63(0xbb3)]['Sprite_Actor_initMembers'][_0x19da63(0x31b)](this),this[_0x19da63(0xb3b)]();},Sprite_Actor[_0x5a8ff0(0xb6e)]['mainSprite']=function(){const _0x296851=_0x5a8ff0;return this[_0x296851(0x6d6)]||this['_mainSprite']||this;},VisuMZ['BattleCore'][_0x5a8ff0(0x655)]=Sprite_Actor['prototype'][_0x5a8ff0(0xb58)],Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb58)]=function(){},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x28e)]=function(_0x4ac771){const _0x14d397=_0x5a8ff0;if(SceneManager[_0x14d397(0x35f)]())return;if(!_0x4ac771)return;if(!_0x4ac771[_0x14d397(0x850)]())return;VisuMZ['BattleCore'][_0x14d397(0x655)][_0x14d397(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa36)]=Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x77c)],Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x77c)]=function(_0x575fe3){const _0x4a6128=_0x5a8ff0;VisuMZ[_0x4a6128(0xbb3)][_0x4a6128(0xba1)]['Actor'][_0x4a6128(0x125)]?VisuMZ[_0x4a6128(0xbb3)][_0x4a6128(0xba1)][_0x4a6128(0x1ba)]['HomePosJS']['call'](this,_0x575fe3):VisuMZ[_0x4a6128(0xbb3)][_0x4a6128(0xa36)][_0x4a6128(0x31b)](this,_0x575fe3);},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Actor_setBattler']=Sprite_Actor['prototype'][_0x5a8ff0(0x2b2)],Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b2)]=function(_0x46bfbe){const _0x195a29=_0x5a8ff0;VisuMZ[_0x195a29(0xbb3)][_0x195a29(0x31f)][_0x195a29(0x31b)](this,_0x46bfbe),this['setBattlerBattleCore'](_0x46bfbe);},Sprite_Actor['prototype'][_0x5a8ff0(0x219)]=function(_0x412e83){const _0x268fc5=_0x5a8ff0;if(!_0x412e83)return;if(!this[_0x268fc5(0x84e)])return;this[_0x268fc5(0x84e)][_0x268fc5(0x50e)]['x']=this[_0x268fc5(0x2df)]['svBattlerAnchorX'](),this[_0x268fc5(0x84e)]['anchor']['y']=this['_actor'][_0x268fc5(0x73b)](),this[_0x268fc5(0x5c5)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Actor_update']=Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)],Sprite_Actor['prototype'][_0x5a8ff0(0x25f)]=function(){const _0x2540a4=_0x5a8ff0;VisuMZ[_0x2540a4(0xbb3)][_0x2540a4(0xb02)]['call'](this),this[_0x2540a4(0x2df)]&&(this['updateStateSprite'](),this[_0x2540a4(0xbb1)]());},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3aa)],Sprite_Actor['prototype']['updateBitmap']=function(){const _0x57c8ab=_0x5a8ff0;VisuMZ['BattleCore'][_0x57c8ab(0x8bc)]['call'](this),this[_0x57c8ab(0x84e)]&&this[_0x57c8ab(0x84e)]['bitmap']&&this['_battler']&&(this[_0x57c8ab(0x84e)][_0x57c8ab(0x103)]['smooth']!==this['_battler']['battlerSmoothImage']()&&(this[_0x57c8ab(0x84e)]['bitmap']['smooth']=this[_0x57c8ab(0x1aa)]['battlerSmoothImage']()));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x234)]=Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaa9)],Sprite_Actor['prototype']['updateShadow']=function(){const _0x123ee6=_0x5a8ff0;VisuMZ[_0x123ee6(0xbb3)]['Sprite_Actor_updateShadow'][_0x123ee6(0x31b)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x73c)]=function(){const _0x439568=_0x5a8ff0;if(!this[_0x439568(0x84e)])return;if(!this[_0x439568(0x8a1)])return;this[_0x439568(0x5c5)](),this[_0x439568(0x811)]();},Sprite_Actor[_0x5a8ff0(0xb6e)]['updateStateSprite']=function(){const _0x4b8cf8=_0x5a8ff0;{this[_0x4b8cf8(0x378)][_0x4b8cf8(0x90a)]['x']=0x1/(this[_0x4b8cf8(0x90a)]['x']||0.001),this['_stateSprite'][_0x4b8cf8(0x90a)]['y']=0x1/(this[_0x4b8cf8(0x90a)]['y']||0.001);}{this[_0x4b8cf8(0x378)]['x']=0x0,this[_0x4b8cf8(0x378)]['y']=-this[_0x4b8cf8(0x75c)]-0x20+0x60;const _0x3a3cf9=VisuMZ['BattleCore']['Settings'][_0x4b8cf8(0x1ba)];this[_0x4b8cf8(0x378)]['x']+=_0x3a3cf9[_0x4b8cf8(0x771)]??0x0,this[_0x4b8cf8(0x378)]['y']+=_0x3a3cf9['StateOverlayOffsetY']??0x0;}},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbb1)]=function(){const _0xd66c95=_0x5a8ff0;if(!$gameSystem[_0xd66c95(0xa92)]()&&this[_0xd66c95(0x18c)]===Sprite_Actor){const _0x5ed0e5=Scene_Battle[_0xd66c95(0xb6e)][_0xd66c95(0x483)]();[_0xd66c95(0x22f),_0xd66c95(0x1e1),_0xd66c95(0x9e7),'border'][_0xd66c95(0x597)](_0x5ed0e5)&&(this[_0xd66c95(0x485)]=0x0);}},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x91c)]=function(){const _0x3e05b9=_0x5a8ff0,_0x203304=this[_0x3e05b9(0x2df)];if(_0x203304){if(_0x203304['_performDamageMotion'])return;const _0x39a2be=_0x203304[_0x3e05b9(0xbce)]();if(_0x203304['isInputting']()||_0x203304[_0x3e05b9(0x753)]())this[_0x3e05b9(0xa93)](_0x3e05b9(0xa50));else{if(_0x39a2be===0x3)this[_0x3e05b9(0xa93)](_0x3e05b9(0x1ef));else{if(_0x39a2be===0x2)this[_0x3e05b9(0xa93)]('sleep');else{if(this[_0x3e05b9(0x4bf)])this['startMotion'](_0x3e05b9(0x62a));else{if(_0x203304[_0x3e05b9(0xa26)]())this[_0x3e05b9(0xa93)]('wait');else{if(_0x203304[_0x3e05b9(0x878)]())this[_0x3e05b9(0xa93)](_0x3e05b9(0x615));else{if(_0x203304[_0x3e05b9(0x26e)]()||_0x203304['isGuardWaiting']())this[_0x3e05b9(0xa93)](_0x3e05b9(0x400));else{if(_0x39a2be===0x1)this[_0x3e05b9(0xa93)](_0x3e05b9(0x5ad));else{if(_0x203304['isDying']())this[_0x3e05b9(0xa93)](_0x3e05b9(0x516));else{if(_0x203304[_0x3e05b9(0x5c6)]())this[_0x3e05b9(0xa93)](_0x3e05b9(0xa50));else _0x203304[_0x3e05b9(0x718)]()?this[_0x3e05b9(0xa93)](_0x3e05b9(0x914)):this[_0x3e05b9(0xa93)]('walk');}}}}}}}}}}},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x813)]=function(){const _0x317110=_0x5a8ff0,_0x25f29b=0xa,_0x2876f0=0x12c*_0x25f29b,_0x18d990=0x1e*_0x25f29b;this[_0x317110(0x607)](_0x2876f0,0x0,_0x18d990);},Sprite_Actor[_0x5a8ff0(0xb6e)]['onMoveEnd']=function(){const _0xb555ea=_0x5a8ff0;Sprite_Battler[_0xb555ea(0xb6e)][_0xb555ea(0x4a6)][_0xb555ea(0x31b)](this);},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x190)]=function(){const _0x3e1c64=_0x5a8ff0;return Sprite_Battler[_0x3e1c64(0x87a)];},Sprite_Weapon[_0x5a8ff0(0xb6e)]['animationWait']=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7ae)]=function(){},Sprite_Actor[_0x5a8ff0(0xb6e)]['setupWeaponAnimation']=function(){},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x842)]=function(){const _0x43892f=_0x5a8ff0;if(this['_motion']&&++this[_0x43892f(0x6f4)]>=this[_0x43892f(0x190)]()){if(this['_motion']['loop'])this['_pattern']=(this[_0x43892f(0x56a)]+0x1)%0x4;else{if(this[_0x43892f(0x56a)]<0x2)this[_0x43892f(0x56a)]++;else{const _0x24da0c=this['_actor'];if(_0x24da0c)_0x24da0c['_performDamageMotion']=undefined;this[_0x43892f(0x91c)]();}}this[_0x43892f(0x6f4)]=0x0;}},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x889)]=function(_0x186f47){const _0x3884d7=_0x5a8ff0;if(this['_battler']&&this[_0x3884d7(0x1aa)][_0x3884d7(0x46a)]()){this[_0x3884d7(0x386)]=Sprite_Actor[_0x3884d7(0x206)][_0x3884d7(0x1ef)];return;}const _0x389865=Sprite_Actor[_0x3884d7(0x206)][_0x186f47];this['_motion']=_0x389865,this['_motionCount']=0x0,this[_0x3884d7(0x56a)]=0x0;},Sprite_Actor[_0x5a8ff0(0xb6e)]['forceWeaponAnimation']=function(_0x4ac696){const _0x5da472=_0x5a8ff0;if(this[_0x5da472(0x913)]())return;this[_0x5da472(0x9b6)](),this[_0x5da472(0x846)][_0x5da472(0x681)](_0x4ac696),this[_0x5da472(0x2df)]['clearWeaponAnimation']();},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9b6)]=function(){const _0x4f2cfd=_0x5a8ff0;let _0x3c6600=-0x10,_0x5c5b17=this[_0x4f2cfd(0x75c)]*0.5;const _0x3b7cc4=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x36fd65=this['_battler'][_0x4f2cfd(0x75f)]()[_0x4f2cfd(0x5d7)](_0xdf6e9a=>_0xdf6e9a&&_0xdf6e9a['note'][_0x4f2cfd(0x6d8)](_0x3b7cc4)?Number(RegExp['$1']):0x0),_0x54e947=this['_battler'][_0x4f2cfd(0x75f)]()[_0x4f2cfd(0x5d7)](_0x485518=>_0x485518&&_0x485518[_0x4f2cfd(0x494)][_0x4f2cfd(0x6d8)](_0x3b7cc4)?Number(RegExp['$2']):0x0);_0x3c6600=_0x36fd65[_0x4f2cfd(0x731)]((_0x2e1f18,_0x1d30a7)=>_0x2e1f18+_0x1d30a7,_0x3c6600),_0x5c5b17=_0x54e947[_0x4f2cfd(0x731)]((_0x4bbe01,_0x48c0d3)=>_0x4bbe01+_0x48c0d3,_0x5c5b17),this[_0x4f2cfd(0x846)]['x']=_0x3c6600,this[_0x4f2cfd(0x846)]['y']=_0x5c5b17,this[_0x4f2cfd(0x846)]['update']();},Sprite_Weapon['prototype'][_0x5a8ff0(0x681)]=function(_0x2174c9){const _0x59ac66=_0x5a8ff0;this[_0x59ac66(0x3b9)]=_0x2174c9,this['_animationCount']=-0x1,this['_pattern']=0x0,this[_0x59ac66(0xafc)](),this[_0x59ac66(0xb00)]();},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x62d)]=function(){},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x64e)]=function(){const _0x3b6249=_0x5a8ff0,_0x5cf677=VisuMZ[_0x3b6249(0xbb3)][_0x3b6249(0xba1)]['ActionSequence'],_0x4c185a=_0x5cf677['StepDistanceX'],_0xe8bad0=_0x5cf677[_0x3b6249(0x74e)],_0x232a4c=_0x5cf677[_0x3b6249(0x289)];this[_0x3b6249(0x607)](-_0x4c185a,-_0xe8bad0,_0x232a4c);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xbdc)]=Sprite_Actor['prototype'][_0x5a8ff0(0xb00)],Sprite_Actor[_0x5a8ff0(0xb6e)]['updateFrame']=function(){const _0x1d51a9=_0x5a8ff0;this['hasStaticSvBattler']()?this[_0x1d51a9(0x849)]():(this[_0x1d51a9(0xa72)](),VisuMZ[_0x1d51a9(0xbb3)]['Sprite_Actor_updateFrame'][_0x1d51a9(0x31b)](this));},Sprite_Actor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa72)]=function(){const _0x1c8655=_0x5a8ff0;if(this[_0x1c8655(0x1aa)]&&this[_0x1c8655(0x1aa)][_0x1c8655(0x5ce)]){const _0x4e1420=this[_0x1c8655(0x1aa)][_0x1c8655(0x5ce)];this[_0x1c8655(0x386)]=Sprite_Actor[_0x1c8655(0x206)][_0x4e1420[_0x1c8655(0x6f7)]],this[_0x1c8655(0x56a)]=_0x4e1420[_0x1c8655(0x63b)];const _0x4cfecf=this[_0x1c8655(0x846)];_0x4cfecf[_0x1c8655(0x9eb)](_0x4e1420[_0x1c8655(0x9d4)],_0x4e1420[_0x1c8655(0x63b)]),this[_0x1c8655(0x9b6)]();}},Sprite_Weapon[_0x5a8ff0(0xb6e)]['freezeFrame']=function(_0x32f133,_0x4ed28e){const _0x4da67b=_0x5a8ff0;this[_0x4da67b(0x3b9)]=_0x32f133,this[_0x4da67b(0x4a7)]=-Infinity,this[_0x4da67b(0x56a)]=_0x4ed28e,this[_0x4da67b(0xafc)](),this['updateFrame']();},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3cc)]=function(){const _0x16509d=_0x5a8ff0;Sprite_Battler[_0x16509d(0xb6e)][_0x16509d(0x3cc)]['call'](this),this['_enemy']=null,this['_appeared']=![],this[_0x16509d(0x620)]='',this[_0x16509d(0x10b)]=0x0,this[_0x16509d(0xb6b)]=null,this[_0x16509d(0x7c4)]=0x0,this[_0x16509d(0x215)]=0x0,this['createMainSprite'](),this[_0x16509d(0x6ab)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x926)]=Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)],Sprite_Enemy['prototype']['update']=function(){const _0x2fc700=_0x5a8ff0;VisuMZ[_0x2fc700(0xbb3)]['Sprite_Enemy_update'][_0x2fc700(0x31b)](this),this[_0x2fc700(0x5c5)](),this[_0x2fc700(0x118)]();},Sprite_Enemy[_0x5a8ff0(0xb6e)]['createMainSprite']=function(){const _0x576f77=_0x5a8ff0;this[_0x576f77(0x84e)]=new Sprite(),this[_0x576f77(0x84e)][_0x576f77(0x50e)]['x']=0.5,this[_0x576f77(0x84e)][_0x576f77(0x50e)]['y']=0x1,this[_0x576f77(0xa57)](this[_0x576f77(0x84e)]),this[_0x576f77(0xb3b)]();},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1d5)]=function(){const _0x414cc9=_0x5a8ff0;return this[_0x414cc9(0x6d6)]||this['_mainSprite']||this;},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xafc)]=function(_0x3af3fc){const _0x28bea3=_0x5a8ff0;this['bitmap']=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x2128b0=this[_0x28bea3(0x83c)][_0x28bea3(0xb6c)]();this[_0x28bea3(0x103)]=new Bitmap(_0x2128b0['width'],_0x2128b0['height']),this[_0x28bea3(0x84e)][_0x28bea3(0x103)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x28bea3(0xa92)]()){const _0x563ac5=ImageManager[_0x28bea3(0x8fc)](_0x3af3fc);_0x563ac5['addLoadListener'](this[_0x28bea3(0x8a4)][_0x28bea3(0x164)](this,_0x563ac5));}else{const _0x497fad=ImageManager[_0x28bea3(0xc0b)](_0x3af3fc);_0x497fad['addLoadListener'](this[_0x28bea3(0x8a4)]['bind'](this,_0x497fad));}}},Sprite_Enemy['prototype'][_0x5a8ff0(0x8a4)]=function(_0xec1448){const _0x5c0569=_0x5a8ff0;this[_0x5c0569(0x84e)][_0x5c0569(0x103)]=_0xec1448,this['bitmap']=new Bitmap(_0xec1448[_0x5c0569(0x3fa)],_0xec1448[_0x5c0569(0x75c)]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x892)]=Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x492)],Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x492)]=function(_0x14e696){const _0x1d1c1b=_0x5a8ff0;this[_0x1d1c1b(0x84e)]&&this[_0x1d1c1b(0x84e)][_0x1d1c1b(0x492)](_0x14e696);},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Enemy_initVisibility']=Sprite_Enemy['prototype'][_0x5a8ff0(0x4ac)],Sprite_Enemy[_0x5a8ff0(0xb6e)]['initVisibility']=function(){const _0x178ba9=_0x5a8ff0;this[_0x178ba9(0x8ca)]()?VisuMZ[_0x178ba9(0xbb3)][_0x178ba9(0x2c8)][_0x178ba9(0x31b)](this):(this[_0x178ba9(0x521)]=!this['_enemy']['isHidden'](),!this[_0x178ba9(0x521)]&&(this[_0x178ba9(0x485)]=0x0));},VisuMZ['BattleCore'][_0x5a8ff0(0x6d1)]=Sprite_Enemy[_0x5a8ff0(0xb6e)]['updateCollapse'],Sprite_Enemy['prototype'][_0x5a8ff0(0x23f)]=function(){const _0xd7e27b=_0x5a8ff0;if(this['allowCollapse']())VisuMZ['BattleCore'][_0xd7e27b(0x6d1)][_0xd7e27b(0x31b)](this);},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb00)]=function(){const _0x30517d=_0x5a8ff0;Sprite_Battler[_0x30517d(0xb6e)]['updateFrame'][_0x30517d(0x31b)](this);const _0x9c546=this['mainSprite']()||this;if(!_0x9c546)return;!_0x9c546['bitmap']&&(_0x9c546[_0x30517d(0x103)]=new Bitmap(this[_0x30517d(0x3fa)]||0x1,this['height']||0x1));if(this[_0x30517d(0xb6b)]==='bossCollapse')this[_0x30517d(0x84e)]['setFrame'](0x0,0x0,this['_mainSprite'][_0x30517d(0x3fa)]||0x1,this['_effectDuration']);else{let _0xf678b7=0x1;if(_0x9c546&&_0x9c546[_0x30517d(0x103)])_0xf678b7=_0x9c546[_0x30517d(0x103)][_0x30517d(0x3fa)];let _0x2568f5=0x1;if(this['bitmap'])_0x2568f5=this[_0x30517d(0x103)][_0x30517d(0x75c)];_0x9c546[_0x30517d(0x3c0)](0x0,0x0,_0xf678b7,_0x2568f5);}},VisuMZ['BattleCore'][_0x5a8ff0(0x859)]=Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x466)],Sprite_Enemy['prototype'][_0x5a8ff0(0x466)]=function(){const _0x4a89c1=_0x5a8ff0;if(this['allowCollapse']())VisuMZ['BattleCore']['Sprite_Enemy_updateBossCollapse'][_0x4a89c1(0x31b)](this);},Sprite_Enemy[_0x5a8ff0(0xb6e)]['isMoving']=function(){const _0x2d712d=_0x5a8ff0;return Sprite_Battler[_0x2d712d(0xb6e)]['isMoving']['call'](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x94f)]=Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8bf)],Sprite_Enemy[_0x5a8ff0(0xb6e)]['updateStateSprite']=function(){const _0x486251=_0x5a8ff0;VisuMZ[_0x486251(0xbb3)][_0x486251(0x94f)][_0x486251(0x31b)](this),this[_0x486251(0x332)]();},Sprite_Enemy['prototype'][_0x5a8ff0(0x332)]=function(){const _0x4d7b7f=_0x5a8ff0,_0x1a68ed=VisuMZ[_0x4d7b7f(0xbb3)][_0x4d7b7f(0xba1)][_0x4d7b7f(0x85b)];if(_0x1a68ed[_0x4d7b7f(0x313)]&&!_0x1a68ed[_0x4d7b7f(0x6cc)]){this['_stateIconSprite']['opacity']=0x0;return;}this[_0x4d7b7f(0xbea)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x4d7b7f(0x1aa)][_0x4d7b7f(0x323)]();let _0xa1bae5=0x1;if(this[_0x4d7b7f(0x103)])_0xa1bae5=this[_0x4d7b7f(0x103)][_0x4d7b7f(0x75c)];this[_0x4d7b7f(0xbea)]['y']=-_0xa1bae5-this[_0x4d7b7f(0xbea)][_0x4d7b7f(0x75c)]-0x4,this['_stateIconSprite']['y']+=this['_battler']['battleUIOffsetY'](),this[_0x4d7b7f(0xbea)][_0x4d7b7f(0x90a)]['x']=0x1/(this['scale']['x']||0.001),this[_0x4d7b7f(0xbea)]['scale']['y']=0x1/(this['scale']['y']||0.001),this[_0x4d7b7f(0xb75)]()&&(this[_0x4d7b7f(0x14e)][_0x4d7b7f(0x378)][_0x4d7b7f(0x90a)]['x']=-0x1/(this[_0x4d7b7f(0x90a)]['x']||0.001),this[_0x4d7b7f(0x14e)][_0x4d7b7f(0x378)]['scale']['y']=0x1/(this[_0x4d7b7f(0x90a)]['y']||0.001));},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x118)]=function(){const _0x27f2ce=_0x5a8ff0;this[_0x27f2ce(0x1aa)]&&this[_0x27f2ce(0x1aa)][_0x27f2ce(0x118)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Enemy_setBattler']=Sprite_Enemy['prototype']['setBattler'],Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b2)]=function(_0x545832){const _0x317a3d=_0x5a8ff0;VisuMZ['BattleCore'][_0x317a3d(0x7dc)][_0x317a3d(0x31b)](this,_0x545832),this[_0x317a3d(0x12c)](_0x545832);},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x12c)]=function(_0x16631b){const _0x47e3e9=_0x5a8ff0;!this[_0x47e3e9(0x14e)]&&(this[_0x47e3e9(0x14e)]=new Sprite_SvEnemy(_0x16631b),this[_0x47e3e9(0xb3b)]()),this['_svBattlerSprite'][_0x47e3e9(0x2b2)](_0x16631b);},Sprite_Enemy[_0x5a8ff0(0xb6e)]['hasSvBattler']=function(){const _0x57577d=_0x5a8ff0;return this[_0x57577d(0x83c)]&&this[_0x57577d(0x83c)][_0x57577d(0xb75)]();},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8ca)]=function(){const _0x403c0a=_0x5a8ff0;return this[_0x403c0a(0xb75)]()?this['_enemy'][_0x403c0a(0x8ca)]():!![];},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x91c)]=function(){const _0x49e5b3=_0x5a8ff0;this[_0x49e5b3(0xb75)]()&&this[_0x49e5b3(0x14e)]['refreshMotion']();},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x889)]=function(_0x3e5b08){const _0x2cef42=_0x5a8ff0;if(this['hasSvBattler']())this[_0x2cef42(0x14e)][_0x2cef42(0x889)](_0x3e5b08);},Sprite_Enemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5c1)]=function(_0x2c8bed){const _0x1ab232=_0x5a8ff0;if(this['hasSvBattler']())this[_0x1ab232(0x14e)][_0x1ab232(0x5c1)](_0x2c8bed);},Sprite_Enemy[_0x5a8ff0(0xb6e)]['stepForward']=function(){const _0x44008a=_0x5a8ff0,_0x50e4b0=VisuMZ[_0x44008a(0xbb3)][_0x44008a(0xba1)][_0x44008a(0x828)],_0x1c1955=_0x50e4b0[_0x44008a(0x85c)],_0x2a1c16=_0x50e4b0[_0x44008a(0x74e)],_0xb21fc3=_0x50e4b0[_0x44008a(0x289)];this[_0x44008a(0x607)](_0x1c1955,_0x2a1c16,_0xb21fc3);};function Sprite_SvEnemy(){const _0xdbb3ac=_0x5a8ff0;this[_0xdbb3ac(0x4aa)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x5a8ff0(0x8d3)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(_0x452eba){const _0x17d7cf=_0x5a8ff0;Sprite_Actor[_0x17d7cf(0xb6e)][_0x17d7cf(0x4aa)][_0x17d7cf(0x31b)](this,_0x452eba),this[_0x17d7cf(0x90a)]['x']=-0x1,this['_stateSprite'][_0x17d7cf(0x90a)]['x']=-0x1;},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x68f)]=function(){},Sprite_SvEnemy['prototype'][_0x5a8ff0(0xb58)]=function(){},Sprite_SvEnemy[_0x5a8ff0(0xb6e)]['setActorHome']=function(_0x757f76){},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaa9)]=function(){},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x811)]=function(){},Sprite_SvEnemy['prototype'][_0x5a8ff0(0x8bf)]=function(){const _0x487c05=_0x5a8ff0;this[_0x487c05(0x378)][_0x487c05(0xb22)]=![];},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3aa)]=function(){const _0x46203a=_0x5a8ff0;Sprite_Battler[_0x46203a(0xb6e)][_0x46203a(0x3aa)][_0x46203a(0x31b)](this);const _0x5a2a1e=this[_0x46203a(0x2df)]['svBattlerName']();this['_battlerName']!==_0x5a2a1e&&(this['_battlerName']=_0x5a2a1e,this[_0x46203a(0x84e)]['bitmap']=ImageManager[_0x46203a(0x3b2)](_0x5a2a1e)),this[_0x46203a(0x84e)]&&this[_0x46203a(0x84e)]['bitmap']&&this[_0x46203a(0x1aa)]&&(this[_0x46203a(0x84e)][_0x46203a(0x103)][_0x46203a(0x186)]!==this['_battler'][_0x46203a(0x977)]()&&(this[_0x46203a(0x84e)][_0x46203a(0x103)][_0x46203a(0x186)]=this[_0x46203a(0x1aa)][_0x46203a(0x977)]()));},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x813)]=function(){},Sprite_SvEnemy['prototype']['startMove']=function(_0x732a7,_0x1bc6b7,_0x3ab2e4){const _0x1fd6e0=_0x5a8ff0;if(this[_0x1fd6e0(0x4b4)])this['parent'][_0x1fd6e0(0x607)](_0x732a7,_0x1bc6b7,_0x3ab2e4);},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x91c)]=function(){const _0x1748d9=_0x5a8ff0,_0x519f65=this[_0x1748d9(0x2df)];if(_0x519f65){const _0x15826a=_0x519f65['stateMotionIndex']();if(_0x519f65[_0x1748d9(0x6e5)]()||_0x519f65[_0x1748d9(0x753)]())this['startMotion'](_0x1748d9(0xa50));else{if(_0x15826a===0x3)this[_0x1748d9(0xa93)](_0x1748d9(0x1ef));else{if(_0x15826a===0x2)this['startMotion']('sleep');else{if(_0x519f65['isChanting']())this[_0x1748d9(0xa93)]('chant');else{if(_0x519f65[_0x1748d9(0x26e)]()||_0x519f65['isGuardWaiting']())this[_0x1748d9(0xa93)](_0x1748d9(0x400));else{if(_0x15826a===0x1)this['startMotion'](_0x1748d9(0x5ad));else{if(_0x519f65[_0x1748d9(0xa9a)]())this[_0x1748d9(0xa93)]('dying');else _0x519f65['isUndecided']()?this[_0x1748d9(0xa93)](_0x519f65[_0x1748d9(0xb6c)]()['motionIdle']||_0x1748d9(0xa50)):this[_0x1748d9(0xa93)](_0x519f65[_0x1748d9(0xb6c)]()[_0x1748d9(0x44d)]||_0x1748d9(0xa50));}}}}}}}},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xf7)]=function(){const _0x94aa3c=_0x5a8ff0;return this['parent']?this[_0x94aa3c(0x4b4)]['_offsetX']===0x0&&this[_0x94aa3c(0x4b4)][_0x94aa3c(0xace)]===0x0:!![];},Sprite_SvEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4b9)]=function(){},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xc1a)]=Sprite_Animation['prototype'][_0x5a8ff0(0xb88)],Sprite_Animation[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb88)]=function(_0x1633af){const _0x2ae775=_0x5a8ff0;return _0x1633af[_0x2ae775(0x6d6)]?this[_0x2ae775(0xa27)](_0x1633af):VisuMZ[_0x2ae775(0xbb3)][_0x2ae775(0xc1a)][_0x2ae775(0x31b)](this,_0x1633af);},Sprite_Animation[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa27)]=function(_0xf502ee){const _0x36bc9c=_0x5a8ff0;let _0xf25e9e=_0xf502ee['x'],_0x328796=_0xf502ee['y'],_0x4e941c=_0xf502ee['height'],_0x1779de=_0xf502ee[_0x36bc9c(0x6d6)][_0x36bc9c(0x90a)]['y'];_0xf502ee['x']=_0xf502ee[_0x36bc9c(0x7bd)]+_0xf502ee[_0x36bc9c(0xaa4)](),_0xf502ee['y']=_0xf502ee['_baseY']+_0xf502ee[_0x36bc9c(0x737)](),_0xf502ee['height']*=_0x1779de;let _0x491f30=VisuMZ['BattleCore'][_0x36bc9c(0xc1a)][_0x36bc9c(0x31b)](this,_0xf502ee);return _0xf502ee['x']=_0xf25e9e,_0xf502ee['y']=_0x328796,_0xf502ee[_0x36bc9c(0x75c)]=_0x4e941c,_0x491f30;},Sprite_Animation[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x83a)]=function(){const _0x5beb52=_0x5a8ff0;if(this['_isProjectile'])return![];return this[_0x5beb52(0x2f2)]&&this[_0x5beb52(0x2f2)][_0x5beb52(0xa4b)]&&this['_animation'][_0x5beb52(0xa4b)][_0x5beb52(0x6d8)](/<UNDER>/gi);},VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5f4)],Sprite_AnimationMV[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5f4)]=function(){const _0x2debf3=_0x5a8ff0;VisuMZ[_0x2debf3(0xbb3)][_0x2debf3(0x1da)][_0x2debf3(0x31b)](this);if(!SceneManager[_0x2debf3(0x5c8)]())return;if(this[_0x2debf3(0x2f2)][_0x2debf3(0x621)]===0x3)this['x']=Math[_0x2debf3(0xb41)](Graphics[_0x2debf3(0x650)]/0x2),this['y']=Math[_0x2debf3(0xb41)](Graphics[_0x2debf3(0x830)]/0x2);else{if(this[_0x2debf3(0x379)])return;}},Sprite_AnimationMV[_0x5a8ff0(0xb6e)]['isUnderAnimation']=function(){const _0x38c6ab=_0x5a8ff0;if(this['_isProjectile'])return![];return this[_0x38c6ab(0x2f2)]&&this[_0x38c6ab(0x2f2)][_0x38c6ab(0xa4b)]&&this[_0x38c6ab(0x2f2)]['name'][_0x38c6ab(0x6d8)](/<UNDER>/gi);},Sprite_Damage[_0x5a8ff0(0xb6e)]['setupBattleCore']=function(_0x379e5d){const _0x517f6d=_0x5a8ff0,_0x36fb67=_0x379e5d[_0x517f6d(0x14c)]()||_0x379e5d[_0x517f6d(0xa41)]();if(_0x36fb67[_0x517f6d(0x37b)]||_0x36fb67[_0x517f6d(0x7a9)])this['_colorType']=0x0,this[_0x517f6d(0xbf2)]();else{if(_0x36fb67['hpAffected'])this['_colorType']=_0x36fb67[_0x517f6d(0x710)]>=0x0?0x0:0x1,this[_0x517f6d(0x808)](_0x36fb67[_0x517f6d(0x710)]);else _0x379e5d[_0x517f6d(0x6b2)]()&&_0x36fb67[_0x517f6d(0xb8f)]!==0x0&&(this[_0x517f6d(0x2d1)]=_0x36fb67[_0x517f6d(0xb8f)]>=0x0?0x2:0x3,this[_0x517f6d(0x808)](_0x36fb67[_0x517f6d(0xb8f)]));}_0x36fb67[_0x517f6d(0x4ab)]&&this[_0x517f6d(0x799)]();},Sprite_Damage[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)]=function(_0x54c250){},Sprite_Damage[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x808)]=function(_0x17af3d){const _0x248cab=_0x5a8ff0;let _0x3e90fa=this['createString'](_0x17af3d);const _0x5bb708=this[_0x248cab(0x649)](),_0x2ea4b7=Math[_0x248cab(0x87f)](_0x5bb708*0.75);for(let _0x3b8dc7=0x0;_0x3b8dc7<_0x3e90fa[_0x248cab(0x6b9)];_0x3b8dc7++){const _0x502638=this[_0x248cab(0x7bf)](_0x2ea4b7,_0x5bb708);_0x502638[_0x248cab(0x103)]['drawText'](_0x3e90fa[_0x3b8dc7],0x0,0x0,_0x2ea4b7,_0x5bb708,_0x248cab(0x5a5)),_0x502638['x']=(_0x3b8dc7-(_0x3e90fa[_0x248cab(0x6b9)]-0x1)/0x2)*_0x2ea4b7,_0x502638['dy']=-_0x3b8dc7;}},Sprite_Damage[_0x5a8ff0(0xb6e)]['createString']=function(_0x517570){const _0xf8d9c=_0x5a8ff0;let _0x28e051=Math[_0xf8d9c(0x444)](_0x517570)[_0xf8d9c(0xb96)]();this[_0xf8d9c(0x4b8)]()&&(_0x28e051=VisuMZ['GroupDigits'](_0x28e051));const _0x128809=VisuMZ[_0xf8d9c(0xbb3)][_0xf8d9c(0xba1)]['Damage'];let _0x1fa643='',_0x21cebc='';switch(this[_0xf8d9c(0x2d1)]){case 0x0:_0x1fa643=_0x128809[_0xf8d9c(0x88f)]||_0xf8d9c(0x82c),_0x21cebc=TextManager['hp'];if(_0x517570===0x0)_0x1fa643='%1';break;case 0x1:_0x1fa643=_0x128809['hpHealingFmt']||_0xf8d9c(0x8b2),_0x21cebc=TextManager['hp'];break;case 0x2:_0x1fa643=_0x128809[_0xf8d9c(0x791)]||_0xf8d9c(0x7e6),_0x21cebc=TextManager['mp'];break;case 0x3:_0x1fa643=_0x128809[_0xf8d9c(0xbd2)]||_0xf8d9c(0x60e),_0x21cebc=TextManager['mp'];break;}return _0x1fa643[_0xf8d9c(0x907)](_0x28e051,_0x21cebc)[_0xf8d9c(0xb20)]();},Sprite_Damage[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4b8)]=function(){const _0x574146=_0x5a8ff0;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x574146(0x208)][_0x574146(0xba1)][_0x574146(0xae9)][_0x574146(0x2ea)]:![];},Sprite_Damage[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x799)]=function(){const _0x16c59b=_0x5a8ff0,_0x3c301e=VisuMZ['BattleCore'][_0x16c59b(0xba1)]['Damage'];_0x3c301e[_0x16c59b(0x7e8)]=_0x3c301e[_0x16c59b(0x7e8)]||[0x0,0x0,0x0,0x0],this[_0x16c59b(0x53d)]=_0x3c301e[_0x16c59b(0x7e8)][_0x16c59b(0x152)](0x0),this[_0x16c59b(0x3f3)]=_0x3c301e['CriticalDuration']||0x1;},Sprite_Damage[_0x5a8ff0(0xb6e)]['setupTextPopup']=function(_0x52a8da,_0x4e0baf){const _0x3ff9d3=_0x5a8ff0;this[_0x3ff9d3(0x53d)]=_0x4e0baf[_0x3ff9d3(0xa39)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x3ff9d3(0x78e)](this[_0x3ff9d3(0x53d)]),this['_flashDuration']=_0x4e0baf[_0x3ff9d3(0xb1b)]||0x0;const _0xf15617=this['fontSize'](),_0x1f7490=Math[_0x3ff9d3(0x87f)](_0xf15617*0x1e),_0x4cb903=this[_0x3ff9d3(0x7bf)](_0x1f7490,_0xf15617);_0x4cb903[_0x3ff9d3(0x103)][_0x3ff9d3(0x932)]=ColorManager[_0x3ff9d3(0x3ba)](_0x4e0baf[_0x3ff9d3(0x932)]),_0x4cb903[_0x3ff9d3(0x103)][_0x3ff9d3(0x70d)](_0x52a8da,0x0,0x0,_0x1f7490,_0xf15617,'center'),_0x4cb903['dy']=0x0;},Sprite_Damage['prototype'][_0x5a8ff0(0x975)]=function(_0x8d62db,_0x5c74c3,_0x3da542){const _0x3c91f5=_0x5a8ff0,_0x550e32=Math['max'](this[_0x3c91f5(0x649)](),ImageManager['iconHeight']),_0xe02868=Math['floor'](_0x550e32*0x1e),_0x2d3631=this[_0x3c91f5(0x7bf)](_0xe02868,_0x550e32),_0x4dbdf1=ImageManager['iconWidth']/0x2,_0x1f7f9f=_0x2d3631[_0x3c91f5(0x103)]['measureTextWidth'](_0x5c74c3+'\x20');_0x2d3631['bitmap'][_0x3c91f5(0x932)]=ColorManager[_0x3c91f5(0x3ba)](_0x3da542[_0x3c91f5(0x932)]),_0x2d3631[_0x3c91f5(0x103)][_0x3c91f5(0x70d)](_0x5c74c3,_0x4dbdf1,0x0,_0xe02868-_0x4dbdf1,_0x550e32,_0x3c91f5(0x5a5));const _0x3e1ef8=Math['round']((_0x550e32-ImageManager[_0x3c91f5(0x782)])/0x2),_0x887b25=_0xe02868/0x2-ImageManager[_0x3c91f5(0x80b)]-_0x1f7f9f/0x2+_0x4dbdf1/0x2,_0x249546=ImageManager[_0x3c91f5(0x2b7)](_0x3c91f5(0x6ba)),_0x2bfce8=ImageManager[_0x3c91f5(0x80b)],_0x3d141e=ImageManager[_0x3c91f5(0x782)],_0x48e640=_0x8d62db%0x10*_0x2bfce8,_0x1e6971=Math['floor'](_0x8d62db/0x10)*_0x3d141e;_0x2d3631[_0x3c91f5(0x103)][_0x3c91f5(0x230)](_0x249546,_0x48e640,_0x1e6971,_0x2bfce8,_0x3d141e,_0x887b25,_0x3e1ef8),this[_0x3c91f5(0x53d)]=_0x3da542[_0x3c91f5(0xa39)]||[0x0,0x0,0x0,0x0],this[_0x3c91f5(0x53d)]=JsonEx[_0x3c91f5(0x78e)](this[_0x3c91f5(0x53d)]),this[_0x3c91f5(0x3f3)]=_0x3da542['flashDuration']||0x0,_0x2d3631['dy']=0x0,_0x3da542[_0x3c91f5(0x4b0)]&&(_0x2d3631['x']+=_0x3da542['offsetX']),_0x3da542[_0x3c91f5(0xa79)]&&(_0x2d3631['dy']+=_0x3da542[_0x3c91f5(0xa79)]);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x9f6)]=Sprite_Damage['prototype'][_0x5a8ff0(0x7bf)],Sprite_Damage['prototype'][_0x5a8ff0(0x7bf)]=function(_0x1b8e6d,_0x392cb8){const _0x56f3ad=_0x5a8ff0;return _0x392cb8=Math[_0x56f3ad(0xb41)](_0x392cb8*1.2),VisuMZ[_0x56f3ad(0xbb3)][_0x56f3ad(0x9f6)][_0x56f3ad(0x31b)](this,_0x1b8e6d,_0x392cb8);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xbd5)]=Sprite_StateIcon[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb00)],Sprite_StateIcon[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb00)]=function(){const _0x1d0e12=_0x5a8ff0;VisuMZ[_0x1d0e12(0xbb3)][_0x1d0e12(0xbd5)][_0x1d0e12(0x31b)](this),this[_0x1d0e12(0x485)]=this[_0x1d0e12(0x324)]>0x0?0xff:0x0;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x11b)]=Sprite_Weapon[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xafc)],Sprite_Weapon['prototype'][_0x5a8ff0(0xafc)]=function(){const _0x50f2e9=_0x5a8ff0;VisuMZ['BattleCore'][_0x50f2e9(0x11b)][_0x50f2e9(0x31b)](this),this['bitmap']&&(this[_0x50f2e9(0x103)][_0x50f2e9(0x186)]=VisuMZ[_0x50f2e9(0xbb3)][_0x50f2e9(0xba1)][_0x50f2e9(0x1ba)]['SmoothImage']);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xbd3)]=Sprite_Gauge[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x207)],Sprite_Gauge[_0x5a8ff0(0xb6e)]['smoothness']=function(){const _0x38aa14=_0x5a8ff0;return this['_statusType']!==_0x38aa14(0xac2)?VisuMZ[_0x38aa14(0xbb3)][_0x38aa14(0xba1)][_0x38aa14(0x395)][_0x38aa14(0x38d)]??0x14:VisuMZ[_0x38aa14(0xbb3)][_0x38aa14(0xbd3)]['call'](this);};function Sprite_GaugeRate(){const _0x2bc98b=_0x5a8ff0;this[_0x2bc98b(0x4aa)](...arguments);}Sprite_GaugeRate[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Sprite_Gauge[_0x5a8ff0(0xb6e)]),Sprite_GaugeRate[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(){const _0x58f7ea=_0x5a8ff0;Sprite_Gauge[_0x58f7ea(0xb6e)]['initialize'][_0x58f7ea(0x31b)](this),this['_updateTargetValue']=![];},Sprite_GaugeRate[_0x5a8ff0(0xb6e)]['updateTargetValue']=function(_0x1b11b0,_0x55e0a5){const _0x4af19f=_0x5a8ff0;this[_0x4af19f(0xa62)]=!![],Sprite_Gauge[_0x4af19f(0xb6e)][_0x4af19f(0x1e3)][_0x4af19f(0x31b)](this,_0x1b11b0,_0x55e0a5),this[_0x4af19f(0xa62)]=![];},Sprite_GaugeRate[_0x5a8ff0(0xb6e)]['currentValue']=function(){const _0xa5ba52=_0x5a8ff0;if(this[_0xa5ba52(0xa62)]){const _0x835236=Sprite_Gauge[_0xa5ba52(0xb6e)]['currentValue'][_0xa5ba52(0x31b)](this),_0x275ba2=this[_0xa5ba52(0xaaa)]();if(_0x275ba2<=0x0)return'100%';return Math[_0xa5ba52(0x87f)](_0x835236/_0x275ba2*0x64)+'%';}else return Sprite_Gauge[_0xa5ba52(0xb6e)][_0xa5ba52(0x53e)][_0xa5ba52(0x31b)](this);},Sprite_GaugeRate[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2cf)]=function(){const _0x3718e0=_0x5a8ff0,_0x53919a=Sprite_Gauge[_0x3718e0(0xb6e)][_0x3718e0(0x53e)]['call'](this),_0x30298c=this[_0x3718e0(0xaaa)]();if(_0x30298c<=0x0)return _0x3718e0(0x9a5);return Math[_0x3718e0(0x87f)](_0x53919a/_0x30298c*0x64)+'%';},Sprite_GaugeRate[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x21b)]=function(){const _0x5cd1a5=_0x5a8ff0;if(this[_0x5cd1a5(0xaaa)]()<=0x0)return 0x1;return Sprite_Gauge[_0x5cd1a5(0xb6e)][_0x5cd1a5(0x21b)][_0x5cd1a5(0x31b)](this);},Sprite_GaugeRate[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4d9)]=function(){const _0x23c207=_0x5a8ff0;if(this['currentMaxValue']()<=0x0)return ColorManager[_0x23c207(0x352)]();return Sprite_Gauge['prototype'][_0x23c207(0x4d9)][_0x23c207(0x31b)](this);},Sprite_GaugeRate[_0x5a8ff0(0xb6e)]['redraw']=function(){const _0x230355=_0x5a8ff0;this[_0x230355(0xb2e)]==='mp'&&this['currentMaxValue']()<=0x0&&($gameTemp[_0x230355(0x46f)]=!![]),Sprite_Gauge[_0x230355(0xb6e)][_0x230355(0x3f7)][_0x230355(0x31b)](this),$gameTemp['redrawForGaugeRate']=undefined;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x4cf)]=ColorManager[_0x5a8ff0(0xbe4)],ColorManager['mpColor']=function(_0x443009){const _0x59aee2=_0x5a8ff0;if($gameTemp[_0x59aee2(0x46f)])return ColorManager[_0x59aee2(0x352)]();return VisuMZ[_0x59aee2(0xbb3)][_0x59aee2(0x4cf)][_0x59aee2(0x31b)](this,_0x443009);};function Sprite_HpGauge(){this['initialize'](...arguments);}function _0x53b8(){const _0x296557=['displayChangedStates','cancel','PopupOffsetX','processDefeat','mpDamage','createEnemySprite','IconStypeNorm','refreshActorPortrait','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','weapons','TpGaugeOffsetX','toString','overworldBattleback2Name','regionId','Window_BattleLog_performCollapse','animationShouldMirror','ActSeq_Movement_FaceDirection','ActSeq_Camera_WaitForCamera','initBattlePortrait','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','_inBattleStatusMode','processCancel','Settings','cancelButtonText','createBattleField','buffHelpFmt','PreEndTurnJS','setHandler','ActSeq_Mechanics_EnemyEscape','drawActorStateData','BattleSystemBTB','setBattleCameraOffset','_targetDamage','adjustPosition_1for1','border','Game_Action_itemHit','selectedBattlers','onOpacityEnd','updateStyleOpacity','actorCommandSingleSkill','BattleCore','_active','isGuardLifeSteal','isDTB','Game_Battler_onTurnEnd','_targetY','anchorY','changeCtbCastTime','all\x20targets','isClicked','_jumpMaxHeight','_lastRegenFrameCount','deselect','Sprite_Battler_setBattler','makeTargetSelectionMoreVisible','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','iconIndex','createPartyCommandWindow','_lastEnemy','isCustomBattleScope','aspect','InBattleStatus','isOpenAndActive','isDamagePopupRequested','addLoadListener','statusWindowRectDefaultStyle','AsTarget','stateMotionIndex','lastCommandSymbol','▼%1','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','mpHealingFmt','Sprite_Gauge_smoothness','Window_BattleLog_performMagicEvasion','Sprite_StateIcon_updateFrame','PreApplyAsTargetJS','cancelMpLifeSteal','helpAreaHeight','579110ZZlrds','ActSeq_BattleLog_Refresh','ActSeq_Mechanics_CustomDmgFormula','Sprite_Actor_updateFrame','startDamagePopup','DefaultSoftCap','updateHelp','battleInjectAni','ActSeq_Skew_WaitForSkew','_forcedHomeX','_targetOpacity','mpColor','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','updateAttachmentSprites','\x5cI[%1]%2','_floatHeight','isBattleMember','_stateIconSprite','addNormalStatus','isShownOnBattlePortrait','portraitType','_subject','ActSeq_Movement_MoveToJsPoint','_tpbChargeTime','removeActor','createMiss','_updateCursorArea','Window_BattleActor_processTouch','ChantStyle','FlinchDuration','gainHp','JS\x20ESCAPE\x20FAILURE','startActorCommandSelection','STATUS','skill','BattlebackScale','isFightCommandEnabled','attackAnimationId1','Parse_Notetags_TraitObjects','Scene_Battle_createActorCommandWindowIBS','PreStartBattleJS','_stypeIDs','JS\x20BATTLE\x20VICTORY','getItemDamageAmountTextOriginal','isTriggered','addSingleSkillCommands','toUseBoostPoints','onEncounterBattleCore','CheckMapBattleEventValid','BattleManager_startBattle','loadEnemy','CounterPlayback','updateLink','chantStyle','battleMove','ActSeq_Mechanics_PtbConvert','pha','VisuMZ_1_MainMenuCore','BattleManager_updatePhase','battleSys','ActSeq_Movement_FaceTarget','index','SvMotionIdleMass-%1-%2','_borderPortraitTargetX','Scene_Battle_createActorCommandWindow','Sprite_Animation_targetSpritePosition','createDistortionSprite','addBattlerBuffsDebuffs','remove','isHiddenSkill','updateSelectionEffect','getDamageStyle','expTotal','WaitForSkew','_doubleTouch','SkillItemStandardCols','ActionSkillMsg1','inHomePosition','children','AspectIcon','PopupPosition','extraHeight','displayEvasion','ActSeq_Grid_RemoveTriggerFromNode','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','setBlendColor','createBattleFieldContainer','isAutoBattleCommandEnabled','Scene_QuickLoad','bitmap','CriticalDmgFlat','MIN_SAFE_INTEGER','updateActors','commandRemember','BgType','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','expRate','_battlerHue','applyData','finishActionSet','PopupShiftX','BattleLog','ShowAddedDebuff','setStateTurns','_targetGrowX','FocusX','canGuard','top','_text','makeBuffName','updateNameTempVisibility','statusWindowRectXPStyle','1:1','Sprite_Weapon_loadBitmap','updateRefresh','alive\x20friends\x20not\x20target','Scene_Battle_createAllWindows_ComboWindow','_drawTextBody','Window_PartyCommand_initialize','ActSeq_Motion_MotionType','ElementStatusCore','addBattleGridMoveCommand','createContents','HomePosJS','positionOffsetX','GetParamIcon','worldTransform','setupHpGaugeSprite','item','changeBattlebacks','setSvBattlerSprite','BARE\x20HANDS','PostEndTurnJS','updateVisibility','_aspectData','processDrawEnemyBattler','setBattlerMotionTrailData','HelpItem','drawItemImage','CmdTextAutoBattle','getFullActionsPTB','Window_BattleLog_displayMpDamage','jumpBattler','popBaseLine','createBorderStylePortraitSprite','performCollapse','StyleOFF','VisuMZ_1_MessageCore','targetObjects','ActSeq_Animation_AttackAnimation','onGrowEnd','addCommand','performMoveToTargets','svBattlerShadowVisible','removeBattleBalloon','ParseItemNotetags','Game_Action_setItem','callUpdateHelp','_performDamageMotion','BattleManager_isTpbMainPhase','Wave','6ewIMcW','getNextDamagePopup','isAnyoneJumping','_svBattlerSprite','alive\x20actors','criticalDmgFlat','onActorCancel','slice','isAnyoneGrowing','ActSeq_Animation_ShowAnimation','MaxHP','SkewY','ActSeq_Mechanics_StbExtraAction','occasion','setupActionSet','ChangeOrderBy','logActionList','TP_Flat','setCommonEvent','updateCounter','updateWaitMode','criticalDmgRate','_enemyWindow','_commonEventQueue','setCustomDamageFormula','bind','changeBattlerOpacity','\x5cI[%1]\x5cC[%3]%2','drawItemImageListStyle','NO\x20ACTOR\x20FOUND!','AllowCollapse','Enemy-%1-%2','_lastActor','attackStatesRate','Scene_Battle_updateStatusWindowPosition','drawActorSimpleStatus','applyVariance','_hue','isAnyoneSpinning','isEnemy','_dimmerSprite','checkCacheKey','drawComboText','_enemyIDs','displayHpDamage','normalHelp','createAllWindows','Window_BattleLog_refresh','onBattleEnd','moveBattlerDistance','ActSeq_Grid_AddTriggerToNodeJS','All\x20Allies','damageCounterWindowRect','battleJump','selectAllActors','battleProjectiles','createStatesWindow','slices','processOk','smooth','ActSeq_Grid_MoveTargetsInDirection','drain','pageButtons','getReturnWindow','ShowWeapon','constructor','damageFlat','VisuMZ_2_AggroControlSystem','_jumpHeight','motionSpeed','isPhysical','splice','battlelog','split','VisuMZ_2_BattleSystemSTB','cameraOffsetDuration','onDatabaseLoaded','right','setupDesaturateImpactFilter','dead\x20friends','DEF','VisuMZ_3_ActSeqProjectiles','XPActorDefaultHeight','MAXMP','ShowCounter','autoMeleeMultiTargetActionSet','Window_BattleLog_performCounter','_svBattlerData','StatusWindow_RectJS','ActionItemMsg','drawItemStatus','AttackAnimation','getDefeatedEnemies','makeData','drawTextEx','_battler','bgType','createInBattleStatusWindow','isSTB','meetsUsableItemConditions','_createEffectsContainer','updateBattlerContainer','canEscape','isSideButtonLayout','balloonId','battleCommands','ActSeq_Animation_ChangeBattlePortrait_JS','damageContainer','getStypeIdWithName','changeInputWindow','ActSeq_Grid_PushFromTargetNode','Actor','_targetHomeY','ActSeq_BattleLog_DisplayAction','WaitCount2','battleCamera','stepBack','Game_BattlerBase_addNewState','delay','itemLineRect','substitute','drawTextTopAligned','damageRate','createBattleUIOffsetY','isForAnyoneFocusOpponents','_blendColor','okTargetSelectionVisibility','hasSkill','getChildIndex','sprite','_targetFloatHeight','commandFight','selectSymbol','setHelpWindow','Game_Battler_performEvasion','ActSeq_Movement_Spin','padding','Game_Action_isForDeadFriend','mainSprite','isForRandom','rate','SideviewSelect','_hideAllIcons','Sprite_AnimationMV_updatePosition','addBattlerStates','Game_Battler_performDamage','iterateBattler','ShowEnemyGauge','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','isSkillItemWindowsMiddle','list','fadeShiftY','updateTargetValue','setBattleImpactTimeScale','BoostPoints','setGuard','fadeShiftX','maxCols','_actionBattlers','angleDuration','recoverAll','refreshDimmerBitmap','attackStates','ActSeq_Impact_Negative','dead','cutinEnter','MAT','removeAnimationFromContainer','commandStyleCheck','_damageContainer','_battlerContainer','ParseClassNotetags','states','_action','setLastPluginCommandInterpreter','commandEscape','DamageRate','origin','battleStatusWindowAnimationContainer','powerUpColor','Window_ActorCommand_setup','Scene_Battle_selectNextCommand','previousActor','playOkSound','statusWindowRectBorderStyle','isLearnedSkill','createCancelButton','MOTIONS','smoothness','CoreEngine','clearDamagePopup','setupOversaturateImpactFilter','updateFloat','Sprite_Battler_initMembers','measureTextWidth','createStateSprite','frontview_ui','command339','battleMembers','isFrameVisible','powerDownColor','_updateDuration','_shake','debuffValueFmt','ActSeq_Movement_HomeMoveToTarget','Game_Battler_regenerateAll','setBattlerBattleCore','isAnyoneChangingOpacity','gaugeRate','clearActiveWeaponSlot','Height','_emptyBitmap','performAttack','isActiveTpbReady','_additionalSprites','startSpin','ActSeq_Mechanics_BoostPointsChange','onEnemyOk','text','missile','_wtypeIDs','updateShakeFlinch','canAlterActionCostPTB','updateOpacity','casting','StateIconOffsetX','_floatDuration','BattleLayout','default','blt','Game_Interpreter_PluginCommand','mainSpriteScaleX','updatePositionBattleCore','Sprite_Actor_updateShadow','sortEnemies','retrieveBattleBalloon','partyCommandWindowRectDefaultStyle','enemyNames','displayType','process_VisuMZ_BattleCore_PluginParams','push','HalfActions','drawParamData','canAttackBattleCore','updateCollapse','animationNextDelay','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','ActSeq_Cutin_WaitForExit','Window_BattleLog_clear','JSON','BattleManager_endBattle','deadMembers','isDisplayEmergedEnemies','ActSeq_Camera_FocusTarget','updateCommandNameWindow','statusTextAutoBattleStyle','hpRate','tpbActorSwitchConditionsMet','pages','ActSeq_Camera_FocusPoint','filterArea','visibilityState','\x5cC[4](Passive)','ArRedRate','isBorderStylePortraitShown','LastSelected','Game_Map_encounterList','ActionSkillMsg2','isMeleeMultiTargetAction','ActSeq_Target_NextTarget','processVictory','ActSeq_Mechanics_DamagePopup','AnchorY','ActSeq_Movement_WaitForMovement','WeaponTypeID','_handlers','update','_forcedHomeY','ActSeq_Grid_AnimationJsAtNode','_shakeFlinchDuration','Width','addedStateObjects','alphabetic','_states','Game_Action_makeTargets','autoSelectPriority','drawActorGraphic','attackAnimationIdSlot','9247887LsDuXP','PreEndBattleJS','Sprite_Battler_startMove','isGuard','head','_frame','command301','setEventCallback','ActSeq_Mechanics_BreakShieldChange','UNTITLED','ActSeq_Mechanics_EmulateItemEffect','displayActionResults','negativeLifeSteal','partyCommandWindowRectXPStyle','clearOnceParallelInterpreters','_homeY','_endingBattle','isAnyoneFloating','createActorCommandWindowBattleCore','_showWeapon','isTpbCharged','actorCommandEscape','turn','itemPadding','Window_BattleLog_displayMiss','becomeSTBExploited','adjustPosition_ScaleUp','setVisibleUI','setBattleCameraPoint','ConvertParams','StepDuration','VarianceFormulaJS','StatusWindowAttachmentBackOffsetY','VoiceLine','\x5cI[%1]\x5cHEXCOLOR<%3>%2','moveToStartPositionBattleCore','updateAttachedSprites','SlotID','target','ActSeq_Movement_HomeMoveToJsPoint','EFFECT_COMMON_EVENT','loadFaceImages','damageOffsetX','turnsFmt','removeChild','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','compareBattlerSprites','Slot','getCommonEventIdWithName','setBackgroundType','drawItemStyleIconText','CommonEventID','ShowActorGauge','_damagePopupArray','mmp','displayAddedStates','skills','CommandVisible','displayMiss','iconText','_homeDuration','Scene_Battle_itemWindowRect','passiveText','Game_Action_isForAll','addItemCommand','applyImmortal','2445667jGkkjc','getHalfActionsPTB','jsCritRateAsUser','addImmortal','battleSkew','setBattler','Scene_Battle_onEnemyOk','isSkill','isStatusAffected','CriticalHitFlat','loadSystem','enemyId','isActionSelectionValid','ActSeq_Element_NullElements','_opacityWholeDuration','battleBalloon','guardLifeSteal','ConfigManager_applyData','%1Event','members','repositionCancelButtonBorderStyle','Game_Actor_equips','_lastPluginCommandInterpreter','setBattleCameraTargets','Scene_Battle_createPartyCommandWindowIBS','paramName','EmergeText','Sprite_Enemy_initVisibility','ShakeFlinch','_onceParallelInterpreters','Letter','BattleManager_startTurn','ShowFacesListStyle','updateBattlebackBitmap1','currentDisplayedValue','NameOffsetY','_colorType','enemyHpGaugeRate','ActSeq_Mechanics_OnceParallel','WindowWidth','StateID','isFriendly','clearForcedGameTroopSettingsBattleCore','_totalHits','ActSeq_Movement_MoveToTarget','FlashDuration','Angle','Mechanics','frontviewSpriteY','loadBattleback2','_actor','updateSkew','command236','_forcedBattleLayout','canBattlerMove','Armor-%1-%2','_updateColorFilter','FvAniEachTarget','WaitForZoom','Scene_Battle_startEnemySelection','rec','DigitGroupingDamageSprites','onBattleStartOnceParallels','_makeFontNameText','damagePopupOffsetX','GetActionSequenceSpecialTarget','battleback1Name','COMBAT\x20LOG','isNegativeLifeSteal','_animation','_methods','AS\x20TARGET','jsAccuracy','checkShowHideBattleNotetags','isPTB','EscapeFailureJS','startWeaponAnimation','_immortal','processExtendTroopMembers','ActSeq_Grid_TraverseToNode','WaitCount1','maxLines','setBattleZoom','battleAnimation','ActSeq_Set_SetupAction','Window_BattleEnemy_show','%1\x20Aspect','performActionStart','removeCurrentAction','useItem','addPartyCommand','BattleManager_makeActionOrders','createEnemies','hue','VariableID','getSkillIdWithName','statesWindowRect','Scene_Battle_commandFight','battlerName','damageOffsetY','ActSeq_Zoom_WaitForZoom','setTroopPage','NameAttachStateIcon','criticalHitFlat','drawItemActorSprite','lastBattleSkill','createSeparateDamagePopups','RegExp','MotionAni','setupTextPopup','call','ShakeFlinchDuration','clearActiveWeaponSet','glitch','Sprite_Actor_setBattler','overworldBattleback1Name','ActorCmd','GUARD','battleUIOffsetX','_iconIndex','Opacity','helpWindowRectBorderStyle','alive\x20friends\x20not\x20user','actionSplicePoint','setupBattleCoreData','getAspectData','performLifeSteal','createPageButtons','battleVoices','16143KIQBBz','_damages','ActSeq_BattleLog_PushBaseLine','statesMaxWidth','updateStateSpriteBattleCore','isTpbMainPhase','hasBeenDefeatedBefore','DestinationJS','canAttack','setupChild','Window_BattleLog_displayFailure','checkBattleEnd','allBattleMembers','setClickHandler','ActSeq_Impact_MotionBlurScreen','_defeatedEnemies','focus','hitText','waitCount','isSelected','makeEscapeRatio','performMoveToPoint','BattleManager_onEncounter','speed','_preemptive','Window_BattleStatus_initialize','Scene_Battle_start','isAnyoneMoving','Filename','isActor','isSpriteVS8dir','drawItemStyleIcon','checkSceneBattleTransitionable','Exploited','setLetter','Game_Temp_requestBalloon','normalColor','_flinched','itemLifeStealRate','AggroControlSystem','ALL_ENEMIES','drawIcon','cancelTargetSelectionVisibility','createDamageCounterWindow','updateSpin','_allTargets','TpbGaugeOffsetY','OverallFormulaJS','makeTargetsBattleCore','isPreviousSceneBattleTransitionable','ActSeq_BattleLog_UI','addMeleeReturnActionSet','_injectAnimationSprite','ExtraSettings','helpWindowRect','updateHpGaugePosition','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','Window_ActorCommand_initialize','DefeatEvent','clearNameTempVisibility','float','removeHorrorEffect','StatusWindowAttachmentBackOffsetX','_homeEasing','clearFreezeMotion','pageup','PRE-','currentExt','TextAlign','die','CheckVisibleSkillNotetags','onAngleEnd','_shakeFlinchPower','_stateSprite','battleStatusSprite','setBattlerFlip','missed','_skewEasing','graphicType','ANGLE','States','isRightInputMode','ShowMpDmg','Spriteset_Battle_createLowerLayer','ActSeq_Set_TargetActionSet','battleback2Name','waitForAnimation','_motion','applyEasing','buffAdd','FlinchDistanceY','refresh','STRUCT','_battlerKeyCache','AniDuration','numTargets','JS\x20%1APPLY\x20%2','ActSeq_Weapon_SetActiveWeapon','ActSeq_Inject_AnimationEnd','NameAlwaysHidden','CustomFontFace','nameY','HpGauge','fillRect','canGuardBattleCore','_tpbSceneChangeCacheActor','pointX','TpbGaugeOffsetX','gainStoredBoostPoints','ParseActorNotetags','LIGHT-BULB','ActSeq_Mechanics_EmulateAttackEffect','FvAniCenterAll','isTickBased','WaitForProjectile','NewPopupBottom','Game_Battler_performMiss','▲%1','textAlign','_preBattleCommonEvent','stateColor','battleGrow','ActSeq_Grid_TeleportToNode','updateBitmap','updateCancel','SwitchCritical','ActSeq_Animation_BalloonIcon','ActSeq_Animation_CastAnimation','WtypeId','addSingleSkillCommand','BattleStartEvent','loadSvActor','DigitGrouping','updateBattlebackBitmap','trueRandomTarget','endBattle','paintOpacity','Turns','_weaponImageId','getColor','TpGaugeOffsetY','performDamage','drawActorLevel','PostDamageAsUserJS','FlinchDistanceX','setFrame','rowSpacing','maxTp','makeCommandList','uiMenuStyle','makeAutoBattleActions','displayCurrentState','shouldDisperseDamage','Spriteset_Battle_update','jsScaleUp','VisuMZ_3_VisualCutinEffect','setBalloonPose','initMembers','isEffecting','itemEffectRecoverMp','moveBattlerToPoint','freezeTime','waitForMovement','makeStateName','visualCutinPortraitHue','customDamageFormula','StyleON','_battleCoreForcedElements','BattleManager_startInput','commandName','Scene_Battle_initialize','ActSeq_Mechanics_EtbAction','applyAngleChange','Window_BattleLog_performRecovery','MUSIC\x20NOTE','gradientFillRect','VisuMZ_2_WeaponSwapSystem','autoBattleUseSkills','Sprite_Battler_update','addWindow','_targetSkewX','setColorTone','_back2Sprite','stateHelpFmt','ShowReflectWait','getMenuImage','targetBattlerContainerOpacity','fight','PreStartActionJS','turns','Name','showHelpWindow','ActSeq_Mechanics_EmulateGuardEffect','SvBattlerSolo-%1-%2','MP_Rate','updateBattleProcess','_flashDuration','ActSeq_Motion_WaitMotionFrame','Game_Party_addActor','SmoothImage','redraw','alterType','Scene_Battle_createAllWindowsIBS','width','attack','CommandWidth','Shadow2','PartyCmd','arRedFlat','guard','createMultiTargetWindow','hitsDmgFmt','_cursorSprite','AllEnemiesText','makeTurnsText','repositionEnemiesByResolution','battler','MeleeDistance','ActSeq_Mechanics_AddState','gainFullActionsPTB','ATK','createInnerSprite','HITTYPE_CERTAIN','CTB','50SUqWMz','<CUSTOM\x20ACTION\x20SEQUENCE>','drawBuffs','showAnimation','onBattleStart','AdjustRect','_buffs','VisuMZ_3_BattleAI','USER-DEFINED\x202','WaitForAnimation','onSkewEnd','inBattleStatusWindowRect','gainBravePoints','processActorCommandCancelTPB','SwitchMissEvade','spinBattler','JS\x20%1DAMAGE\x20%2','setAttack','magicSkills','changeWeather','VariableHeal','getAttackWeaponAnimationId','Sprite_Battler_updateMain','isMeleeSingleTargetAction','initMembersBattleCore','552cSsJVN','Game_Battler_onBattleStart','clearBattleRefreshRequest','ActSeq_Mechanics_BtbGain','ActSeq_Target_CurrentIndex','message4','Scene_Battle_onActorOk','isQueueOptionsMenu','_back1Sprite','clearFreezeMotionForWeapons','visualCutinPortraitIndex','ResetOffset','command119','NOTE','performShakeFlinch','_windowLayer','declareGlobalVariables','ActSeq_Animation_PlayAtCoordinate','BackColor','requestBattleBalloon','autoBattleAtStart','SvWeaponSolo-%1-%2','Scene_Map_initialize','visualCutinPortraitFilename','startEnemySelection','_nameTempVisibleDuration','isMagical','_endBattle','abs','makeDamageValue','HpGaugeOffsetX','ceil','Enable','actorCommandCancelTPB','onJumpEnd','commandAutoBattle','emulateAction','motionIdle','toLowerCase','CriticalHitRate','displayCounter','lukEffectRate','Game_Interpreter_terminate','_bypassCanCounterCheck','processRandomizedData','%1StartBattleJS','playBattleVoice','addFightCommand','_isBattlerFlipped','drawActorIcons','MP_Flat','PortraitScale','OffsetX','isOverworld','drawItemStatusXPStyle','<CENTER>%1','addBuff','command357','BattleManager_processDefeat','PostStartTurnJS','updateEffectsContainer','message2','updateBossCollapse','_enemyNameContainer','enemyShowParametersIfDefeated','setHelpWindowItem','isDead','setSubject','ScaleToFit','sort','ActSeq_Animation_ShowAnimationJS','redrawForGaugeRate','setupBattleCore','callOptions','setMoveEasingType','jsAccuracyAsTarget','performWeaponAnimation','LUK','attackTimesAdd','drawStates','battleSpriteSkew','GRID\x20MOVE','NameOffsetX','ActSeq_Grid_AddTriggerToNode','AutoMeleeSolo','displayStartMessages','ActSeq_Animation_ActionAnimation','alterCost','PostStartBattleJS','ActSeq_Cutin_EndVisualCutinEffectAll','addState','battleLayoutStyle','TextColor','opacity','SkillItemMiddleLayout','timeScale','Param','addChildToBack','ActSeq_Inject_AnimationPauseResume','setImmortal','addEscapeCommand','Scene_Battle_startActorSelection','DefaultSoftScaler','_phase','PrioritySortActors','isNameTemporarilyVisible','setHue','Elements','note','commandNameWindowDrawBackground','updateScale','_battleBalloonSprites','selectPreviousCommand','CalcActionSpeedJS','BattleManager_onEscapeFailure','_animationContainer','isCTB','battleCoreTpbMainPhase','isMagicSkill','startTpbTurn','BattleManager_checkBattleEnd','nextActor','prev\x20target','preparePartyRefresh','isBTB','_forActor','onMoveEnd','_animationCount','endAnimation','addGeneralOptions','initialize','critical','initVisibility','sliceMin','6McwaFB','BG_TYPE','offsetX','symbol','Post','Scene_Battle_createPartyCommandWindow','parent','isRepeated','_baseY','enemyShowParametersIfBattleTest','useDigitGrouping','updateFlip','ActionStart','Game_BattlerBase_isStateResist','ArPenRate','changePaintOpacity','AutoBattle','forceEscapeSprite','addSkillCommands','TpbActiveChangeEnabled','pow','isNonSubmenuCancel','aliveMembers','isAppeared','special','process_VisuMZ_BattleCore_CommonEventKeys','MpGaugeOffsetX','_homeWholeDuration','_cacheTextWidth','stop','Pre','damagePopupOffsetY','_executeHpDamage','ColorManager_mpColor','basicGaugesY','_reflectionTarget','Scene_ItemBase_applyItem','dimColor1','ActSeq_Target_RandTarget','battleCommandIcon','ActSeq_Impact_Desaturate','ParseArmorNotetags','contentsOpacity','valueColor','AnimationID','Window_Options_statusText','createEffectActionSet','isDebuffAffected','setActionState','Skills','SKILLS','adjustFlippedBattlefield','ExtDisplayedParams','GuardFormulaJS','svAnchorY','action','invokeCounterAttack','displayItemMessage','%1-%2','ApplyImmortal','Scene_Battle_createAllWindows','isCurrentItemEnabled','updateInterpreter','endAction','battlerShadowScaleY','lineHeight','_flipScaleX','waitForEffect','processPostBattleCommonEvents','itemEffectRecoverHp','STR','CalcEscapeRaiseJS','thrust','applyResultSwitches','addNewState','_skewWholeDuration','addStatusCommand','PerformAction','centerFrontViewSprite','ActSeq_Movement_HomeMoveBy','AGI','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','enemyHiddenParameter','ActSeq_BattleVoice_PlaySpecialLine','Text','turnCount','disperseDamage','_backAttachmentSprite','BattleManager_processAbort','GroupDigits','arPenRate','applyGuard','checkAutoCustomActionSequenceNotetagEffect','nextActiveWeaponSlot','isAtbCastingState','_shadowScaleX','anchor','debuffHelpFmt','actor%1-gauge-%2','move','minimumStayDuration','process_VisuMZ_BattleCore_jsFunctions','setActiveWeaponSlot','ActSeq_Horror_GlitchCreate','dying','obj','ShowMissEvasion','RequiresDefeat','parallaxScrollX','_character','_weather','next\x20target','AntiTintUiElements','registerCommand','Scene_Battle_helpWindowRect','_appeared','process_VisuMZ_BattleCore_Action_Notetags','_autoBattleWindow','_skillWindow','ActSeq_Mechanics_AtbGauge','itemTextAlign','BattleManager_checkSubstitute','MUSIC','floatBattler','_battleCoreBattleResumeAfter','ActionEnd','ActSeq_DB_DragonbonesMotionAni','startIcon','ARRAYSTRUCT','isBorderPortraitSpriteVisible','isBypassDamageCap','ActSeq_Zoom_Scale','%1StartTurnJS','StatusWindowSelectableBackHide','ActSeq_Mechanics_ArmorPenetration','ActSeq_Grid_ClearPassiveStatesFromNode','View\x20battle\x20member\x20status.','enemyMpGaugeRate','CmdStyle','random','loadCharacter','isBreakStunned','ActSeq_Angle_Reset','_flashColor','currentValue','HelpEscape','StatusWindowAttachmentBack','updateLastTarget','battleCameraData','ext','startVisualCutin','_bypass_applyBattleCoreHitRateJS','displaySubstitute','isValid','isForFriendBattleCore','BaseTroopIDs','atbInterrupt','clearBattlerMotionTrailData','processBorderActor','setHorrorEffectSettings','parse','JS\x20BATTLE\x20DEFEAT','processRefresh','#%1','addAutoBattleCommands','isMoving','drawItemStatusListStyle','_returnWindow','DualWield','emulateActionEffect','MpGaugeOffsetY','partyCommandWindowRectBorderStyle','isOptionsCommandAdded','ActSeq_Cutin_EndVisualCutinEffectType','AutoBattleRect','ActSeq_Animation_BalloonIconSpecific','startOpacity','status','Scene_Battle_windowAreaHeight','Game_Action_setGuard','displayMpDamage','_tpbNeedsPartyCommand','doesPageHaveOnceParallelStart','_updateClientArea','_spriteset','gainTp','endInBattleStatus','createJS','_pattern','Mute','_statesWindow','Game_Action_executeHpDamage_ComboWindow','BattleEndEvent','getAttackMotionSlot','sideview_ui','_target','gaugeLineHeight','setReturnWindow','Parse_Notetags_HelpDescription','CheckVisibleBattleNotetags','isCancelled','Window_BattleActor_hide','_forcedBattlers','CmdIconItem','Scene_Options','updateBorderSprite','clearBattleBalloons','autoBattleWindowRect','startActorSelection','_baseTexture','createBattleUIOffsetX','jump','HelpSkillType','performTpbActiveCheckSwitch','alive\x20enemies\x20not\x20target','addChildAt','moveBattlerHomeDistance','_tpbState','Mirror','auto','guardSkillId','calcWindowHeight','silentHomeMove','_targetHomeX','isFloating','Scene_Battle_terminate','getDualWieldTimes','hitFlat','Buffs','isCertainHit','makeSpeed','meetsSelectFrontviewActorConditions','swing','includes','textWidth','_motionType','ShowSubstituteWait','getHardDamageCap','value2','addShowHpGaugeCommand','_totalDamage','requestBalloon','drawActorFace','getLastHpDamage','PostStartActionJS','_targets','cancelHpLifeSteal','center','fittingHeight','isDisarmLifeSteal','ANGER','canSingleOrMultipleSelect','normalIcon','makeBuffHelpText','checkSubstitute','abnormal','EscapeFail','weatherType','battleEffect','ActSeq_Movement_BattleStep','jsScaleDown','isActiveTpb','BattleManager_abort','invokeAction','VisuMZ_4_IconBalloons','AutoBattleMsg','notFocusValid','NameAlwaysVisible','actionsFmt','setFullActionsPTB','_branch','requestMotion','all\x20enemies','addedDebuffs','putActiveBattlerOnTop','forceWeaponAnimation','_multipliers','isAnyProjectilePresent','_tempBattler','updateShadowVisibility','isUndecided','Window_BattleLog_performSubstitute','isSceneBattle','HpGaugeOffsetY','performActionMotions','displayedParams','isATB','portraitFlipVert','_freezeMotionData','loadBattleback1','isFlipped','Game_Battler_clearDamagePopup','_waitMode','processTouch','ActSeq_Movement_Skew','inputting','Scene_Boot_onDatabaseLoaded','map','collapse','string','freezeMotion','applyBattleCoreCriticalHitRateJS','windowskin','process_VisuMZ_BattleCore_CreateRegExp','HelpStatus','_cursorArea','currentSymbol','skillWindowRect','ShowCosts','select','resetNameTempVisibility','selectAll','startGrow','terminate','Parse_Notetags_Targets','jsCritRateAsTarget','updateBorderStyle','animation','createActors','removeDamageSprite','_updateCursorFilterArea','resizeWindowBorderStyle','isForRandomBattleCore','COMBATLOG','swapEnemyIDs','_opacityEasing','updatePosition','autoBattleStyle','_skillIDs','enemyShowLevel','helpAreaBottom','createKeyJS','temporaryVisibile','OffsetAdjust','processForcedAction','BattleLogRectJS','Class-%1-%2','ActSeq_Motion_ClearFreezeFrame','getBattlePortrait','PreApplyJS','_lastAction','_homeX','ActSeq_Element_Clear','ShowPortraits','isForOpponent','startMove','prepareBorderActor','BattleManager_endAction','Strength','getBattlePortraitOffsetY','SceneManager_isSceneChanging','min','+%1\x20MP','Sprite_Battler_updatePosition','VisuMZ_0_CoreEngine','callOkHandler','Window_BattleLog_performActionEnd','Sprite_Actor_createStateSprite','updateBattleBalloons','chant','ActSeq_Horror_TVRemove','Game_Action_evalDamageFormula','SvMotionIdleSolo-%1-%2','isBigCharacter','displayCritical','setLastBattleSkill','movement','onEscapeSuccess','ScaleY','parallaxScrollY','_battlerName','position','damagePopupPosition','_growEasing','ActSeq_Movement_MoveBy','fontFace','negativeHpLifeSteal','isBattleCoreTargetScope','ActSeq_Mechanics_EmulateSkillCost','LIGHTBULB','escape','maxBattleMembers','ActSeq_BattleLog_WaitForNewLine','updateTargetPosition','setupBattlebackBattleCore','startShakeFlinch','log','attackMotions','getConfigValue','getItemDamageAmountLabelOriginal','Targets1','guardMpLifeSteal','getBattlerFromKey','flipVisualCutinVert','isSkewing','_customDamageFormula','_tempEquipCheck','pattern','ActSeq_Camera_Reset','isCommandEnabled','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','battleInjectPrep','SkillsStatesCore','ActSeq_Animation_ItemAnimation','DamageDisplay','SkewX','skillId','performReflection','updatePhase','Game_Interpreter_updateWaitMode','ActSeq_Movement_FaceJsPoint','fontSize','Scene_Battle_logWindowRect','createEnemyWindow','Game_Action_isForAliveFriend','playOnceParallelTroopPage','stepForward','_attackAnimationId','boxWidth','isForOne','_colorTone','Game_Action_itemEffectAddAttackState','createEnemyNameContainer','Sprite_Actor_moveToStartPosition','_executedValue','ActionEffect','svShadow','executeHpDamage','clearBattleCoreData','Linear','onHomeMoveEnd','ActSeq_Mechanics_Collapse','VisuMZ_3_StateTooltips','BattleManager_inputtingAction','createCommandNameWindow','drawItemBackground','getBattlerKeyTargetReplacement','removedStateObjects','ActSeq_Mechanics_RemoveBuffDebuff','startInput','reverse','not\x20focus','isImmortal','_actorSprites','setWaitMode','applyGlobal','createHelpWindow','criticalHitRate','damage','resetResultSwitches','base','_autoBattle','_shadowScaleY','changeTurnOrderByCTB','join','VisuMZ_3_FrontviewBattleUI','updateOnceParallelInterpreters','Game_Action_clear','TargetLocation','hasAspectData','ANNOYED','getItemDamageAmountLabelBattleCore','PostEndActionJS','hardDamageCap','MultiTarget','displayTpDamage','ActSeq_Movement_FacePoint','setup','message1','addGuardCommand','OffsetY','Scene_Battle_updateCancelButton','isDrain','paramBuffRate','Game_BattlerBase_meetsUsableItemConditions','attackAnimationId2','restore','$target','alive\x20battlers','clearElementChanges','ActSeq_Movement_WaitForJump','createShadowSprite','VisuMZ_2_BattleSystemFTB','Game_Action_applyGlobal','toUpperCase','XPActorCommandLines','_statusWindow','dataId','startBattle','Sprite_Battler_isMoving','processAbort','ActSeq_Movement_MoveToPoint','WaitForMovement','AnchorX','getBattlePortraitFilename','onBattleEndBattleCore','close','EnemyOffsetX','ParseWeaponNotetags','setHalfActionsPTB','ConvertCount','buffColor','extendTroopMembers','VisuMZ_1_SkillsStatesCore','isForOneBattleCore','process_VisuMZ_BattleCore_PreBattleCommonEvent','DisplayAction','Game_Action_isForFriend','wholeActionSet','createStateIconSprite','ActSeq_Angle_WaitForAngle','Game_System_initialize','Spriteset_Battle_updateActors','startInBattleStatus','maxItems','stopInjectAnimation','isAlive','GetActionSequenceSpecialTargetWithFlags','_angleEasing','noise','gainHalfActionsPTB','_callSceneOptions','friendsUnit','length','IconSet','ShowCurrentState','switchToWeaponType','VisuMZ_2_DragonbonesUnion','totalDmgFmt','_escapeRatio','performAttackSlot','makeActionListAutoAttack','isForAliveFriend','TP_Rate','findTargetSprite','ARRAYJSON','updateAction','_ptbActionCost','addExtendedTroopMembers','BattleSystemCTB','globalAlpha','partyCommandWindowRect','NameLegacy','updateKeyboardKeys','canUseItemCommand','Balloon','_drawTextOutline','Sprite_Enemy_updateCollapse','state','makeActionList','Game_Battler_startTpbTurn','clearGlobalVariables','_distortionSprite','_enemyId','match','Game_Action_executeHpDamage','Scene_Battle_onEnemyCancel','WaitForExit','battleEnd','max','addBattlerAspect','\x5cC[0]','filter','performFlinch','DistanceX','Game_Action_updateLastTarget','Game_Action_numRepeats','isInputting','ActSeq_Target_PrevTarget','counterAttack','Scene_Battle_createHelpWindow','BindCommonEventKeysForObj','isStateAffected','commandNameWindowCenter','commandOptions','pageOffsetX','subject','VisuMZ_2_HorrorEffects','isDuringNonLoopingMotion','setupDamagePopup','Window_BattleLog_performEvasion','isAlwaysHidden','_motionCount','endIcon','open','motionType','updateJump','svActorVertCells','hpAffected','parseForcedGameTroopSettingsBattleCore','updateBattlebackBitmap2','bitmapWidth','updatePageButtonVisibility','Window_BattleLog_update','_floatEasing','isAttack','hidden','statusHelpDesc','dragonbonesData','displayBattleCoreTransitionErrorMsg','EnemyOffsetY','CombatLogIcon','displayAction','applyBattleCoreHitRateJS','missle','_item','ActSeq_Cutin_AddVisualCutinEffect','drawText','effect','indexOf','hpDamage','_currentActor','SHOW_BUTTON','attackSkillId','isBattleRefreshRequested','itemEffectGainTp','applyHardDamageCap','POST-','currentAction','_targetIndex','effects','CreateCommonEventKeys','angle','HitFlat','isBusy','CalcEscapeRatioJS','Game_Battler_onBattleEnd','Scene_Battle_startActorCommandSelection','Game_Battler_performActionStart','PopupOffsetY','autoMeleeSingleTargetActionSet','setActiveWeaponSet','setupBattleCoreAspects','TRAIT_PARAM','active','ShowFailure','numberFontFace','growBattler','skillItemWindowRectBorderStyle','_commonEventKey','startJump','pagedown','_visibleDuration','reduce','Amp','PrioritySortActive','drawBattlerData','ActSeq_Motion_FreezeMotionFrame','drawItemImagePortraitStyle','extraPositionY','_requestRefresh','_hpGaugeSprite','battleZoom','svBattlerAnchorY','updateShadowBattleCore','options','isJumping','performCastAnimation','_enemyID','itemEffectAddAttackState','setTargetBattlerKey','drawItemActorFace','setBattleAngle','isAnyoneSkewing','JS\x20%1END\x20TURN','LifeStealRegExp','portraitIndex','actor','%1Apply%2JS','removeStatesAuto','traitSet','_actions','StepDistanceY','PreStartTurnJS','isForNotUser','DefaultHardCap','SWEAT','isActing','_commonEventIDs','CmdIconEscape','totalHealFmt','applyForcedGameTroopSettingsBattleCore','placeTimeGauge','animationId','checkShowHideSwitchNotetags','return\x200','height','drawDebuffs','changeCtbChargeTime','traitObjects','performRecovery','getNextSubject','startHomeMove','alive\x20enemies','makeStateHelpText','minimumHits','resetTextColor','Direction','refreshRequest','createBattleFieldBattleCore','addStateTurns','isBattlerGrounded','battlerSprites','Game_BattlerBase_canAttack','SILENCE','Skill-%1-%2','Game_Troop_setup','StateOverlayOffsetX','Scene_Map_updateCallMenu','_partyWindow','makeTargets','VisuMZ_2_BattleSystemCTB','checkTpbInputClose','preemptive','inputtingAction','cancelLifeSteal','Game_Action_setSubject','makeActionOrders','setActorHome','ActSeq_Impact_ShockwaveEachTargets','Destination','startTurn','_effectsContainer','StatusGraphic','iconHeight','ChargeRate','MAXHP','debuffNameFmt','isForAnyoneFocusFriends','mainSpriteWidth','adjustPosition_ScaleDown','enabled','Exploiter','NameFontSize','PreDamageJS','PostApplyAsUserJS','makeDeepCopy','requestRefresh','ConvertActionSequenceTarget','mpDamageFmt','ComboWindow_DrawJS','Game_Battler_makeSpeed','dead\x20opponents','applyItem','createActionSequenceProjectile','startAction','getAttackMotion','setupCriticalEffect','ActSeq_Camera_Clamp','Scene_Battle_startPartyCommandSelection','Rate','onRegeneratePlayStateAnimation','_growWholeDuration','BTestBypass','_damageCounterWindow','hitRate','_enemyWindowMode','createAutoBattleWindow','isCancelLifeSteal','svBattlerAnchorX','setBattlePortrait','_growY','makeSuccess','evaded','CriticalDmgRate','CommandAddStatus','performActionEndMembers','_currentAngle','setupMotion','isSkipPartyCommandWindow','ConfigManager_makeData','isForAll','callNextMethod','isOpen','_targetHits','updateStatusWindowPosition','isAnyBattleBalloonPlaying','CreateCutinSettings','_borderPortraitSprite','increaseHits','\x5cHEXCOLOR<%1>','vertCells','Reveal','_baseX','_padding','createChildSprite','_lineHeight','%1▲','isSpinning','actorId','_effectDuration','pause','_waitCount','createAnimationContainer','applyCritical','createTroopNote','canInput','DistanceY','_skewY','_growDuration','_duration','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','alive\x20battlers\x20not\x20target','_battlePortrait','AutoBattleOK','_regionBattleback2','getWtypeIdWithName','performMiss','_inputting','drawSkillCost','updateDuration','_activeWeaponSlot','commandStyle','process_VisuMZ_BattleCore_DamageStyles','Sprite_Enemy_setBattler','visualHpGauge','value','makeTargetSprites','removeOnceParallelInterpreter','WaitForFloat','isArray','textAlignment','isChangingOpacity','alive\x20actors\x20not\x20target','-%1\x20MP','performAction','CriticalColor','drawActorClass','selectNextCommandTpb','ShuffleArray','AttachStateOffsetX','PosOffsetX','Window_BattleLog_pushBaseLine','PopupShiftY','_underAnimationContainer','Window_ItemList_maxCols','addDamageSprite','StatusWindowSkinFilename','VoiceLineType','processEnemyModeTouchBattleCore','skew','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','_battleLayoutStyle','Scene_Battle_update','battleOpacity','onTurnEnd','isForAnyone','value1','targetsForFriends','cutinExit','randomTargets','drawDarkRect','arPenFlat','lifeStealRate','IconStypeMagic','forActor','isFastForward','ActSeq_BattleLog_AddText','createDigits','setupZoomBlurImpactFilter','enemyStatus','iconWidth','waitForNewLine','AddOption','displayBuffs','disarmMpLifeSteal','logWindowRect','updateShadowPosition','stateRate','retreat','left','AllowRandomSpeed','ActSeq_Horror_NoiseRemove','displayReflectionPlayBack','apply','JS\x20%1REGENERATE','_targetAngle','addDebuff','HelpFight','applyTargetFilters','battleCoreResumeLaunchBattle','PostRegenerateJS','actionEffect','opacitySpeed','Window_BattleLog_popupDamage','comboWindowOffsetX','setupFont','frameCount','_battleCoreNoElement','_cache','ActionSequence','battleCommandName','JS\x20%1START\x20BATTLE','\x5cC[%1]','-%1','windowAreaHeight','isConfused','performSubstitute','boxHeight','JS\x20%1START\x20TURN','createActorCommandWindow','Variable','isPlaytest','contentsBack','usePremadeActionSequence','CmdIconOptions','ReflectAnimation','current\x20target','isUnderAnimation','isSpriteVisible','_enemy','priority','getStateDisplay','RevertAngle','ActSeq_Mechanics_HpMpTp','createRateJS','updateMotionCount','CommandAddOptions','ActSeq_Mechanics_StateTurnsChangeBy','startFloat','_weaponSprite','sliceMax','ActSeq_Mechanics_FtbAction','updateStaticSvBattlerFrames','_armorPenetration','ActSeq_Mechanics_PtbAlterCost','start','stepFlinch','_mainSprite','ActSeq_Impact_MotionTrailRemove','canMove','cameraClamp','updateBattleVariables','_createClientArea','ActorOffsetX','createAnimationSprite','Game_Action_needsSelection','ShowSubstitute','_totalValue','Sprite_Enemy_updateBossCollapse','StateIconOffsetY','Enemy','StepDistanceX','clearResult','normalText','evade','_frontAttachmentSprite','VisuMZ_2_BattleSystemETB','addOptionsCommand','BattleCmdList','setHome','battleFloat','battleDisplayText','playCancel','troop','alive\x20opponents\x20not\x20target','ReflectPlayback','revealNewWeaknesses','CriticalHitRateJS','_skewDuration','Window_BattleLog_performDamage','addActor','setStateTooltipBattler','Scene_Battle_commandEscape','VariableDmg','USER-DEFINED\x203','Game_Party_removeActor','clearMotion','resetFontSettings','Game_BattlerBase_allIconsIBS','isChanting','FvAniCenterScreen','_motionSpeed','_battleField','faceHeight','Game_Interpreter_command283','Scene_Battle_selectPreviousCommand','floor','_targetX','\x5cI[%2]\x5cC[16]%1\x5cC[0]','negativeMpLifeSteal','ActionCount','Sprite_Battler_damageOffsetX','Targets','Window_SkillList_maxCols','svActorHorzCells','ActSeq_Mechanics_StbRemoveExcessActions','forceMotion','getBattlerKeyTargets','ActionAnimation','HelpAutoBattle','activate','%1▼','hpDamageFmt','_deathStateApplied','ShowButton','Sprite_Enemy_setHue','parallaxHue','innerHeight','BattleManager_invokeCounterAttack','battlerHue','duration','createHelpWindowBattleCore','JumpToLabel','smoothSelect','clearBattleCoreAspects','_borderPortraitDuration','ActSeq_Movement_WaitForOpacity','VisuMZ_4_BreakShields','adjustPosition','createBattleBalloon','_shadowSprite','isBattleFlipped','createMultiTargetWindows','onStaticEnemyBitmapLoad','Duration','context','XPSpriteYLocation','BattleVictoryJS','ActSeq_Set_FinishAction','_jumpDuration','setEnemyWindowMode','shadow','autoRemovalTiming','buffNameFmt','removeImmortal','Game_Enemy_transform','USER-DEFINED\x205','+%1','clamp','performJump','placeActorName','PostApplyJS','adjustPosition_ScaleToFit','faceWidth','jsAccuracyAsUser','isAlwaysVisible','commandNameWindowDrawText','Sprite_Actor_updateBitmap','processBattleBalloonRequests','battlerShadowScaleX','updateStateSprite','applySoftDamageCap','battleCorePreBattleCommonEvent','Scene_Map_launchBattle','drawEnemyName','ActSeq_Mechanics_DeathBreak','battleSpin','_linkedSprite','Damage','randomInt','stbGainInstant','allowCollapse','_buttonText','processAnimationRequests','_targetSkewY','resizeWindowXPStyle','_list','PostDamageJS','_actorCommandWindow','setItem','create','Scene_Battle_createEnemyWindow','battleAngle','DistanceAdjust','Weapon-%1-%2','EnableDamageCap','BreakShields','createLowerLayer','itemTargetCandidates','_enemyMultiTargetWindow','ActSeq_Grid_RemovePassiveStatesFromNode','itemWindowRect','clearRect','Scene_Battle_stop','Scene_Battle_partyCommandWindowRect','isIncludedInEnemyWindow','MotionIdle','contains','CreateActionSequenceTargets','_forcing','forceSelect','ScaleX','needsSelectionBattleCore','inBattle','setText','StartName','%1Damage%2JS','Sprite_Enemy_createStateIconSprite','VisuMZ_2_PartySystem','allIcons','alive\x20actors\x20not\x20user','\x5cC[16]%1\x5cC[0]','waitForFloat','_enemySprite','ComboWindow','needsActorInputCancel','isForFriend','cameraDuration','ParseEnemyNotetags','ActSeq_Mechanics_BoostPointsStoreData','description','loadSvEnemy','CastMagical','ActionEndUpdate','ActSeq_Animation_GuardAnimation','getDragonbones','-----','JS\x20%1START\x20ACTION','isEscapeCommandEnabled','skillItemWindowRectMiddle','getSpecificBattlerKeyTarget','clearTargetBattlerKey','format','pageButtonPosition','isAutoBattleCommandAdded','scale','BattleSystemSTB','removedBuffs','visualCutinPortraitType','FullActions','EscapeSuccessJS','isSubjectValidForAnyoneSelect','performMagicEvasion','closeBattleActorWindow','hasStaticSvBattler','wait','ShowAddedBuff','contents','ESCAPE','drawItemImageXPStyle','isNextScene','selectNextActor','makeBattleCommand','refreshMotion','comboWindowOffsetY','setupShockwaveImpactFilter','guardHpLifeSteal','customFontFace','revertTpbCachedActor','prepareCustomActionSequence','_visualHpGauge_JustDied','removeBuffsAuto','ENEMY_OFFSET_X','Sprite_Enemy_update','none','_tempActor','displayChangedBuffs','checkShowHideSkillNotetags','maxCommands','user','updateEffectContainers','prepare','isBattlerFlipped','PreDamageAsTargetJS','evalDamageFormula','textColor','MANUAL','ENEMY_OFFSET_Y','bottom','parameters','cancelActorInput','positionOffsetY','addAnimationSpriteToContainer','Debuffs','ActSeq_Animation_BalloonAnimation','encounterList','Actor-%1-%2','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','requestDragonbonesAnimation','playEnemyAttack','damageText','Game_Temp_requestAnimation','drawItem','HelpOptions','custom','AddHpGaugeOption','isItem','commandSymbol','_battleCoreAddedElements','displayRemovedStates','ActorOffsetY','BattleDefeatJS','Window_BattleStatus_drawItemImage','StatusWindowAttachmentFrontOffsetY','Sprite_Enemy_updateStateSprite','resize','Game_Action_isForOne','ARRAYEVAL','isFTB','ANTI_TINT_UI','_buttonKey','parseLocalizedText','_floatWholeDuration','isTimeActive','removeState','testApply','HitRate','ActSeq_Impact_TimeStop','_targetGrowY','ActSeq_Grid_AddPassiveStatesToNode','isCancelTriggered','WaitComplete','addBattleCoreAutoBattleStartupCommand','addBattleCoreAutoBattleStyleCommand','addChildToUiContainer','jsScaleToFit','targetActionSet','forceAction','SceneManager_push','ActSeq_Mechanics_SwapWeapon','isAnimationPlaying','ArPenFlat','_eventId','isDeathStateAffected','_interpreter','PreDamage%1JS','statusWindowRect','emerge','_surprise','performSTBExploiter','_scene','MessageWait','setupIconTextPopup','WaitForEntrance','battlerSmoothImage','version','CmdTextAlign','BULB','executeDamage','STYPES','_regionBattleback1','loadPicture','findIndex','isAnimationShownOnBattlePortrait','ActSeq_Movement_WaitForSpin','onFloatEnd','BattleAI','Window_BattleLog_popBaseLine','getLastPluginCommandInterpreter','addAttackCommand','_forceAction','deactivate','ActSeq_Mechanics_Immortal','isPlaying','_angleRevertOnFinish','isAffectedByBreakShield','showPortraits','compareEnemySprite','updateCustomActionSequence','AutoBattleBgType','_targetBattlerKey','ActSeq_Grid_ActionAnimationAtNode','getNextSubjectFromPool','shouldHideBattleEndPopups','WaitForCamera','show','Sprite_SvEnemy','ShowCounterWait','_commandNameWindow','pushBaseLine','_dragonbonesSpriteContainer','ActSeq_Mechanics_AddBuffDebuff','BattleManager_selectNextCommand','isPartyTpbInputtable','getBattleMembers','updateStateIconSprite','Intensity','shift','ActSeq_Movement_Jump','removeChildFromUiContainer','100%','Spriteset_Battle_createBattleField','noSimilarSTypes','portraitFlipHorz','charging','isPreviousScene','_partyCommandWindow','_createDamageContainer','VisuMZ_1_ElementStatusCore','ATTACK','originalName','SkipPartyCmd','ActSeq_Impact_ZoomBlurTargetCenter','BattleManager_processVictory','isVisualHpGaugeDisplayed','DTB','some','adjustWeaponSpriteOffset','requestMotionRefresh','NUM','ActSeq_Impact_ShockwaveCenterTargets','normal','isForAliveFriendBattleCore','_pagedownButton','Game_Action_executeMpDamage','%1EndBattleJS','autoSelect','createTargetsJS','playSystemSound','_opacityDuration','clear','ITEM','Game_Actor_makeActionList','performActionEnd','Window_BattleLog_displayCurrentState','_baseLineStack','WEAPON\x20SWAP','updateCancelButton','CastCertain','addSkillTypeCommand','ActSeq_Impact_Oversaturate','ActSeq_Skew_Reset','EVAL','createEnemyNames','itemEffectAddNormalState','StartTurnWait','Game_Map_battleback1Name','weaponImageId','windowPadding','ActSeq_Mechanics_StbExploit','performCounter','isAtbChargingState','spell','isBattlerTargeted','createDamageSprite','isForOpponentBattleCore','MUSIC-NOTE','includeState','okButtonText','Scene_Options_maxCommands','changeAtbCastTime','ALL_ACTORS','USER-DEFINED\x201','scope','All\x20Enemies','ActiveTpbOptionsMessage','portrait','BattleGridSystem','_fauxAnimationSprites','Game_Action_testApply','freezeFrame','formula','_selectionEffectCount','tone','_speed','ActSeq_Weapon_ClearActiveWeapon','StatusWindow_BgType','softDamageCap','BindCommonEventKeysForGroup','VisuMZ_3_ActSeqCamera','isAnyoneInjectAniPrepping','Sprite_Damage_createChildSprite','actionBattleCoreJS','popupDamage','Radius','isPartyCommandWindowDisabled','onBattleStartBattleCore','moveBattlerHomeToPoint','SvWeaponMass-%1-%2','onAllActionsEnd','updateCallMenu','process_VisuMZ_BattleCore_TraitObject_Notetags','updateGrow','PreRegenerateJS','ACTOR_OFFSET_Y','_lastHpDamage','isTurnBased','ActSeq_Mechanics_EmulateSkillEffect','code','CurrentTurn','command301_PreBattleEvent','performEvasion','ARRAYNUM','Game_Action_apply','8155040eoUhdX','numRepeats','startPartyCommandSelection','reserveCommonEvent','process_VisuMZ_BattleCore_Failsafes','WIDTH','VisuMZ_3_WeaknessDisplay','pop','Window_BattleLog_performActionStart','_actorMultiTargetWindow','textSizeEx','_updateFilterArea','endVisualCutin','uiInputPosition','Immortal','bitmapHeight','wtypeId','actor%1-portrait','BattleManager_startAction','setValue','flipVisualCutinHorz','isStateResist','opacityStart','makeTargetsBattleCoreJS','174769rVwzYW','isCharging','targetDistortionSpritePosition','lifeStealTrait','_battleBalloonQueue','mhp','createUIContainer','loadOtherActorImages','ActSeq_Motion_PerformAction','stypeId','isHidden','statusText','faceRect','itemCri','ActSeq_Mechanics_OtbOrder','AutoNotetag','processBattleCoreJS','Sprite_Actor_setActorHome','itemRect','ActSeq_BattleLog_WaitForBattleLog','flashColor','opponentsUnit','ActSeq_Mechanics_VariablePopup','enemyShowParametersAlways','WaitCount','VisuMZ_2_BattleGridSystem','buffIconIndex','multiTargetWindowRect','result','ActSeq_Animation_WaitForAnimation','_displayBattleCoreTransitionErrorMsg','damageStyle','replace','updatePadding','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','icon','isSceneChanging','#ffffff','name','setSkill','setBattleSkew','Sprite_Battleback_adjustPosition','svAnchorX','walk','buff','Users','regenerateAllBattleCore','alterChange','BattleManager_endAction_ComboWindow','charged','addChild','alignBattleCoreDamageSprite','_colorFilter','drawItemActorSvBattler','snapForBackground','ActSeq_Mechanics_Multipliers','_jumpWholeDuration','checkExtendTroopCompatibility','StyleName','isNextSceneBattleTransitionable','FUNC','_updateTargetValue','drawActorName','VisuMZ_2_BattleSystemBTB','ActionCenteredName','Scene_Party','find','findSymbolExt','softDamageCapRate','Window_BattleEnemy_hide','processEscape','getInputButtonString','_helpWindow','drawBackgroundRect','QUESTION','BattleManager_initMembers','equips','applyFreezeMotionFrames','autoBattle','CriticalHitMultiplier','ButtonAssist','_battleCoreBattleStartEvent','StatusWindowAttachmentFront','SETTINGS','offsetY','tpbCommandFight','Game_BattlerBase_die','drawSingleSkillCost','SkillID','ActSeq_Inject_AnimationStart','ShowCritical','lastFilename','characterName','FaceAway','removeBuff','increaseTotal','VisuMZ_3_ActSeqImpact','_inBattleStatusWindow','Game_BattlerBase_eraseState','executeMpDamage','ActSeq_BattleLog_PopBaseLine','_cancelButton','Game_Map_battleback2Name','isBattleTest','CmdIconStatus','isTeamBased','createAttachmentSprites','updateHomeMove','displayReflection','isSideView','startMotion','updateMain','Scene_Battle_createCancelButton','sortDamageSprites','startSkew','VisuMZ_3_BattleVoices','ActSeq_BattleVoice_PlayCommonLine','isDying','selectNextCommand','param','isTpb','font','finalizeScale','ResetFocus','isOptionsCommandEnabled','ActSeqProjectiles','Victory','extraPositionX','Override','Game_BattlerBase_initMembers','PreEndActionJS','VisuMZ_2_BattleSystemPTB','updateShadow','currentMaxValue','Scene_Battle_isTimeActiveIBS','pageOffsetY','applyBattleCoreJS','svBattlerName','addText','evalDamageFormulaBattleCore','_performActionEnd','ComboWindow_RectJS','FollowTurn','CmdIconAutoBattle','NameAlwaysSelectOnly','isGrowing','weatherPower','FilenameJS','_angleWholeDuration','FlashColor','BattleManager_setup','getSkillTypes','NextTurn','refreshStatusWindow','playEnemyDamage','LIGHT\x20BULB','jsOneForOne','time','VisuMZ_3_ActiveChainSkills','createPartyCommandWindowBattleCore','ClearBattleLog','ActSeq_Element_ForceElements','DamageFlat','CopyCombatLog','isMVAnimation','isCommonEventReserved','VisuMZ_2_BattleSystemATB','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','ShowHpDmg','_offsetY','PostEndBattleJS','skillTypes','ActSeq_Mechanics_WaitForEffect','exit','EasingType','extraPositionScaledY','setupMotionBlurImpactFilter','undecided','command283','_animationSprites','clearAllVisualCutins','unshift','createCommandVisibleJS','getEnemyIdWithName','ActSeq_Mechanics_ActiveChainInputDisable','_actorWindow','actions','Sprite_Battler_damageOffsetY','lifeSteaItem','Style','onEncounter','refreshBattlerMotions','compatibilityVisible','_enemies','_pageupButton','ActorJS','QoL','AutoMeleeAoE','filters','changeTextColor','abort','Game_Action_setSkill','gainCurrentActionsETB','playOnceParallelInterpreter','ActSeq_Movement_Opacity','drawActorBuffTurns','getBattlePortraitOffsetX','singleSkill','itemHit','DamageStyles','Game_Actor_setup','surprise','skewBattler','_targetOffsetY','Game_Action_itemTargetCandidates','loadBitmap','setBattlerFacePoint','deathStateId','_itemWindow','updateFrame','battleUIOffsetY','Sprite_Actor_update','spriteId','CheckActSeqProjectileVersion','ActSeq_Mechanics_TextPopup','ActSeq_Mechanics_CtbOrder','resetCounter','drawLineText','requestAnimation','initBattleCore','gainMp','isAutoBattle','transform','VisuMZ_3_SideviewBattleUI','_skewX','_canLose','selectAllEnemies','ActSeq_Movement_Float','makeUniqueNames','onEscapeFailure','enemy','PreApplyAsUserJS','finishActorInput','MotionType','Game_Battler_clearMotion','canUse','flashDuration','6673183rkBhAB','ActSeqImpact','applyDamageCaps','Scale','trim','alive\x20enemies\x20not\x20user','visible','createHpGaugeSprite','ActSeq_Inject_WaitForInjectAni','VisuMZ_4_CombatLog','ActSeq_Movement_HomeMoveToPoint','processTurn','Formula','pageButtonX','portraitFilename','MotionFrameWait','Game_Interpreter_command301','addCustomCommands','_statusType','ActSeq_Horror_NoiseCreate','_makeCursorAlpha','Window_BattleLog_performMiss','\x20to\x20%1\x20midbattle.','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','openBattleActorWindow','autoSelectLastSelected','_growX','frameVisible','animationBaseDelay','_uiContainer','addCombatLogCommand','attachSpritesToDistortionSprite','MDF','save','Game_Action_isForOpponent','innerWidth','startAttackWeaponAnimation','round','debuffAdd','Window_Options_addGeneralOptions','displayFailure','mainSpriteHeight','Window_BattleActor_show','_indent','power','Window_BattleLog_displayCritical','_lines','ACTOR_OFFSET_X','StartTurnMsg','victory','equipSlots','_angleDuration','playCursor','disarmLifeSteal','updateShadowScale','Game_BattlerBase_refresh','weaponTypes','isBuffAffected','itemHeight','FaceDirection','moveToStartPosition','isForDeadFriend','ActSeq_Grid_AnimationTypeAtNode','ActSeq_Movement_WaitForScale','CheckVisibleSwitchNotetags','concat','mainSpriteScaleY','portraitHue','drawActorStateTurns','_logWindow','addAutoBattleCommand','clearHorrorEffects','Game_Temp_initialize','applyGlobalCommonEventNotetags','VisuMZ_3_BoostAction','Shadow','placeGauge','type','Parse_Notetags_Action','_effectType','svBattlerData','startInjectAnimation','prototype','process_VisuMZ_BattleCore_Notetags','all\x20actors','ParseStateNotetags','battlerKey','debuffColor','createWeather','hasSvBattler','createInnerPortrait','...','createDamageContainer','ForceDeath','isETB','regenerateAll','pageButtonY','hide','SvBattlerMass-%1-%2','linkSprite','needsInputWindowChange','HITTYPE_PHYSICAL','updateWeather','canAddSkillCommand','repeatTargets','ParseSkillNotetags','actorCommandAutoBattle','PostApply%1JS','targetSpritePosition','Targets2','allowRandomSpeed'];_0x53b8=function(){return _0x296557;};return _0x53b8();}Sprite_HpGauge[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Sprite_Gauge[_0x5a8ff0(0xb6e)]),Sprite_HpGauge[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Sprite_HpGauge,Sprite_HpGauge['prototype']['initialize']=function(){const _0x41b221=_0x5a8ff0;Sprite_Gauge[_0x41b221(0xb6e)]['initialize'][_0x41b221(0x31b)](this);},Sprite_HpGauge[_0x5a8ff0(0xb6e)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x5a8ff0(0x3f7)]=function(){const _0x309bb3=_0x5a8ff0;this[_0x309bb3(0x103)]['clear']();const _0x45fbb7=this[_0x309bb3(0x53e)]();!isNaN(_0x45fbb7)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x2f5e11=_0x5a8ff0;this[_0x2f5e11(0x4aa)](...arguments);}Sprite_EnemyName[_0x5a8ff0(0xb6e)]=Object['create'](Sprite_Name['prototype']),Sprite_EnemyName['prototype'][_0x5a8ff0(0x18c)]=Sprite_EnemyName,Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(){const _0x2ca41a=_0x5a8ff0;Sprite_Name[_0x2ca41a(0xb6e)]['initialize'][_0x2ca41a(0x31b)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3cc)]=function(){const _0x564725=_0x5a8ff0;Sprite_Name[_0x564725(0xb6e)]['initMembers']['call'](this),this['opacity']=0x0,this[_0x564725(0x8c6)]=null,this[_0x564725(0x50e)]['x']=0.5,this[_0x564725(0x50e)]['y']=0x0;},Sprite_EnemyName[_0x5a8ff0(0xb6e)]['createAttachedSprites']=function(){const _0x31f0f6=_0x5a8ff0;VisuMZ['BattleCore'][_0x31f0f6(0xba1)][_0x31f0f6(0x85b)][_0x31f0f6(0x313)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x31f0f6(0xa57)](this[_0x31f0f6(0xbea)]));},Sprite_EnemyName[_0x5a8ff0(0xb6e)]['bitmapWidth']=function(){const _0x277316=_0x5a8ff0;return Graphics[_0x277316(0x650)];},Sprite_EnemyName[_0x5a8ff0(0xb6e)]['bitmapHeight']=function(){const _0x579d1b=_0x5a8ff0;return this[_0x579d1b(0x7c0)]=this[_0x579d1b(0x7c0)]||Window_Base[_0x579d1b(0xb6e)]['lineHeight']()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x649)]=function(){const _0x4f5409=_0x5a8ff0;return VisuMZ[_0x4f5409(0xbb3)][_0x4f5409(0xba1)]['Enemy'][_0x4f5409(0x78b)]||$gameSystem['mainFontSize']();},Sprite_EnemyName['prototype']['linkSprite']=function(_0x5dbc76){const _0xf2c0ad=_0x5a8ff0;this[_0xf2c0ad(0x8c6)]=_0x5dbc76;},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x5afd95=_0x5a8ff0;Sprite_Name[_0x5afd95(0xb6e)][_0x5afd95(0x25f)][_0x5afd95(0x31b)](this),this['updateLink'](),this[_0x5afd95(0x5f4)](),this['updateAttachedSprites'](),this[_0x5afd95(0x22a)]();},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3f7)]=function(){const _0x288ab5=_0x5a8ff0;this['_cacheTextWidth']=undefined;const _0x47face=this[_0x288ab5(0xa4b)](),_0x258e53=this[_0x288ab5(0x6fd)](),_0x375ab1=Window_Base['prototype'][_0x288ab5(0x4ef)]();this[_0x288ab5(0x824)](),this[_0x288ab5(0x103)]['clear'](),this[_0x288ab5(0x103)][_0x288ab5(0x70d)](_0x47face,0x0,0x0,_0x258e53,_0x375ab1,'center');},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xc0d)]=function(){const _0x1c2b90=_0x5a8ff0;if(!this[_0x1c2b90(0x8c6)])return;this[_0x1c2b90(0x1aa)]!==this['_linkedSprite'][_0x1c2b90(0x1aa)]&&this[_0x1c2b90(0x681)](this[_0x1c2b90(0x8c6)][_0x1c2b90(0x1aa)]);},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5f4)]=function(){const _0x1a3c39=_0x5a8ff0;if(!this['_linkedSprite'])return;this['_lineHeight']=this[_0x1a3c39(0x7c0)]||Window_Base['prototype'][_0x1a3c39(0x4ef)](),this['x']=Math[_0x1a3c39(0xb41)](this[_0x1a3c39(0x8c6)][_0x1a3c39(0x7bd)]),this['y']=Math[_0x1a3c39(0xb41)](this[_0x1a3c39(0x8c6)][_0x1a3c39(0x4b6)]-this[_0x1a3c39(0x7c0)]*0.5);const _0x38fea8=VisuMZ['BattleCore']['Settings'][_0x1a3c39(0x85b)];this['x']+=Math['round'](_0x38fea8['NameOffsetX']||0x0),this['y']+=Math[_0x1a3c39(0xb41)](_0x38fea8[_0x1a3c39(0x2d0)]||0x0);},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x28f)]=function(){const _0x4c0dfa=_0x5a8ff0;this[_0x4c0dfa(0x9a0)]();},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9a0)]=function(){const _0x23687a=_0x5a8ff0;if(!this[_0x23687a(0xbea)])return;this[_0x23687a(0x1aa)]!==this[_0x23687a(0xbea)][_0x23687a(0x1aa)]&&this['_stateIconSprite'][_0x23687a(0x681)](this[_0x23687a(0x1aa)]);const _0x300749=this['textWidth']();this[_0x23687a(0x7c0)]=this[_0x23687a(0x7c0)]||Window_Base[_0x23687a(0xb6e)]['lineHeight'](),this[_0x23687a(0xbea)]['x']=Math[_0x23687a(0xb41)]((_0x300749+ImageManager[_0x23687a(0x80b)])/0x2)+0x8,this[_0x23687a(0xbea)]['y']=this[_0x23687a(0x7c0)]/0x2;const _0x5d2b8f=VisuMZ[_0x23687a(0xbb3)][_0x23687a(0xba1)][_0x23687a(0x85b)];this['_stateIconSprite']['x']+=_0x5d2b8f[_0x23687a(0x7ec)]||0x0,this['_stateIconSprite']['y']+=_0x5d2b8f['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x5a8ff0(0xb6e)]['updateOpacity']=function(){const _0x1b6a5f=_0x5a8ff0,_0x2f214b=this[_0x1b6a5f(0x250)]();if(_0x2f214b&&this[_0x1b6a5f(0x485)]<0xff)this['opacity']+=0x10;else!_0x2f214b&&this[_0x1b6a5f(0x485)]>0x0&&(this[_0x1b6a5f(0x485)]-=0x10);},Sprite_EnemyName['prototype'][_0x5a8ff0(0x250)]=function(){const _0x4552cb=_0x5a8ff0;if(this[_0x4552cb(0x6f3)]())return![];else{if(!this[_0x4552cb(0x1aa)])return![];else{if(!this[_0x4552cb(0x1aa)][_0x4552cb(0x4c5)]())return![];else{if(this['temporaryVisibile']())return!![];else{if(this[_0x4552cb(0x1aa)][_0x4552cb(0x46a)]())return![];else{if(this[_0x4552cb(0x9da)]())return!![];else{if(this[_0x4552cb(0xae5)]())return!![];else{if(this[_0x4552cb(0x8ba)]())return!![];else{if(this[_0x4552cb(0x8e2)]())return!![];else{if(this[_0x4552cb(0x485)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5fa)]=function(){const _0x474669=_0x5a8ff0;return this[_0x474669(0x1aa)]&&this[_0x474669(0x1aa)]['isNameTemporarilyVisible']();},Sprite_EnemyName['prototype'][_0x5a8ff0(0x6f3)]=function(){const _0x1d9eec=_0x5a8ff0;return VisuMZ[_0x1d9eec(0xbb3)][_0x1d9eec(0xba1)][_0x1d9eec(0x85b)][_0x1d9eec(0x392)];},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9da)]=function(){const _0x13b048=_0x5a8ff0;if(!VisuMZ[_0x13b048(0xbb3)]['Settings'][_0x13b048(0x85b)]['NameAsTarget'])return![];if(BattleManager[_0x13b048(0x6e5)]()&&!BattleManager[_0x13b048(0x5b3)]())return![];return this[_0x13b048(0x1aa)]&&BattleManager['_subject']&&BattleManager[_0x13b048(0x5a3)][_0x13b048(0x597)](this[_0x13b048(0x1aa)]);},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xae5)]=function(){return![];},Sprite_EnemyName[_0x5a8ff0(0xb6e)]['isAlwaysVisible']=function(){const _0x395529=_0x5a8ff0;return VisuMZ[_0x395529(0xbb3)]['Settings'][_0x395529(0x85b)][_0x395529(0x5b9)];},Sprite_EnemyName[_0x5a8ff0(0xb6e)]['isIncludedInEnemyWindow']=function(){const _0x4b1c99=_0x5a8ff0;return VisuMZ['BattleCore'][_0x4b1c99(0xba1)][_0x4b1c99(0x85b)][_0x4b1c99(0xab5)]?this[_0x4b1c99(0x1aa)][_0x4b1c99(0x341)]():SceneManager[_0x4b1c99(0x973)][_0x4b1c99(0x161)]&&SceneManager['_scene'][_0x4b1c99(0x161)][_0x4b1c99(0x728)]&&SceneManager['_scene'][_0x4b1c99(0x161)][_0x4b1c99(0xae6)][_0x4b1c99(0x597)](this[_0x4b1c99(0x1aa)]);},Sprite_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x598)]=function(){const _0x3faae7=_0x5a8ff0;if(!this[_0x3faae7(0x1aa)])return 0x0;if(this[_0x3faae7(0x4ca)])return this['_cacheTextWidth'];const _0xb499ce=this[_0x3faae7(0xa4b)]();return this['setupFont'](),this[_0x3faae7(0x4ca)]=this[_0x3faae7(0x103)][_0x3faae7(0x20d)](_0xb499ce)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x5a8ff0(0xbb3)]['Sprite_Battleback_adjustPosition']=Sprite_Battleback['prototype']['adjustPosition'],Sprite_Battleback['prototype']['adjustPosition']=function(){const _0x546210=_0x5a8ff0,_0x388d06=VisuMZ[_0x546210(0xbb3)][_0x546210(0xba1)][_0x546210(0xbfc)];if(!_0x388d06)return VisuMZ[_0x546210(0xbb3)]['Sprite_Battleback_adjustPosition'][_0x546210(0x31b)](this);const _0x3b557b=String(_0x388d06['DefaultStyle'])||'MZ';switch(_0x3b557b){case'MZ':VisuMZ[_0x546210(0xbb3)][_0x546210(0xa4e)][_0x546210(0x31b)](this);break;case _0x546210(0x11a):this[_0x546210(0xbac)]();break;case _0x546210(0x46c):this[_0x546210(0x8b7)]();break;case'ScaleDown':this['adjustPosition_ScaleDown']();break;case'ScaleUp':this[_0x546210(0x285)]();break;}},Sprite_Battleback[_0x5a8ff0(0xb6e)]['adjustPosition_1for1']=function(){const _0x2612a7=_0x5a8ff0,_0x3daaa=VisuMZ[_0x2612a7(0xbb3)]['Settings'][_0x2612a7(0xbfc)];if(_0x3daaa&&_0x3daaa[_0x2612a7(0xac1)])return _0x3daaa[_0x2612a7(0xac1)][_0x2612a7(0x31b)](this);this[_0x2612a7(0x3fa)]=Graphics[_0x2612a7(0x3fa)],this[_0x2612a7(0x75c)]=Graphics[_0x2612a7(0x75c)];const _0xfcaeb2=0x1;this[_0x2612a7(0x90a)]['x']=_0xfcaeb2,this[_0x2612a7(0x90a)]['y']=_0xfcaeb2,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x5a8ff0(0xb6e)]['adjustPosition_ScaleToFit']=function(){const _0xc1d73d=_0x5a8ff0,_0x28ccb6=VisuMZ[_0xc1d73d(0xbb3)]['Settings']['BattlebackScale'];if(_0x28ccb6&&_0x28ccb6[_0xc1d73d(0x964)])return _0x28ccb6['jsScaleToFit'][_0xc1d73d(0x31b)](this);this[_0xc1d73d(0x3fa)]=Graphics[_0xc1d73d(0x3fa)],this['height']=Graphics['height'];const _0x198bab=this[_0xc1d73d(0x3fa)]/this['bitmap']['width'],_0xd3731a=this[_0xc1d73d(0x75c)]/this[_0xc1d73d(0x103)][_0xc1d73d(0x75c)],_0x399952=Math[_0xc1d73d(0x6dd)](_0x198bab,_0xd3731a);this['scale']['x']=_0x399952,this[_0xc1d73d(0x90a)]['y']=_0x399952,this['x']=(Graphics[_0xc1d73d(0x3fa)]-this[_0xc1d73d(0x3fa)])/0x2,this['y']=Graphics[_0xc1d73d(0x75c)]-this[_0xc1d73d(0x75c)];},Sprite_Battleback['prototype'][_0x5a8ff0(0x788)]=function(){const _0x3b55f0=_0x5a8ff0,_0x3c2205=VisuMZ[_0x3b55f0(0xbb3)][_0x3b55f0(0xba1)][_0x3b55f0(0xbfc)];if(_0x3c2205&&_0x3c2205[_0x3b55f0(0x5b2)])return _0x3c2205['jsScaleDown'][_0x3b55f0(0x31b)](this);this[_0x3b55f0(0x3fa)]=Graphics[_0x3b55f0(0x3fa)],this[_0x3b55f0(0x75c)]=Graphics[_0x3b55f0(0x75c)];const _0x82488c=Math[_0x3b55f0(0x60d)](0x1,this[_0x3b55f0(0x3fa)]/this['bitmap'][_0x3b55f0(0x3fa)]),_0x44515e=Math[_0x3b55f0(0x60d)](0x1,this['height']/this[_0x3b55f0(0x103)][_0x3b55f0(0x75c)]),_0x422396=Math[_0x3b55f0(0x6dd)](_0x82488c,_0x44515e);this[_0x3b55f0(0x90a)]['x']=_0x422396,this[_0x3b55f0(0x90a)]['y']=_0x422396,this['x']=(Graphics[_0x3b55f0(0x3fa)]-this[_0x3b55f0(0x3fa)])/0x2,this['y']=Graphics[_0x3b55f0(0x75c)]-this[_0x3b55f0(0x75c)];},Sprite_Battleback[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x285)]=function(){const _0x50baea=_0x5a8ff0,_0x1f5801=VisuMZ['BattleCore'][_0x50baea(0xba1)][_0x50baea(0xbfc)];if(_0x1f5801&&_0x1f5801[_0x50baea(0x3c9)])return _0x1f5801[_0x50baea(0x3c9)][_0x50baea(0x31b)](this);this[_0x50baea(0x3fa)]=Graphics[_0x50baea(0x3fa)],this[_0x50baea(0x75c)]=Graphics[_0x50baea(0x75c)];const _0x4c1c62=Math['max'](0x1,this[_0x50baea(0x3fa)]/this['bitmap']['width']),_0x12d187=Math[_0x50baea(0x6dd)](0x1,this[_0x50baea(0x75c)]/this[_0x50baea(0x103)][_0x50baea(0x75c)]),_0x163373=Math[_0x50baea(0x6dd)](_0x4c1c62,_0x12d187);this[_0x50baea(0x90a)]['x']=_0x163373,this[_0x50baea(0x90a)]['y']=_0x163373,this['x']=(Graphics['width']-this[_0x50baea(0x3fa)])/0x2,this['y']=Graphics['height']-this[_0x50baea(0x75c)];},Spriteset_Battle[_0x5a8ff0(0x954)]=VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x22e)][_0x5a8ff0(0x51e)]??!![],Spriteset_Battle['prototype'][_0x5a8ff0(0x5d0)]=function(){const _0x1e4a8c=_0x5a8ff0;if(!$gameSystem[_0x1e4a8c(0xa92)]())return![];return![];},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb38)]=function(){return 0x0;},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x240)]=function(){return 0x0;},VisuMZ['BattleCore'][_0x5a8ff0(0x382)]=Spriteset_Battle[_0x5a8ff0(0xb6e)]['createLowerLayer'],Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8da)]=function(){const _0x15a29a=_0x5a8ff0;VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer'][_0x15a29a(0x31b)](this),this[_0x15a29a(0xb74)](),this[_0x15a29a(0x9d0)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x3c8)]=Spriteset_Battle[_0x5a8ff0(0xb6e)]['update'],Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0xaf08a7=_0x5a8ff0;VisuMZ['BattleCore']['Spriteset_Battle_update'][_0xaf08a7(0x31b)](this),this[_0xaf08a7(0x1b0)](),this['updateUiContainerPosition'](),this[_0xaf08a7(0xb82)](),this[_0xaf08a7(0x614)]();},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb74)]=function(){const _0xc175b2=_0x5a8ff0;this['_weather']=new Weather(),this['_battleField'][_0xc175b2(0xa57)](this[_0xc175b2(0x51c)]);},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb82)]=function(){const _0x392b7d=_0x5a8ff0;this['_weather']['type']=$gameScreen[_0x392b7d(0x5af)](),this['_weather'][_0x392b7d(0xb48)]=$gameScreen[_0x392b7d(0xab7)]();},Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2e1)]=function(_0x217b02){const _0x44f856=_0x5a8ff0;$gameScreen[_0x44f856(0x422)](_0x217b02[0x0],_0x217b02[0x1],_0x217b02[0x2]);if(_0x217b02[0x3])this[_0x44f856(0x914)](_0x217b02[0x2]);return!![];},VisuMZ['BattleCore'][_0x5a8ff0(0x87d)]=Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xad7)],Game_Interpreter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xad7)]=function(_0x37126f){const _0x15cf35=_0x5a8ff0;return VisuMZ['BattleCore'][_0x15cf35(0x87d)]['call'](this,_0x37126f),SceneManager[_0x15cf35(0x5c8)]()&&SceneManager[_0x15cf35(0x973)][_0x15cf35(0x566)][_0x15cf35(0x12b)](_0x37126f[0x0],_0x37126f[0x1]),!![];},Sprite_Battleback['prototype']['battleback1Name']=function(){const _0x70d7df=_0x5a8ff0;if($gameMap[_0x70d7df(0x2ef)]()!==null)return $gameMap['battleback1Name']();else{if(BattleManager['isBattleTest']())return $dataSystem[_0x70d7df(0x2ef)];else return $gameMap[_0x70d7df(0x45d)]()?this[_0x70d7df(0x320)]():'';}},Sprite_Battleback[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x384)]=function(){const _0xd7abf5=_0x5a8ff0;if($gameMap[_0xd7abf5(0x384)]()!==null)return $gameMap[_0xd7abf5(0x384)]();else{if(BattleManager[_0xd7abf5(0xa8c)]())return $dataSystem[_0xd7abf5(0x384)];else return $gameMap['isOverworld']()?this[_0xd7abf5(0xb97)]():'';}},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3b4)]=function(_0x39d660,_0x27b5c5){_0x39d660['bitmap']=_0x27b5c5;},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x12b)]=function(_0x2d10a0,_0x9c233c){const _0x119a06=_0x5a8ff0;_0x2d10a0=_0x2d10a0||'',_0x9c233c=_0x9c233c||'';_0x2d10a0===''&&_0x9c233c===''&&(_0x2d10a0=this[_0x119a06(0x430)][_0x119a06(0x2ef)](),_0x9c233c=this[_0x119a06(0x3e5)]['battleback2Name']());const _0x1aefc9=ImageManager[_0x119a06(0x5cf)](_0x2d10a0),_0x28db24=ImageManager[_0x119a06(0x2de)](_0x9c233c);_0x1aefc9[_0x119a06(0xbcb)](this[_0x119a06(0x2ce)]['bind'](this,this[_0x119a06(0x430)],this[_0x119a06(0x3e5)],_0x1aefc9,_0x28db24));},Spriteset_Battle['prototype'][_0x5a8ff0(0x2ce)]=function(_0xab4414,_0x2bb141,_0x116f84,_0x4cb730){const _0x41cc77=_0x5a8ff0;_0x4cb730[_0x41cc77(0xbcb)](this[_0x41cc77(0x6fc)][_0x41cc77(0x164)](this,_0xab4414,_0x2bb141,_0x116f84,_0x4cb730));},Spriteset_Battle['prototype'][_0x5a8ff0(0x6fc)]=function(_0x2e495c,_0x1db585,_0x28c40f,_0x9f1f28){const _0x2bde0e=_0x5a8ff0;_0x2e495c[_0x2bde0e(0x103)]=_0x28c40f,_0x1db585[_0x2bde0e(0x103)]=_0x9f1f28,_0x2e495c[_0x2bde0e(0x89f)](),_0x1db585['adjustPosition']();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x9a6)]=Spriteset_Battle[_0x5a8ff0(0xb6e)]['createBattleField'],Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xba3)]=function(){const _0xd447f9=_0x5a8ff0;VisuMZ[_0xd447f9(0xbb3)]['Spriteset_Battle_createBattleField'][_0xd447f9(0x31b)](this),this[_0xd447f9(0x769)]();},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x769)]=function(){const _0x47f0e7=_0x5a8ff0;this[_0x47f0e7(0x100)](),this[_0x47f0e7(0xa2b)](),this[_0x47f0e7(0x7c7)](),this[_0x47f0e7(0xb78)](),this[_0x47f0e7(0x4e1)]();},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x100)]=function(){const _0x203660=_0x5a8ff0;this[_0x203660(0x7f0)]=new Sprite(),this[_0x203660(0x87b)][_0x203660(0xa57)](this[_0x203660(0x7f0)]),this[_0x203660(0x1f5)]=new Sprite(),this[_0x203660(0x87b)][_0x203660(0xa57)](this[_0x203660(0x1f5)]);},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7c7)]=function(){const _0x538107=_0x5a8ff0;this['_animationContainer']=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x538107(0xa57)](this[_0x538107(0x49b)]):this['_battleField'][_0x538107(0xa57)](this[_0x538107(0x49b)]);},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb78)]=function(){const _0x3e1fde=_0x5a8ff0;this[_0x3e1fde(0x1f4)]=new Sprite(),this[_0x3e1fde(0x1f4)]['x']=this[_0x3e1fde(0x87b)]['x'],this[_0x3e1fde(0x1f4)]['y']=this[_0x3e1fde(0x87b)]['y'],this['addChild'](this['_damageContainer']);},Spriteset_Battle[_0x5a8ff0(0xb6e)]['adjustFlippedBattlefield']=function(){const _0x32ac5d=_0x5a8ff0;if(!this['isFlipped']())return;this[_0x32ac5d(0x1f5)]['scale']['x']=-0x1,this[_0x32ac5d(0x1f5)]['x']=this[_0x32ac5d(0x87b)][_0x32ac5d(0x3fa)],this['_uiContainer'][_0x32ac5d(0x90a)]['x']=-0x1,this[_0x32ac5d(0xb39)]['x']=this['_battleField'][_0x32ac5d(0x3fa)],this[_0x32ac5d(0x49b)][_0x32ac5d(0x90a)]['x']=-0x1,this[_0x32ac5d(0x49b)]['x']=this['_battleField'][_0x32ac5d(0x3fa)],this[_0x32ac5d(0x1f4)][_0x32ac5d(0x90a)]['x']=-0x1,this[_0x32ac5d(0x1f4)]['x']=this[_0x32ac5d(0x87b)]['x']+this[_0x32ac5d(0x87b)]['width'];},Spriteset_Battle['prototype'][_0x5a8ff0(0x309)]=function(){const _0x786270=_0x5a8ff0;Imported[_0x786270(0x610)]&&this['coreEngineRepositionEnemies']()&&this[_0x786270(0x406)]();const _0x265dba=$gameTroop['members'](),_0x1548f6=[];for(const _0x2af43a of _0x265dba){_0x1548f6[_0x786270(0x23b)](new Sprite_Enemy(_0x2af43a));}_0x1548f6[_0x786270(0x46d)](this[_0x786270(0x98e)][_0x786270(0x164)](this));for(const _0x15756f of _0x1548f6){this[_0x786270(0x1f5)][_0x786270(0xa57)](_0x15756f);}this['_enemySprites']=_0x1548f6;},Spriteset_Battle['prototype'][_0x5a8ff0(0x5ec)]=function(){const _0x5894f1=_0x5a8ff0;this[_0x5894f1(0x669)]=[];for(let _0x4900ea=0x0;_0x4900ea<$gameParty[_0x5894f1(0x62b)]();_0x4900ea++){const _0x1e77a4=$gameParty[_0x5894f1(0x211)]()[_0x4900ea],_0x11df0b=new Sprite_Actor();_0x11df0b[_0x5894f1(0x28e)](_0x1e77a4),_0x11df0b[_0x5894f1(0x2b2)](_0x1e77a4),_0x11df0b[_0x5894f1(0x25f)](),this['_actorSprites'][_0x5894f1(0x23b)](_0x11df0b),this['_battlerContainer'][_0x5894f1(0xa57)](_0x11df0b);}},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x855)]=function(_0x562f9c,_0x496d69,_0x25f352,_0x557910){const _0x5b4f2c=_0x5a8ff0,_0x1e37ad=this[_0x5b4f2c(0xac9)](_0x496d69),_0x54eecb=new(_0x1e37ad?Sprite_AnimationMV:Sprite_Animation)(),_0x133456=this[_0x5b4f2c(0x7df)](_0x562f9c);this[_0x5b4f2c(0xb9a)](_0x562f9c[0x0])&&(_0x25f352=!_0x25f352),_0x54eecb[_0x5b4f2c(0x13e)]=_0x562f9c,_0x54eecb[_0x5b4f2c(0x681)](_0x133456,_0x496d69,_0x25f352,_0x557910),this[_0x5b4f2c(0x939)](_0x54eecb);},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x939)]=function(_0x5051b4){const _0x4f829d=_0x5a8ff0;this[_0x4f829d(0x980)](_0x5051b4)?(this[_0x4f829d(0x1fd)]()['addChild'](_0x5051b4),_0x5051b4[_0x4f829d(0x379)]=!![]):(Spriteset_Battle[_0x4f829d(0x954)]&&(this[_0x4f829d(0x49b)]['x']=this['_effectsContainer']['x'],this[_0x4f829d(0x49b)]['y']=this[_0x4f829d(0x780)]['y']),this[_0x4f829d(0x7f0)]&&_0x5051b4[_0x4f829d(0x83a)]&&_0x5051b4[_0x4f829d(0x83a)]()?(this['_underAnimationContainer'][_0x4f829d(0xa57)](_0x5051b4),this[_0x4f829d(0x7f0)]['x']=this[_0x4f829d(0x49b)]['x'],this['_underAnimationContainer']['y']=this[_0x4f829d(0x49b)]['y']):this['_animationContainer'][_0x4f829d(0xa57)](_0x5051b4)),this[_0x4f829d(0xad8)][_0x4f829d(0x23b)](_0x5051b4);},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x980)]=function(_0x323169){const _0x1ae3ee=_0x5a8ff0;if(!_0x323169)return![];if(!_0x323169[_0x1ae3ee(0x2f2)])return![];if(!_0x323169[_0x1ae3ee(0x13e)][0x0])return![];if(_0x323169['targetObjects'][0x0][_0x1ae3ee(0x34b)]&&!_0x323169[_0x1ae3ee(0x13e)][0x0][_0x1ae3ee(0x34b)]())return![];if($gameSystem[_0x1ae3ee(0xa92)]())return![];if(!this[_0x1ae3ee(0x1fd)]())return![];if(_0x323169[_0x1ae3ee(0x18c)]===Sprite_Animation){const _0x50745d=VisuMZ['BattleCore']['Settings'][_0x1ae3ee(0x1ba)];_0x50745d[_0x1ae3ee(0x2e6)]=_0x50745d[_0x1ae3ee(0x2e6)]??!![];if(_0x323169[_0x1ae3ee(0x2f2)][_0x1ae3ee(0x239)]===0x0&&!_0x50745d[_0x1ae3ee(0x2e6)])return![];_0x50745d[_0x1ae3ee(0x39f)]=_0x50745d[_0x1ae3ee(0x39f)]??!![];if(_0x323169[_0x1ae3ee(0x2f2)]['displayType']===0x1&&!_0x50745d[_0x1ae3ee(0x39f)])return![];_0x50745d[_0x1ae3ee(0x879)]=_0x50745d['FvAniCenterScreen']??![];if(_0x323169[_0x1ae3ee(0x2f2)][_0x1ae3ee(0x239)]===0x2&&!_0x50745d[_0x1ae3ee(0x879)])return![];}else{if(_0x323169['constructor']===Sprite_AnimationMV){if(_0x323169['_animation'][_0x1ae3ee(0x621)]===0x3)return![];}}return!![];const _0x1fd2c7=Window_BattleStatus[_0x1ae3ee(0xb6e)]['battleLayoutStyle']();return['xp',_0x1ae3ee(0x9e7)][_0x1ae3ee(0x8e4)](_0x1fd2c7);},Spriteset_Battle['prototype'][_0x5a8ff0(0x1fd)]=function(){const _0x3c162e=_0x5a8ff0;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x3c162e(0x973)][_0x3c162e(0x694)])return null;if(!SceneManager[_0x3c162e(0x973)][_0x3c162e(0x694)][_0x3c162e(0x780)])return null;return SceneManager['_scene'][_0x3c162e(0x694)][_0x3c162e(0x780)];},Spriteset_Battle[_0x5a8ff0(0xb6e)]['removeAnimation']=function(_0x5d33a0){const _0x52aea6=_0x5a8ff0;this[_0x52aea6(0x1f2)](_0x5d33a0);for(const _0xb750e4 of _0x5d33a0[_0x52aea6(0x13e)]){_0xb750e4[_0x52aea6(0x4a8)]&&_0xb750e4[_0x52aea6(0x4a8)]();}_0x5d33a0['destroy']();},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1f2)]=function(_0xf86e1e){const _0x15dd33=_0x5a8ff0;this[_0x15dd33(0x980)](_0xf86e1e)?this[_0x15dd33(0x1fd)]()['removeChild'](_0xf86e1e):this['_animationContainer'][_0x15dd33(0x297)](_0xf86e1e);this[_0x15dd33(0x7f0)]&&this[_0x15dd33(0x7f0)][_0x15dd33(0x297)](_0xf86e1e);this[_0x15dd33(0x780)][_0x15dd33(0x297)](_0xf86e1e),this['_animationContainer'][_0x15dd33(0x297)](_0xf86e1e),this[_0x15dd33(0xad8)]['remove'](_0xf86e1e);if(this[_0x15dd33(0x9e9)])this[_0x15dd33(0x9e9)][_0x15dd33(0xc1d)](_0xf86e1e);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6ae)]=Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x106)],Spriteset_Battle['prototype'][_0x5a8ff0(0x106)]=function(){const _0x388de1=_0x5a8ff0;VisuMZ[_0x388de1(0xbb3)][_0x388de1(0x6ae)][_0x388de1(0x31b)](this),this[_0x388de1(0x1b0)]();},Spriteset_Battle[_0x5a8ff0(0xb6e)]['updateBattlerContainer']=function(){const _0x205bc7=_0x5a8ff0;this[_0x205bc7(0x1f5)][_0x205bc7(0xf8)][_0x205bc7(0x46d)](this[_0x205bc7(0x299)]['bind'](this)),this[_0x205bc7(0x5c0)]();if(!this[_0x205bc7(0x1f5)])return;this[_0x205bc7(0x1f5)]['opacity']=this['targetBattlerContainerOpacity']();},Spriteset_Battle['prototype'][_0x5a8ff0(0x299)]=function(_0x305cef,_0x553f01){const _0x2e13ce=_0x5a8ff0;if(VisuMZ[_0x2e13ce(0xbb3)][_0x2e13ce(0xba1)][_0x2e13ce(0x1ba)][_0x2e13ce(0x490)]){if(_0x305cef[_0x2e13ce(0x1aa)]&&_0x553f01[_0x2e13ce(0x1aa)]){if(_0x305cef[_0x2e13ce(0x1aa)][_0x2e13ce(0x34b)]()&&_0x553f01[_0x2e13ce(0x1aa)][_0x2e13ce(0x172)]())return 0x1;else{if(_0x553f01['_battler'][_0x2e13ce(0x34b)]()&&_0x305cef[_0x2e13ce(0x1aa)]['isEnemy']())return-0x1;}}}return _0x305cef['_baseY']!==_0x553f01[_0x2e13ce(0x4b6)]?_0x305cef[_0x2e13ce(0x4b6)]-_0x553f01[_0x2e13ce(0x4b6)]:_0x553f01[_0x2e13ce(0xb03)]-_0x305cef['spriteId'];},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5c0)]=function(){const _0xfb4329=_0x5a8ff0;if(!VisuMZ['BattleCore']['Settings'][_0xfb4329(0x1ba)][_0xfb4329(0x733)])return;const _0x5cd4ac=BattleManager['_subject'];if(_0x5cd4ac){if(_0x5cd4ac[_0xfb4329(0x34b)]()&&!$gameSystem['isSideView']())return;if(_0x5cd4ac===BattleManager[_0xfb4329(0x749)]())return;const _0x46344b=_0x5cd4ac[_0xfb4329(0x407)]();if(_0x46344b&&_0x5cd4ac[_0xfb4329(0x34b)]())this[_0xfb4329(0x1f5)]['addChild'](_0x46344b);}},Spriteset_Battle['prototype'][_0x5a8ff0(0xa6b)]=function(){const _0x59d77a=_0x5a8ff0;for(const _0x3da259 of $gameParty['aliveMembers']()){if(!_0x3da259)continue;if(!_0x3da259[_0x59d77a(0x407)]())continue;_0x3da259[_0x59d77a(0x407)]()[_0x59d77a(0x4bf)]=!![],_0x3da259['battler']()[_0x59d77a(0x813)]();}},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa2b)]=function(){const _0x539c28=_0x5a8ff0;this[_0x539c28(0xb39)]=new Sprite(),Spriteset_Battle[_0x539c28(0x954)]?this[_0x539c28(0xa57)](this[_0x539c28(0xb39)]):this[_0x539c28(0x87b)][_0x539c28(0xa57)](this[_0x539c28(0xb39)]),SceneManager['_scene']['_uiContainer']=this[_0x539c28(0xb39)];},Spriteset_Battle['prototype'][_0x5a8ff0(0x9d0)]=function(){const _0x438786=_0x5a8ff0;if(VisuMZ[_0x438786(0xbb3)][_0x438786(0xba1)][_0x438786(0x85b)][_0x438786(0x6cc)])return;this[_0x438786(0x467)]=new Sprite(),BattleManager[_0x438786(0x963)](this[_0x438786(0x467)]);for(const _0x23daad of this['_enemySprites']){const _0x52edf0=new Sprite_EnemyName();this[_0x438786(0x467)][_0x438786(0xa57)](_0x52edf0),_0x52edf0[_0x438786(0xb7f)](_0x23daad);}},Spriteset_Battle['prototype']['updateUiContainerPosition']=function(){const _0x5c7550=_0x5a8ff0;if(!this['_damageContainer'])return;if(!this[_0x5c7550(0xb39)])return;const _0x306ae3=Spriteset_Battle['ANTI_TINT_UI']?this[_0x5c7550(0x1f4)]['x']:0x0,_0x557a0f=Spriteset_Battle['ANTI_TINT_UI']?this[_0x5c7550(0x1f4)]['y']:0x0,_0xd73ee9=Imported['VisuMZ_3_ActSeqCamera']?this[_0x5c7550(0x87b)]['x']:0x0,_0x32fe81=Imported[_0x5c7550(0x9f4)]?this[_0x5c7550(0x87b)]['y']:0x0;this[_0x5c7550(0xb39)]['x']=_0x306ae3+_0xd73ee9,this['_uiContainer']['y']=_0x557a0f+_0x32fe81;},BattleManager[_0x5a8ff0(0x963)]=function(_0x289d3f){const _0x39aaf2=_0x5a8ff0;if(!SceneManager[_0x39aaf2(0x973)][_0x39aaf2(0xb39)])return;SceneManager['_scene'][_0x39aaf2(0xb39)]['addChild'](_0x289d3f);},BattleManager[_0x5a8ff0(0x9a4)]=function(_0x31467c){const _0x15edaf=_0x5a8ff0;if(!SceneManager[_0x15edaf(0x973)][_0x15edaf(0xb39)])return;SceneManager['_scene'][_0x15edaf(0xb39)][_0x15edaf(0x297)](_0x31467c);},Spriteset_Battle['prototype'][_0x5a8ff0(0x3e9)]=function(){return 0xff;},Spriteset_Battle[_0x5a8ff0(0xb6e)]['isBusy']=function(){return![];},Spriteset_Battle['prototype'][_0x5a8ff0(0x27c)]=function(){const _0x18cbed=_0x5a8ff0;return this[_0x18cbed(0x76c)]()[_0x18cbed(0x9b5)](_0x19d6de=>_0x19d6de[_0x18cbed(0x58e)]());},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x14d)]=function(){const _0x3ed379=_0x5a8ff0;return this[_0x3ed379(0x76c)]()['some'](_0x3cb56b=>_0x3cb56b[_0x3ed379(0x73e)]());},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x153)]=function(){const _0x493c64=_0x5a8ff0;return this['battlerSprites']()[_0x493c64(0x9b5)](_0x1df051=>_0x1df051[_0x493c64(0xab6)]());},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x745)]=function(){const _0x39b13f=_0x5a8ff0;return this[_0x39b13f(0x76c)]()[_0x39b13f(0x9b5)](_0x1b363c=>_0x1b363c['isSkewing']());},Spriteset_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x171)]=function(){const _0x55c257=_0x5a8ff0;return this[_0x55c257(0x76c)]()[_0x55c257(0x9b5)](_0x16cdf5=>_0x16cdf5[_0x55c257(0x7c2)]());},Spriteset_Battle['prototype'][_0x5a8ff0(0x21a)]=function(){const _0xfd2c3f=_0x5a8ff0;return this['battlerSprites']()[_0xfd2c3f(0x9b5)](_0x53d21b=>_0x53d21b[_0xfd2c3f(0x7e4)]());},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x7f1)]=Window_ItemList[_0x5a8ff0(0xb6e)]['maxCols'],Window_ItemList[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1e8)]=function(){const _0x135f0c=_0x5a8ff0;return SceneManager[_0x135f0c(0x5c8)]()?SceneManager['_scene'][_0x135f0c(0x483)]()===_0x135f0c(0xbad)?VisuMZ[_0x135f0c(0xbb3)][_0x135f0c(0xba1)][_0x135f0c(0x22e)]['SkillItemBorderCols']:VisuMZ['BattleCore'][_0x135f0c(0xba1)][_0x135f0c(0x22e)][_0x135f0c(0xf5)]:VisuMZ[_0x135f0c(0xbb3)][_0x135f0c(0x7f1)][_0x135f0c(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x886)]=Window_SkillList[_0x5a8ff0(0xb6e)]['maxCols'],Window_SkillList[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1e8)]=function(){const _0x1c98c8=_0x5a8ff0;return SceneManager[_0x1c98c8(0x5c8)]()?SceneManager[_0x1c98c8(0x973)]['battleLayoutStyle']()==='border'?VisuMZ[_0x1c98c8(0xbb3)][_0x1c98c8(0xba1)][_0x1c98c8(0x22e)]['SkillItemBorderCols']:VisuMZ['BattleCore'][_0x1c98c8(0xba1)]['BattleLayout'][_0x1c98c8(0xf5)]:VisuMZ['BattleCore']['Window_SkillList_maxCols'][_0x1c98c8(0x31b)](this);},VisuMZ['BattleCore'][_0x5a8ff0(0xb43)]=Window_Options['prototype'][_0x5a8ff0(0x4a9)],Window_Options['prototype']['addGeneralOptions']=function(){const _0x16ed91=_0x5a8ff0;VisuMZ[_0x16ed91(0xbb3)][_0x16ed91(0xb43)][_0x16ed91(0x31b)](this),this[_0x16ed91(0x552)](),this[_0x16ed91(0x59d)]();},Window_Options[_0x5a8ff0(0xb6e)]['addAutoBattleCommands']=function(){const _0x1c94c9=_0x5a8ff0;VisuMZ[_0x1c94c9(0xbb3)][_0x1c94c9(0xba1)][_0x1c94c9(0x4be)][_0x1c94c9(0x80d)]&&(this[_0x1c94c9(0x961)](),this[_0x1c94c9(0x962)]());},Window_Options[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x59d)]=function(){const _0x1e6eb0=_0x5a8ff0;if(!VisuMZ[_0x1e6eb0(0xbb3)]['Settings'][_0x1e6eb0(0x395)][_0x1e6eb0(0x946)])return;const _0x151c35=TextManager['visualHpGauge'],_0xb6f92=_0x1e6eb0(0x7dd);this[_0x1e6eb0(0x141)](_0x151c35,_0xb6f92);},Window_Options[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x961)]=function(){const _0xb19eff=_0x5a8ff0,_0x5398ad=TextManager['autoBattleStart'],_0x4bfb6d='autoBattleAtStart';this[_0xb19eff(0x141)](_0x5398ad,_0x4bfb6d);},Window_Options['prototype']['addBattleCoreAutoBattleStyleCommand']=function(){const _0x5c14d8=_0x5a8ff0,_0x4f47d1=TextManager[_0x5c14d8(0x5f5)],_0x267320='autoBattleUseSkills';this['addCommand'](_0x4f47d1,_0x267320);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x4db)]=Window_Options['prototype'][_0x5a8ff0(0xa30)],Window_Options[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa30)]=function(_0x461a5c){const _0x3b1800=_0x5a8ff0,_0x12f8a8=this[_0x3b1800(0x948)](_0x461a5c);return _0x12f8a8===_0x3b1800(0x3e0)?this[_0x3b1800(0x24a)]():VisuMZ[_0x3b1800(0xbb3)]['Window_Options_statusText'][_0x3b1800(0x31b)](this,_0x461a5c);},Window_Options[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x24a)]=function(){const _0x215220=_0x5a8ff0,_0x48b581=VisuMZ[_0x215220(0xbb3)][_0x215220(0xba1)][_0x215220(0x4be)],_0xe0c660=this[_0x215220(0x632)](_0x215220(0x3e0));return _0xe0c660?_0x48b581[_0x215220(0x3d5)]:_0x48b581[_0x215220(0x13c)];},Window_ShopStatus['prototype'][_0x5a8ff0(0x67b)]=function(){const _0x402a85=_0x5a8ff0,_0x57d900=DataManager[_0x402a85(0xc20)](this[_0x402a85(0x70b)]),_0x213737=VisuMZ[_0x402a85(0xaf6)][_0x57d900];if(!_0x213737)return this[_0x402a85(0x633)]();const _0x1585f8='DamageType%1'[_0x402a85(0x907)](this['_item'][_0x402a85(0x66e)][_0x402a85(0xb69)]),_0x2ab6e1=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x402a85(0x70b)][_0x402a85(0x66e)]['type']];return _0x213737[_0x1585f8]['format'](_0x2ab6e1);},Window_ShopStatus[_0x5a8ff0(0xb6e)]['getItemDamageAmountTextBattleCore']=function(){const _0x55f7ed=_0x5a8ff0,_0x26c9d3=DataManager[_0x55f7ed(0xc20)](this['_item']),_0x1f1f7a=VisuMZ[_0x55f7ed(0xaf6)][_0x26c9d3];if(!_0x1f1f7a)return this[_0x55f7ed(0xc04)]();return _0x1f1f7a[_0x55f7ed(0x642)][_0x55f7ed(0x31b)](this);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x120)]=Window_PartyCommand[_0x5a8ff0(0xb6e)]['initialize'],Window_PartyCommand['prototype'][_0x5a8ff0(0x4aa)]=function(_0x37d887){const _0x49a791=_0x5a8ff0;VisuMZ[_0x49a791(0xbb3)][_0x49a791(0x120)]['call'](this,_0x37d887),this[_0x49a791(0x660)](_0x37d887);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x660)]=function(_0x4b001d){const _0x30c1f0=_0x5a8ff0,_0x1d4988=new Rectangle(0x0,0x0,_0x4b001d['width'],_0x4b001d['height']);this['_commandNameWindow']=new Window_Base(_0x1d4988),this[_0x30c1f0(0x999)][_0x30c1f0(0x485)]=0x0,this[_0x30c1f0(0xa57)](this[_0x30c1f0(0x999)]),this[_0x30c1f0(0x249)]();},Window_PartyCommand['prototype']['callUpdateHelp']=function(){const _0x361557=_0x5a8ff0;Window_Command[_0x361557(0xb6e)][_0x361557(0x147)][_0x361557(0x31b)](this);if(this['_commandNameWindow'])this[_0x361557(0x249)]();},Window_PartyCommand['prototype']['updateCommandNameWindow']=function(){const _0x418a77=_0x5a8ff0,_0x41e098=this['_commandNameWindow'];_0x41e098['contents']['clear']();const _0x2d152d=this[_0x418a77(0x1f3)](this[_0x418a77(0xc16)]());if(_0x2d152d===_0x418a77(0xa48)&&this[_0x418a77(0x6b0)]()>0x0){const _0x3ea1fe=this[_0x418a77(0x1c2)](this[_0x418a77(0xc16)]());let _0x20c335=this[_0x418a77(0x3d8)](this[_0x418a77(0xc16)]());_0x20c335=_0x20c335[_0x418a77(0xa45)](/\\I\[(\d+)\]/gi,''),_0x41e098[_0x418a77(0x876)](),this[_0x418a77(0x495)](_0x20c335,_0x3ea1fe),this['commandNameWindowDrawText'](_0x20c335,_0x3ea1fe),this['commandNameWindowCenter'](_0x20c335,_0x3ea1fe);}},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x495)]=function(_0x3d7531,_0x2dd685){},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8bb)]=function(_0xf85340,_0x187c70){const _0xbe92f9=_0x5a8ff0,_0x10a2c8=this['_commandNameWindow'];_0x10a2c8['drawText'](_0xf85340,0x0,_0x187c70['y'],_0x10a2c8[_0xbe92f9(0xb3f)],_0xbe92f9(0x5a5));},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6eb)]=function(_0x148bf2,_0x46dfd3){const _0x184050=_0x5a8ff0,_0x1f886b=this[_0x184050(0x999)],_0x171ccc=$gameSystem[_0x184050(0x9d5)](),_0x15d0a4=_0x46dfd3['x']+Math[_0x184050(0x87f)](_0x46dfd3[_0x184050(0x3fa)]/0x2)+_0x171ccc;_0x1f886b['x']=_0x1f886b[_0x184050(0x3fa)]/-0x2+_0x15d0a4,_0x1f886b['y']=Math[_0x184050(0x87f)](_0x46dfd3['height']/0x2);},Window_PartyCommand[_0x5a8ff0(0xb6e)]['makeCommandList']=function(){const _0x1184a9=_0x5a8ff0;this['addFightCommand'](),this[_0x1184a9(0xb62)](),this[_0x1184a9(0xb2d)](),this[_0x1184a9(0x4fa)](),this[_0x1184a9(0x862)](),this[_0x1184a9(0x48c)]();},Window_PartyCommand['prototype'][_0x5a8ff0(0x457)]=function(){const _0x4bbffd=_0x5a8ff0,_0x116a2d=this[_0x4bbffd(0x7da)](),_0x47826c=VisuMZ[_0x4bbffd(0xbb3)]['Settings']['PartyCmd']['CmdIconFight'],_0x1d65bd=_0x116a2d===_0x4bbffd(0x225)?TextManager[_0x4bbffd(0x3ea)]:_0x4bbffd(0xbe7)['format'](_0x47826c,TextManager[_0x4bbffd(0x3ea)]),_0x232c2b=this[_0x4bbffd(0xbfd)]();this[_0x4bbffd(0x141)](_0x1d65bd,_0x4bbffd(0x3ea),_0x232c2b);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbfd)]=function(){return!![];},Window_PartyCommand['prototype'][_0x5a8ff0(0xb62)]=function(){const _0x5b59a8=_0x5a8ff0;if(!this['isAutoBattleCommandAdded']())return;const _0x49fc1b=this['commandStyle'](),_0x10c2f2=VisuMZ[_0x5b59a8(0xbb3)][_0x5b59a8(0xba1)]['PartyCmd'][_0x5b59a8(0xab4)],_0x1b428e=_0x49fc1b===_0x5b59a8(0x225)?TextManager['autoBattle']:_0x5b59a8(0xbe7)[_0x5b59a8(0x907)](_0x10c2f2,TextManager[_0x5b59a8(0xa73)]),_0x55c6a6=this[_0x5b59a8(0x101)]();this[_0x5b59a8(0x141)](_0x1b428e,'autoBattle',_0x55c6a6);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x909)]=function(){const _0x4e3b78=_0x5a8ff0;return VisuMZ[_0x4e3b78(0xbb3)][_0x4e3b78(0xba1)]['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x101)]=function(){return!![];},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb2d)]=function(){},Window_PartyCommand['prototype']['addStatusCommand']=function(){const _0x4d4de1=_0x5a8ff0,_0x5e08c6=VisuMZ[_0x4d4de1(0xbb3)][_0x4d4de1(0xba1)][_0x4d4de1(0x3fe)][_0x4d4de1(0x7ab)]??!![];if(!_0x5e08c6)return;const _0x13f343=this[_0x4d4de1(0x7da)](),_0x43448a=VisuMZ[_0x4d4de1(0xbb3)]['Settings'][_0x4d4de1(0xbc8)][_0x4d4de1(0xa8d)]??0x57,_0x38d634=_0x13f343===_0x4d4de1(0x225)?TextManager['status']:'\x5cI[%1]%2'[_0x4d4de1(0x907)](_0x43448a,TextManager[_0x4d4de1(0x55f)]),_0x197d62=!![];this['addCommand'](_0x38d634,'status',_0x197d62);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x862)]=function(){const _0x2dac66=_0x5a8ff0;if(!this[_0x2dac66(0x55a)]())return;const _0x648aae=this['commandStyle'](),_0x12fa6a=VisuMZ[_0x2dac66(0xbb3)][_0x2dac66(0xba1)]['PartyCmd'][_0x2dac66(0x837)],_0x537fed=_0x648aae===_0x2dac66(0x225)?TextManager[_0x2dac66(0x73d)]:_0x2dac66(0xbe7)[_0x2dac66(0x907)](_0x12fa6a,TextManager['options']),_0x4ce1f8=this[_0x2dac66(0xaa1)]();this[_0x2dac66(0x141)](_0x537fed,'options',_0x4ce1f8);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x55a)]=function(){const _0x5900c0=_0x5a8ff0;return VisuMZ['BattleCore'][_0x5900c0(0xba1)][_0x5900c0(0x3fe)][_0x5900c0(0x843)];},Window_PartyCommand['prototype'][_0x5a8ff0(0xaa1)]=function(){return!![];},Window_PartyCommand['prototype'][_0x5a8ff0(0x48c)]=function(){const _0x46fdab=_0x5a8ff0,_0x357685=this[_0x46fdab(0x7da)](),_0x395371=VisuMZ[_0x46fdab(0xbb3)][_0x46fdab(0xba1)]['PartyCmd'][_0x46fdab(0x755)],_0x1b9eaf=_0x357685==='text'?TextManager[_0x46fdab(0x62a)]:'\x5cI[%1]%2'['format'](_0x395371,TextManager[_0x46fdab(0x62a)]),_0x4eceba=this['isEscapeCommandEnabled']();this[_0x46fdab(0x141)](_0x1b9eaf,_0x46fdab(0x62a),_0x4eceba);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x903)]=function(){const _0x2d3121=_0x5a8ff0;return BattleManager[_0x2d3121(0x1b1)]();},Window_PartyCommand[_0x5a8ff0(0xb6e)]['itemTextAlign']=function(){const _0x3069bd=_0x5a8ff0;return VisuMZ[_0x3069bd(0xbb3)]['Settings']['PartyCmd'][_0x3069bd(0x979)];},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x943)]=function(_0x145e6b){const _0x35dc19=_0x5a8ff0,_0x133a6b=this['commandStyleCheck'](_0x145e6b);if(_0x133a6b==='iconText')this[_0x35dc19(0x29d)](_0x145e6b);else _0x133a6b===_0x35dc19(0xa48)?this[_0x35dc19(0x34d)](_0x145e6b):Window_Command[_0x35dc19(0xb6e)][_0x35dc19(0x943)]['call'](this,_0x145e6b);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7da)]=function(){const _0x72e9e0=_0x5a8ff0;return VisuMZ[_0x72e9e0(0xbb3)][_0x72e9e0(0xba1)][_0x72e9e0(0x3fe)][_0x72e9e0(0x538)];},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1f3)]=function(_0x2b0e71){const _0x27fcb8=_0x5a8ff0;if(_0x2b0e71<0x0)return _0x27fcb8(0x225);const _0x58fc48=this['commandStyle']();if(_0x58fc48!==_0x27fcb8(0x589))return _0x58fc48;else{if(this[_0x27fcb8(0x6b0)]()>0x0){const _0x4a2557=this['commandName'](_0x2b0e71);if(_0x4a2557[_0x27fcb8(0x6d8)](/\\I\[(\d+)\]/i)){const _0x45382b=this[_0x27fcb8(0x1c2)](_0x2b0e71),_0x30eaa1=this['textSizeEx'](_0x4a2557)[_0x27fcb8(0x3fa)];return _0x30eaa1<=_0x45382b['width']?_0x27fcb8(0x2a6):_0x27fcb8(0xa48);}}}return _0x27fcb8(0x225);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x29d)]=function(_0x5c200c){const _0x1f2a6f=_0x5a8ff0,_0x40093d=this['itemLineRect'](_0x5c200c),_0x38f5be=this[_0x1f2a6f(0x3d8)](_0x5c200c),_0x4eea9d=this[_0x1f2a6f(0xa17)](_0x38f5be)[_0x1f2a6f(0x3fa)];this[_0x1f2a6f(0x4bd)](this['isCommandEnabled'](_0x5c200c));const _0x54a43b=this[_0x1f2a6f(0x526)]();if(_0x54a43b===_0x1f2a6f(0x198))this[_0x1f2a6f(0x1a9)](_0x38f5be,_0x40093d['x']+_0x40093d[_0x1f2a6f(0x3fa)]-_0x4eea9d,_0x40093d['y'],_0x4eea9d);else{if(_0x54a43b===_0x1f2a6f(0x5a5)){const _0x5cf39e=_0x40093d['x']+Math[_0x1f2a6f(0x87f)]((_0x40093d['width']-_0x4eea9d)/0x2);this[_0x1f2a6f(0x1a9)](_0x38f5be,_0x5cf39e,_0x40093d['y'],_0x4eea9d);}else this[_0x1f2a6f(0x1a9)](_0x38f5be,_0x40093d['x'],_0x40093d['y'],_0x4eea9d);}},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x34d)]=function(_0x4239e0){const _0x569d23=_0x5a8ff0;this[_0x569d23(0x3d8)](_0x4239e0)[_0x569d23(0x6d8)](/\\I\[(\d+)\]/i);const _0x59184f=Number(RegExp['$1'])||0x0,_0x5db78b=this['itemLineRect'](_0x4239e0),_0x1ba03a=_0x5db78b['x']+Math[_0x569d23(0x87f)]((_0x5db78b['width']-ImageManager['iconWidth'])/0x2),_0xddbfe2=_0x5db78b['y']+(_0x5db78b[_0x569d23(0x75c)]-ImageManager['iconHeight'])/0x2;this['drawIcon'](_0x59184f,_0x1ba03a,_0xddbfe2);},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb7d)]=function(){},Window_PartyCommand['prototype'][_0x5a8ff0(0x88d)]=function(){const _0x5211be=_0x5a8ff0;Window_Command['prototype'][_0x5211be(0x88d)][_0x5211be(0x31b)](this);const _0x38fbfd=this[_0x5211be(0x483)]();_0x38fbfd===_0x5211be(0xbad)&&this[_0x5211be(0x3ee)]();},Window_PartyCommand['prototype'][_0x5a8ff0(0x483)]=function(){const _0x32b220=_0x5a8ff0;if(this[_0x32b220(0x7f8)])return this[_0x32b220(0x7f8)];return this[_0x32b220(0x7f8)]=SceneManager['_scene'][_0x32b220(0x483)](),this[_0x32b220(0x7f8)];},Window_PartyCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbdf)]=function(){const _0x5b7b40=_0x5a8ff0,_0x45d67e=VisuMZ[_0x5b7b40(0xbb3)][_0x5b7b40(0xba1)][_0x5b7b40(0x3fe)],_0x41da61=this[_0x5b7b40(0x5e0)]();switch(_0x41da61){case'fight':this[_0x5b7b40(0xa6d)][_0x5b7b40(0x8eb)](_0x45d67e[_0x5b7b40(0x81c)]);break;case _0x5b7b40(0xa73):this[_0x5b7b40(0xa6d)]['setText'](_0x45d67e['HelpAutoBattle']);break;case _0x5b7b40(0x73d):this[_0x5b7b40(0xa6d)]['setText'](_0x45d67e[_0x5b7b40(0x944)]);break;case _0x5b7b40(0x62a):this[_0x5b7b40(0xa6d)][_0x5b7b40(0x8eb)](_0x45d67e['HelpEscape']);break;case _0x5b7b40(0x55f):this[_0x5b7b40(0xa6d)][_0x5b7b40(0x8eb)](Window_InBattleStatus[_0x5b7b40(0xa78)][_0x5b7b40(0x703)]);break;default:this[_0x5b7b40(0xa6d)]['setText']('');break;}},VisuMZ['BattleCore'][_0x5a8ff0(0x368)]=Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)],Window_ActorCommand['prototype'][_0x5a8ff0(0x4aa)]=function(_0x175d92){const _0x45f5ca=_0x5a8ff0;VisuMZ[_0x45f5ca(0xbb3)][_0x45f5ca(0x368)][_0x45f5ca(0x31b)](this,_0x175d92),this[_0x45f5ca(0x660)](_0x175d92);},Window_ActorCommand['prototype'][_0x5a8ff0(0x660)]=function(_0x5b7125){const _0x1d3346=_0x5a8ff0,_0x41cda3=new Rectangle(0x0,0x0,_0x5b7125[_0x1d3346(0x3fa)],_0x5b7125[_0x1d3346(0x75c)]);this['_commandNameWindow']=new Window_Base(_0x41cda3),this['_commandNameWindow'][_0x1d3346(0x485)]=0x0,this[_0x1d3346(0xa57)](this['_commandNameWindow']),this[_0x1d3346(0x249)]();},Window_ActorCommand[_0x5a8ff0(0xb6e)]['callUpdateHelp']=function(){const _0x2b366f=_0x5a8ff0;Window_Command[_0x2b366f(0xb6e)]['callUpdateHelp'][_0x2b366f(0x31b)](this);if(this['_commandNameWindow'])this[_0x2b366f(0x249)]();},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x249)]=function(){const _0x302183=_0x5a8ff0,_0x46c8ed=this[_0x302183(0x999)];_0x46c8ed[_0x302183(0x916)]['clear']();const _0x59bb42=this[_0x302183(0x1f3)](this[_0x302183(0xc16)]());if(_0x59bb42===_0x302183(0xa48)&&this['maxItems']()>0x0){const _0x3365d7=this[_0x302183(0x1c2)](this[_0x302183(0xc16)]());let _0x3ae28e=this[_0x302183(0x3d8)](this[_0x302183(0xc16)]());_0x3ae28e=_0x3ae28e[_0x302183(0xa45)](/\\I\[(\d+)\]/gi,''),_0x46c8ed[_0x302183(0x876)](),this[_0x302183(0x495)](_0x3ae28e,_0x3365d7),this[_0x302183(0x8bb)](_0x3ae28e,_0x3365d7),this[_0x302183(0x6eb)](_0x3ae28e,_0x3365d7);}},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x495)]=function(_0x50bae2,_0x3e8952){},Window_ActorCommand['prototype'][_0x5a8ff0(0x8bb)]=function(_0x476cf1,_0x3cf385){const _0x56ef7e=_0x5a8ff0,_0x2345e4=this['_commandNameWindow'];_0x2345e4[_0x56ef7e(0x70d)](_0x476cf1,0x0,_0x3cf385['y'],_0x2345e4['innerWidth'],_0x56ef7e(0x5a5));},Window_ActorCommand[_0x5a8ff0(0xb6e)]['commandNameWindowCenter']=function(_0x583447,_0x3a04cf){const _0xe31a00=_0x5a8ff0,_0x515cb8=this[_0xe31a00(0x999)],_0x311922=$gameSystem[_0xe31a00(0x9d5)](),_0x5d99be=_0x3a04cf['x']+Math[_0xe31a00(0x87f)](_0x3a04cf[_0xe31a00(0x3fa)]/0x2)+_0x311922;_0x515cb8['x']=_0x515cb8[_0xe31a00(0x3fa)]/-0x2+_0x5d99be,_0x515cb8['y']=Math[_0xe31a00(0x87f)](_0x3a04cf[_0xe31a00(0x75c)]/0x2);},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3c3)]=function(){const _0x1ef684=_0x5a8ff0;if(!this[_0x1ef684(0x2df)])return;const _0x42c9b3=this[_0x1ef684(0x2df)][_0x1ef684(0x1b4)]();for(const _0x3e6e7e of _0x42c9b3){this[_0x1ef684(0x91b)](_0x3e6e7e[_0x1ef684(0x692)]()[_0x1ef684(0xb20)]());}},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x91b)]=function(_0x5bc316){const _0x18c345=_0x5a8ff0;_0x5bc316===_0x18c345(0x9ae)&&this[_0x18c345(0x986)]();[_0x18c345(0x97c),_0x18c345(0x4e0)][_0x18c345(0x597)](_0x5bc316)&&this['addSkillCommands']();_0x5bc316===_0x18c345(0x322)&&this[_0x18c345(0x683)]();_0x5bc316===_0x18c345(0x9c4)&&this[_0x18c345(0x2ab)]();_0x5bc316===_0x18c345(0xbfa)&&this['addStatusCommand']();_0x5bc316===_0x18c345(0x917)&&this[_0x18c345(0x48c)]();_0x5bc316==='AUTO\x20BATTLE'&&this[_0x18c345(0xb62)]();if(_0x5bc316[_0x18c345(0x6d8)](/STYPE: (\d+)/i)){const _0x501a91=Number(RegExp['$1']);this[_0x18c345(0x9cc)](_0x501a91);}else{if(_0x5bc316[_0x18c345(0x6d8)](/STYPE: (.*)/i)){const _0x55f512=DataManager[_0x18c345(0x1b7)](RegExp['$1']);this[_0x18c345(0x9cc)](_0x55f512);}}_0x5bc316==='ALL\x20SKILLS'&&this['addSingleSkillCommands']();if(_0x5bc316['match'](/SKILL: (\d+)/i)){const _0x375749=Number(RegExp['$1']);this[_0x18c345(0x3b0)]($dataSkills[_0x375749]);}else{if(_0x5bc316[_0x18c345(0x6d8)](/SKILL: (.*)/i)){const _0x20cee4=DataManager[_0x18c345(0x30c)](RegExp['$1']);this[_0x18c345(0x3b0)]($dataSkills[_0x20cee4]);}}_0x5bc316==='PARTY'&&Imported[_0x18c345(0x8ef)]&&this[_0x18c345(0x307)](),[_0x18c345(0x5f1),_0x18c345(0x2f0)][_0x18c345(0x597)](_0x5bc316)&&Imported[_0x18c345(0xb25)]&&this[_0x18c345(0xb3a)](),_0x5bc316===_0x18c345(0x9c9)&&Imported[_0x18c345(0x3df)]&&this['addWeaponSwapCommand'](!![]),_0x5bc316===_0x18c345(0x479)&&Imported[_0x18c345(0xa3e)]&&this[_0x18c345(0x123)]();},Window_ActorCommand['prototype'][_0x5a8ff0(0x986)]=function(){const _0x2624a0=_0x5a8ff0,_0x4a444d=$dataSkills[this[_0x2624a0(0x2df)][_0x2624a0(0x713)]()];if(!_0x4a444d)return;if(!this[_0x2624a0(0xb83)](_0x4a444d))return;const _0x3c7256=this[_0x2624a0(0x7da)](),_0x113609=DataManager[_0x2624a0(0x829)](_0x4a444d),_0x3b389b=DataManager['battleCommandIcon'](_0x4a444d),_0x2cf9a4=_0x3c7256===_0x2624a0(0x225)?_0x113609:'\x5cI[%1]%2'[_0x2624a0(0x907)](_0x3b389b,_0x113609);this['addCommand'](_0x2cf9a4,_0x2624a0(0x3fb),this[_0x2624a0(0x2df)][_0x2624a0(0x336)]());},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x683)]=function(){const _0x38baa8=_0x5a8ff0,_0x4cb2ee=$dataSkills[this['_actor']['guardSkillId']()];if(!_0x4cb2ee)return;if(!this['canAddSkillCommand'](_0x4cb2ee))return;const _0x5573b7=this['commandStyle'](),_0x271642=DataManager[_0x38baa8(0x829)](_0x4cb2ee),_0x24fd2f=DataManager[_0x38baa8(0x4d5)](_0x4cb2ee),_0x8ff541=_0x5573b7===_0x38baa8(0x225)?_0x271642:_0x38baa8(0xbe7)[_0x38baa8(0x907)](_0x24fd2f,_0x271642);this[_0x38baa8(0x141)](_0x8ff541,_0x38baa8(0x400),this[_0x38baa8(0x2df)][_0x38baa8(0x114)]());},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2ab)]=function(){const _0x2c04a7=_0x5a8ff0,_0x107f7f=this[_0x2c04a7(0x7da)](),_0x3836e3=VisuMZ[_0x2c04a7(0xbb3)][_0x2c04a7(0xba1)][_0x2c04a7(0x321)][_0x2c04a7(0x579)],_0x10477c=_0x107f7f===_0x2c04a7(0x225)?TextManager[_0x2c04a7(0x12a)]:_0x2c04a7(0xbe7)['format'](_0x3836e3,TextManager[_0x2c04a7(0x12a)]),_0x3adcf0=this['isItemCommandEnabled']();this[_0x2c04a7(0x141)](_0x10477c,'item',_0x3adcf0);},Window_ActorCommand[_0x5a8ff0(0xb6e)]['isItemCommandEnabled']=function(){const _0x35c394=_0x5a8ff0;return this[_0x35c394(0x2df)]&&this['_actor'][_0x35c394(0x6ce)]();},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4c0)]=function(){const _0x15cecd=_0x5a8ff0,_0x3d569f=this[_0x15cecd(0x2df)][_0x15cecd(0xad0)]();for(const _0x8ecbf2 of _0x3d569f){this[_0x15cecd(0x9cc)](_0x8ecbf2);}},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9cc)]=function(_0x2a8121){const _0x4c7688=_0x5a8ff0;let _0x41982f=$dataSystem[_0x4c7688(0xad0)][_0x2a8121];if(!_0x41982f)return;let _0x7e1e3=_0x41982f;const _0x5077ae=this[_0x4c7688(0x7da)]();if(_0x5077ae===_0x4c7688(0x225))_0x7e1e3=_0x7e1e3[_0x4c7688(0xa45)](/\x1I\[(\d+)\]/gi,''),_0x7e1e3=_0x7e1e3[_0x4c7688(0xa45)](/\\I\[(\d+)\]/gi,'');else{if(!_0x41982f[_0x4c7688(0x6d8)](/\\I\[(\d+)\]/i)){const _0x559dc1=Imported[_0x4c7688(0x6a5)]?VisuMZ['SkillsStatesCore'][_0x4c7688(0xba1)][_0x4c7688(0x4df)]:VisuMZ[_0x4c7688(0xbb3)]['Settings']['ActorCmd'],_0x5dbd35=$dataSystem[_0x4c7688(0x421)][_0x4c7688(0x597)](_0x2a8121),_0x1f3bdb=_0x5dbd35?_0x559dc1[_0x4c7688(0x804)]:_0x559dc1[_0x4c7688(0xb91)];_0x7e1e3=_0x4c7688(0xbe7)[_0x4c7688(0x907)](_0x1f3bdb,_0x41982f);}}this['addCommand'](_0x7e1e3,_0x4c7688(0xbfb),!![],_0x2a8121);},Window_ActorCommand['prototype'][_0x5a8ff0(0xc06)]=function(){const _0xdef23e=_0x5a8ff0,_0x1dc10b=this[_0xdef23e(0x2df)]['skillTypes'](),_0x4590c3=this[_0xdef23e(0x2df)]['skills']();for(const _0x22d780 of _0x4590c3){if(!_0x22d780)continue;if(Imported[_0xdef23e(0x6a5)]){if(this[_0xdef23e(0x9a7)](_0x22d780))continue;if(this[_0xdef23e(0xc1e)](_0x22d780))continue;}else{if(!_0x1dc10b[_0xdef23e(0x597)](_0x22d780['stypeId']))continue;}this[_0xdef23e(0x3b0)](_0x22d780);}},Window_ActorCommand['prototype']['noSimilarSTypes']=function(_0x4f6833){const _0x3fd3ec=_0x5a8ff0,_0x3a2c96=this['_actor'][_0x3fd3ec(0xad0)](),_0x4a1dfe=_0x3a2c96[_0x3fd3ec(0x6e0)](_0x41be6b=>DataManager[_0x3fd3ec(0xabc)](_0x4f6833)['includes'](_0x41be6b));return _0x4a1dfe['length']<=0x0;},Window_ActorCommand['prototype'][_0x5a8ff0(0xc1e)]=function(_0x74b5d3){const _0x1bc02b=_0x5a8ff0;if(Imported[_0x1bc02b(0x6a5)]){if(VisuMZ[_0x1bc02b(0x640)][_0x1bc02b(0x978)]>=1.24){if(this[_0x1bc02b(0x2df)]){if(!VisuMZ[_0x1bc02b(0x640)][_0x1bc02b(0x575)](this[_0x1bc02b(0x2df)],_0x74b5d3))return!![];if(!VisuMZ[_0x1bc02b(0x640)][_0x1bc02b(0xb5c)](this['_actor'],_0x74b5d3))return!![];if(!VisuMZ[_0x1bc02b(0x640)][_0x1bc02b(0x375)](this[_0x1bc02b(0x2df)],_0x74b5d3))return!![];}}else{if(!Window_SkillList['prototype'][_0x1bc02b(0x2f6)][_0x1bc02b(0x31b)](this,_0x74b5d3))return!![];if(!Window_SkillList[_0x1bc02b(0xb6e)][_0x1bc02b(0x75a)][_0x1bc02b(0x31b)](this,_0x74b5d3))return!![];if(!Window_SkillList[_0x1bc02b(0xb6e)][_0x1bc02b(0x92a)][_0x1bc02b(0x31b)](this,_0x74b5d3))return!![];}}return![];},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3b0)]=function(_0x3ddc0a){const _0x48d354=_0x5a8ff0;if(!_0x3ddc0a)return;if(!this[_0x48d354(0xb83)](_0x3ddc0a))return;const _0x568642=this['commandStyle'](),_0x19b7b1=DataManager['battleCommandName'](_0x3ddc0a),_0x23649b=DataManager[_0x48d354(0x4d5)](_0x3ddc0a),_0x4067d9=_0x568642==='text'?_0x19b7b1:'\x5cI[%1]%2'[_0x48d354(0x907)](_0x23649b,_0x19b7b1),_0x15e10e=this[_0x48d354(0x2df)][_0x48d354(0xb1a)](_0x3ddc0a);this[_0x48d354(0x141)](_0x4067d9,'singleSkill',_0x15e10e,_0x3ddc0a['id']);},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb83)]=function(_0x6cda0f){const _0x8489fb=_0x5a8ff0,_0x1f8f95=_0x6cda0f[_0x8489fb(0x494)];if(_0x1f8f95[_0x8489fb(0x6d8)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x8489fb(0x204)](_0x6cda0f['id']))return![];}if(_0x1f8f95[_0x8489fb(0x6d8)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x8489fb(0x2df)][_0x8489fb(0x1ca)](_0x6cda0f['id']))return![];}const _0x5ea568=VisuMZ[_0x8489fb(0xbb3)]['createKeyJS'](_0x6cda0f,_0x8489fb(0x2a4));if(VisuMZ[_0x8489fb(0xbb3)]['JS'][_0x5ea568]){if(!VisuMZ[_0x8489fb(0xbb3)]['JS'][_0x5ea568][_0x8489fb(0x31b)](this,this[_0x8489fb(0x2df)],_0x6cda0f))return![];}return VisuMZ[_0x8489fb(0xbb3)]['CheckSkillCommandShowSwitches'](_0x6cda0f);},VisuMZ['BattleCore']['CheckSkillCommandShowSwitches']=function(_0x352ba4){const _0x4ebfd6=_0x5a8ff0,_0x5c17db=_0x352ba4['note'];if(_0x5c17db[_0x4ebfd6(0x6d8)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x292459=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3df66d of _0x292459){if(!$gameSwitches[_0x4ebfd6(0x7de)](_0x3df66d))return![];}return!![];}if(_0x5c17db[_0x4ebfd6(0x6d8)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x9ca6d3=JSON[_0x4ebfd6(0x54e)]('['+RegExp['$1'][_0x4ebfd6(0x6d8)](/\d+/g)+']');for(const _0x59f70c of _0x9ca6d3){if(!$gameSwitches['value'](_0x59f70c))return![];}return!![];}if(_0x5c17db[_0x4ebfd6(0x6d8)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x36c1f9=JSON[_0x4ebfd6(0x54e)]('['+RegExp['$1'][_0x4ebfd6(0x6d8)](/\d+/g)+']');for(const _0x95a0ed of _0x36c1f9){if($gameSwitches[_0x4ebfd6(0x7de)](_0x95a0ed))return!![];}return![];}if(_0x5c17db[_0x4ebfd6(0x6d8)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3773c2=JSON[_0x4ebfd6(0x54e)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x28073f of _0x3773c2){if(!$gameSwitches[_0x4ebfd6(0x7de)](_0x28073f))return!![];}return![];}if(_0x5c17db[_0x4ebfd6(0x6d8)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1b46ee=JSON[_0x4ebfd6(0x54e)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0xd01305 of _0x1b46ee){if(!$gameSwitches[_0x4ebfd6(0x7de)](_0xd01305))return!![];}return![];}if(_0x5c17db[_0x4ebfd6(0x6d8)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x2974b5=JSON[_0x4ebfd6(0x54e)]('['+RegExp['$1'][_0x4ebfd6(0x6d8)](/\d+/g)+']');for(const _0x34ec27 of _0x2974b5){if($gameSwitches[_0x4ebfd6(0x7de)](_0x34ec27))return![];}return!![];}return!![];},Window_ActorCommand[_0x5a8ff0(0xb6e)]['addStatusCommand']=function(){const _0x4fc6f6=_0x5a8ff0,_0x3c0ea9=this[_0x4fc6f6(0x7da)](),_0x3e4d16=VisuMZ[_0x4fc6f6(0xbb3)][_0x4fc6f6(0xba1)][_0x4fc6f6(0xbc8)]['CmdIconStatus']??0x57,_0x1394f5=_0x3c0ea9===_0x4fc6f6(0x225)?TextManager[_0x4fc6f6(0x55f)]:'\x5cI[%1]%2'[_0x4fc6f6(0x907)](_0x3e4d16,TextManager[_0x4fc6f6(0x55f)]),_0x4f0e4e=!![];this[_0x4fc6f6(0x141)](_0x1394f5,_0x4fc6f6(0x55f),_0x4f0e4e);},Window_ActorCommand['prototype'][_0x5a8ff0(0x48c)]=function(){const _0x5ba217=_0x5a8ff0,_0x364b3e=this[_0x5ba217(0x7da)](),_0x15e915=VisuMZ[_0x5ba217(0xbb3)]['Settings'][_0x5ba217(0x3fe)][_0x5ba217(0x755)],_0x47ba69=_0x364b3e===_0x5ba217(0x225)?TextManager[_0x5ba217(0x62a)]:_0x5ba217(0xbe7)[_0x5ba217(0x907)](_0x15e915,TextManager[_0x5ba217(0x62a)]),_0x394f1e=this[_0x5ba217(0x903)]();this[_0x5ba217(0x141)](_0x47ba69,_0x5ba217(0x62a),_0x394f1e);},Window_ActorCommand[_0x5a8ff0(0xb6e)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb62)]=function(){const _0x47333a=_0x5a8ff0,_0xcf2ef6=this[_0x47333a(0x7da)](),_0x3a57d0=VisuMZ[_0x47333a(0xbb3)][_0x47333a(0xba1)][_0x47333a(0x3fe)][_0x47333a(0xab4)],_0x59a026=_0xcf2ef6==='text'?TextManager['autoBattle']:_0x47333a(0xbe7)[_0x47333a(0x907)](_0x3a57d0,TextManager[_0x47333a(0xa73)]),_0x2b3325=this['isAutoBattleCommandEnabled']();this[_0x47333a(0x141)](_0x59a026,_0x47333a(0xa73),_0x2b3325);},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x101)]=function(){return!![];},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x526)]=function(){const _0x270199=_0x5a8ff0;return VisuMZ['BattleCore']['Settings'][_0x270199(0x321)][_0x270199(0x979)];},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x943)]=function(_0x28a739){const _0x2b1860=_0x5a8ff0,_0xd70697=this[_0x2b1860(0x1f3)](_0x28a739);if(_0xd70697==='iconText')this[_0x2b1860(0x29d)](_0x28a739);else _0xd70697===_0x2b1860(0xa48)?this[_0x2b1860(0x34d)](_0x28a739):Window_Command[_0x2b1860(0xb6e)]['drawItem']['call'](this,_0x28a739);this[_0x2b1860(0xa7c)](_0x28a739);},Window_ActorCommand[_0x5a8ff0(0xb6e)]['commandStyle']=function(){const _0x86f196=_0x5a8ff0;return VisuMZ[_0x86f196(0xbb3)][_0x86f196(0xba1)][_0x86f196(0x321)]['CmdStyle'];},Window_ActorCommand['prototype'][_0x5a8ff0(0x1f3)]=function(_0x2f89d5){const _0x105d30=_0x5a8ff0;if(_0x2f89d5<0x0)return _0x105d30(0x225);const _0xfd1666=this['commandStyle']();if(_0xfd1666!==_0x105d30(0x589))return _0xfd1666;else{if(this['maxItems']()>0x0){const _0x3b624=this['commandName'](_0x2f89d5);if(_0x3b624['match'](/\\I\[(\d+)\]/i)){const _0x34f4ff=this[_0x105d30(0x1c2)](_0x2f89d5),_0x22ed34=this[_0x105d30(0xa17)](_0x3b624)[_0x105d30(0x3fa)];return _0x22ed34<=_0x34f4ff['width']?_0x105d30(0x2a6):_0x105d30(0xa48);}}}return _0x105d30(0x225);},Window_ActorCommand[_0x5a8ff0(0xb6e)]['drawItemStyleIconText']=function(_0xcbb06c){const _0xf42e34=_0x5a8ff0,_0x5ae0b0=this[_0xf42e34(0x1c2)](_0xcbb06c),_0x2ba30a=this[_0xf42e34(0x3d8)](_0xcbb06c),_0x1ede2d=this[_0xf42e34(0xa17)](_0x2ba30a)[_0xf42e34(0x3fa)];this[_0xf42e34(0x4bd)](this['isCommandEnabled'](_0xcbb06c));const _0xc40907=this['itemTextAlign']();if(_0xc40907===_0xf42e34(0x198))this[_0xf42e34(0x1a9)](_0x2ba30a,_0x5ae0b0['x']+_0x5ae0b0[_0xf42e34(0x3fa)]-_0x1ede2d,_0x5ae0b0['y'],_0x1ede2d);else{if(_0xc40907===_0xf42e34(0x5a5)){const _0x2fdac8=_0x5ae0b0['x']+Math[_0xf42e34(0x87f)]((_0x5ae0b0['width']-_0x1ede2d)/0x2);this[_0xf42e34(0x1a9)](_0x2ba30a,_0x2fdac8,_0x5ae0b0['y'],_0x1ede2d);}else this['drawTextEx'](_0x2ba30a,_0x5ae0b0['x'],_0x5ae0b0['y'],_0x1ede2d);}},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x34d)]=function(_0x72abec){const _0x4e9b4c=_0x5a8ff0;this[_0x4e9b4c(0x3d8)](_0x72abec)[_0x4e9b4c(0x6d8)](/\\I\[(\d+)\]/i);const _0x2a7539=Number(RegExp['$1'])||0x0,_0x57cdec=this[_0x4e9b4c(0x1c2)](_0x72abec),_0x5eb5a5=_0x57cdec['x']+Math['floor']((_0x57cdec['width']-ImageManager[_0x4e9b4c(0x80b)])/0x2),_0x2113f4=_0x57cdec['y']+(_0x57cdec[_0x4e9b4c(0x75c)]-ImageManager[_0x4e9b4c(0x782)])/0x2;this[_0x4e9b4c(0x357)](_0x2a7539,_0x5eb5a5,_0x2113f4);},Window_ActorCommand['prototype'][_0x5a8ff0(0xa7c)]=function(_0xe4a773){const _0x59fc6b=_0x5a8ff0;if(!(VisuMZ[_0x59fc6b(0xbb3)][_0x59fc6b(0xba1)][_0x59fc6b(0x321)][_0x59fc6b(0x5e2)]??!![]))return;const _0x14bfcb=this[_0x59fc6b(0x948)](_0xe4a773);if(![_0x59fc6b(0x3fb),_0x59fc6b(0x400),_0x59fc6b(0xaf4)][_0x59fc6b(0x597)](_0x14bfcb))return;const _0x1b2875=this['itemLineRect'](_0xe4a773);let _0x509c31=null;if(_0x14bfcb===_0x59fc6b(0x3fb))_0x509c31=$dataSkills[this[_0x59fc6b(0x2df)][_0x59fc6b(0x713)]()];else _0x14bfcb===_0x59fc6b(0x400)?_0x509c31=$dataSkills[this[_0x59fc6b(0x2df)][_0x59fc6b(0x58a)]()]:_0x509c31=$dataSkills[this[_0x59fc6b(0x8cf)][_0xe4a773][_0x59fc6b(0x543)]];this[_0x59fc6b(0x7d7)](this[_0x59fc6b(0x2df)],_0x509c31,_0x1b2875['x'],_0x1b2875['y'],_0x1b2875[_0x59fc6b(0x3fa)]);},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7d7)]=function(_0x302711,_0x5e357a,_0x418f07,_0x30c12b,_0xd4c87a){const _0x5e57c4=_0x5a8ff0;if(!_0x5e357a)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x5e57c4(0xb6e)]['drawSkillCost']['call'](this,_0x302711,_0x5e357a,_0x418f07,_0x30c12b,_0xd4c87a):Window_SkillList[_0x5e57c4(0xb6e)][_0x5e57c4(0x7d7)][_0x5e57c4(0x31b)](this,_0x5e357a,_0x418f07,_0x30c12b,_0xd4c87a);},Window_ActorCommand['prototype'][_0x5a8ff0(0xb7d)]=function(){},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x88d)]=function(){const _0x3894df=_0x5a8ff0;Window_Command[_0x3894df(0xb6e)][_0x3894df(0x88d)][_0x3894df(0x31b)](this);const _0x114c3d=this['battleLayoutStyle']();_0x114c3d===_0x3894df(0xbad)&&this[_0x3894df(0x3ee)]();},Window_ActorCommand['prototype']['battleLayoutStyle']=function(){const _0x5d478f=_0x5a8ff0;if(this[_0x5d478f(0x7f8)])return this[_0x5d478f(0x7f8)];return this['_battleLayoutStyle']=SceneManager[_0x5d478f(0x973)][_0x5d478f(0x483)](),this[_0x5d478f(0x7f8)];},VisuMZ['BattleCore'][_0x5a8ff0(0x1ff)]=Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)],Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x681)]=function(_0xf28384){const _0x366b18=_0x5a8ff0,_0x62a52c=this['battleLayoutStyle']();if(_0xf28384&&['xp',_0x366b18(0x9e7)]['includes'](_0x62a52c))this[_0x366b18(0x8ce)](_0xf28384);else _0xf28384&&['border']['includes'](_0x62a52c)&&(this[_0x366b18(0x5ef)](_0xf28384),this['showHelpWindow']());VisuMZ[_0x366b18(0xbb3)]['Window_ActorCommand_setup'][_0x366b18(0x31b)](this,_0xf28384),_0xf28384&&$gameTroop[_0x366b18(0x4c4)]()['length']>0x0&&_0xf28384[_0x366b18(0x407)]()&&_0xf28384[_0x366b18(0x407)]()['stepForward']();},Window_ActorCommand[_0x5a8ff0(0xb6e)]['resizeWindowXPStyle']=function(_0x2f1008){const _0x48034a=_0x5a8ff0,_0x2502d5=VisuMZ['BattleCore']['Settings'][_0x48034a(0x22e)][_0x48034a(0x3fc)],_0x860136=Math[_0x48034a(0xb41)](Graphics['boxWidth']/0x3),_0xc380e0=Math['round'](Graphics[_0x48034a(0x650)]/$gameParty['battleMembers']()[_0x48034a(0x6b9)]),_0x18e797=Math[_0x48034a(0x6dd)](Math[_0x48034a(0x60d)](_0x860136,_0xc380e0),_0x2502d5),_0x35ac5a=this[_0x48034a(0x5a6)](VisuMZ[_0x48034a(0xbb3)][_0x48034a(0xba1)][_0x48034a(0x22e)][_0x48034a(0x693)]),_0x103244=Math[_0x48034a(0x87f)]((Graphics['boxWidth']-Graphics[_0x48034a(0x3fa)])/0x2),_0x358ae5=Graphics[_0x48034a(0x650)]-_0x103244,_0x336228=(Math[_0x48034a(0xb41)](_0xc380e0*_0x2f1008['index']())+Math[_0x48034a(0xb41)]((_0xc380e0-_0x18e797)/0x2))[_0x48034a(0x8b3)](_0x103244,_0x358ae5-_0x18e797),_0x49a134=Math['round'](SceneManager[_0x48034a(0x973)][_0x48034a(0x694)]['y']-_0x35ac5a);this[_0x48034a(0x511)](_0x336228,_0x49a134,_0x18e797,_0x35ac5a),this[_0x48034a(0x124)](),this[_0x48034a(0x29c)](0x1);},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5ef)]=function(_0x5353bb){const _0x21765f=_0x5a8ff0,_0x12d386=SceneManager[_0x21765f(0x973)][_0x21765f(0x559)]();this[_0x21765f(0x511)](_0x12d386['x'],_0x12d386['y'],_0x12d386[_0x21765f(0x3fa)],_0x12d386['height']),this[_0x21765f(0x124)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1ec)]=function(){const _0x5d403a=_0x5a8ff0;if(this[_0x5d403a(0x173)]){const _0x234da9=this[_0x5d403a(0x173)][_0x5d403a(0x103)],_0x571647=this[_0x5d403a(0x3fa)]-0x8,_0x53d31a=this['height'],_0x4b9afa=this[_0x5d403a(0x1d3)],_0xa8b903=ColorManager[_0x5d403a(0x4d3)](),_0x52d650=ColorManager['dimColor2']();this[_0x5d403a(0x173)]['x']=0x4,_0x234da9[_0x5d403a(0x950)](_0x571647,_0x53d31a),_0x234da9[_0x5d403a(0x3de)](0x0,0x0,_0x571647,_0x4b9afa,_0x52d650,_0xa8b903,!![]),_0x234da9[_0x5d403a(0x396)](0x0,_0x4b9afa,_0x571647,_0x53d31a-_0x4b9afa*0x2,_0xa8b903),_0x234da9[_0x5d403a(0x3de)](0x0,_0x53d31a-_0x4b9afa,_0x571647,_0x4b9afa,_0xa8b903,_0x52d650,!![]),this[_0x5d403a(0x173)][_0x5d403a(0x3c0)](0x0,0x0,_0x571647,_0x53d31a);}},Window_ActorCommand[_0x5a8ff0(0xb6e)]['updateHelp']=function(){const _0x243e52=_0x5a8ff0;if(!this[_0x243e52(0x2df)])return;const _0x34707f=VisuMZ['BattleCore']['Settings'][_0x243e52(0x321)],_0x199531=this['currentSymbol']();switch(_0x199531){case _0x243e52(0x3fb):this[_0x243e52(0x469)]($dataSkills[this[_0x243e52(0x2df)][_0x243e52(0x713)]()]);break;case _0x243e52(0x400):this[_0x243e52(0x469)]($dataSkills[this[_0x243e52(0x2df)][_0x243e52(0x58a)]()]);break;case _0x243e52(0xbfb):const _0x114254=_0x34707f[_0x243e52(0x582)],_0x25df7d=_0x114254[_0x243e52(0x907)]($dataSystem[_0x243e52(0xad0)][this[_0x243e52(0x372)]()]);this[_0x243e52(0xa6d)][_0x243e52(0x8eb)](_0x25df7d);break;case _0x243e52(0xaf4):this['setHelpWindowItem']($dataSkills[this['currentExt']()]);break;case _0x243e52(0x12a):this[_0x243e52(0xa6d)][_0x243e52(0x8eb)](_0x34707f[_0x243e52(0x133)]);break;case'escape':this[_0x243e52(0xa6d)][_0x243e52(0x8eb)](_0x34707f[_0x243e52(0x53f)]);break;case _0x243e52(0xa73):this[_0x243e52(0xa6d)]['setText'](_0x34707f[_0x243e52(0x88c)]);break;case _0x243e52(0x55f):this[_0x243e52(0xa6d)][_0x243e52(0x8eb)](Window_InBattleStatus[_0x243e52(0xa78)]['statusHelpDesc']);break;default:this[_0x243e52(0xa6d)][_0x243e52(0x8eb)]('');break;}},Window_ActorCommand[_0x5a8ff0(0xb6e)]['selectLast']=function(){const _0x393cda=_0x5a8ff0;this[_0x393cda(0x8e7)](0x0);if(this['_actor']&&ConfigManager[_0x393cda(0x107)]){const _0x160d73=this[_0x393cda(0x2df)][_0x393cda(0xbcf)]();this[_0x393cda(0x1cf)](_0x160d73);if(_0x160d73===_0x393cda(0xbfb)){const _0x462cfd=this[_0x393cda(0x2df)][_0x393cda(0x316)]();if(_0x462cfd){const _0x21c5bb=this[_0x393cda(0xa68)]('skill',_0x462cfd[_0x393cda(0xa2e)]);this[_0x393cda(0x5e3)](_0x21c5bb||0x0);}}else{if(_0x160d73===_0x393cda(0xaf4)){const _0x4787e3=this['_actor'][_0x393cda(0x316)]();if(_0x4787e3){const _0x53caf8=this[_0x393cda(0xa68)](_0x393cda(0xaf4),_0x4787e3['id']);this[_0x393cda(0x5e3)](_0x53caf8||0x0);}}}}},Window_ActorCommand[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa68)]=function(_0x101d1f,_0xae9d8f){const _0x367418=_0x5a8ff0;return this[_0x367418(0x8cf)][_0x367418(0x97f)](_0x1cfd83=>_0x1cfd83[_0x367418(0x4b1)]===_0x101d1f&&_0x1cfd83[_0x367418(0x543)]===_0xae9d8f);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x347)]=Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)],Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(_0x413fa8){const _0x56855c=_0x5a8ff0;VisuMZ[_0x56855c(0xbb3)][_0x56855c(0x347)]['call'](this,_0x413fa8),this['initBattleCore'](),this[_0x56855c(0xa8f)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x483)]=function(){const _0x5904e0=_0x5a8ff0;if(this[_0x5904e0(0x7f8)])return this[_0x5904e0(0x7f8)];return this['_battleLayoutStyle']=SceneManager[_0x5904e0(0x973)]['battleLayoutStyle'](),this[_0x5904e0(0x7f8)];},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb0a)]=function(){const _0x2df16c=_0x5a8ff0;this[_0x2df16c(0xb37)]=this[_0x2df16c(0x212)]();const _0x474e94=VisuMZ[_0x2df16c(0xbb3)][_0x2df16c(0xba1)][_0x2df16c(0x22e)];_0x474e94['StatusWindowSkinHide']&&(this[_0x2df16c(0x485)]=0x0);},Window_BattleStatus['prototype'][_0x5a8ff0(0x212)]=function(){const _0x2caceb=_0x5a8ff0,_0x29ed05=VisuMZ['BattleCore'][_0x2caceb(0xba1)]['BattleLayout'];if(_0x29ed05['StatusWindowSkinFilename'])return!![];const _0x2d814f=this['battleLayoutStyle']();switch(_0x2d814f){case _0x2caceb(0x1e1):case'border':return!![];break;case _0x2caceb(0x22f):case'xp':case _0x2caceb(0x9e7):default:return![];break;}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xfb)]=function(){const _0x5917b7=_0x5a8ff0;return this[_0x5917b7(0x212)]()?0x0:0xa;},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1e8)]=function(){const _0x430df9=_0x5a8ff0,_0x17c016=this[_0x430df9(0x483)]();switch(_0x17c016){case'list':return 0x1;break;case'xp':case _0x430df9(0x9e7):return $gameParty[_0x430df9(0x211)]()[_0x430df9(0x6b9)];break;case _0x430df9(0x22f):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x5a8ff0(0xb6e)]['itemHeight']=function(){const _0x191282=_0x5a8ff0,_0x4d7ef2=this['battleLayoutStyle']();switch(_0x4d7ef2){case _0x191282(0x1e1):return Window_StatusBase[_0x191282(0xb6e)][_0x191282(0xb56)][_0x191282(0x31b)](this);break;case _0x191282(0x22f):case'xp':case _0x191282(0x9e7):default:return this[_0x191282(0x894)];break;}},Window_BattleStatus['prototype'][_0x5a8ff0(0x3c1)]=function(){const _0x1a3ae0=_0x5a8ff0,_0x57136f=this[_0x1a3ae0(0x483)]();switch(_0x57136f){case _0x1a3ae0(0x1e1):return Window_StatusBase[_0x1a3ae0(0xb6e)][_0x1a3ae0(0x3c1)]['call'](this);break;case _0x1a3ae0(0x22f):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa46)]=function(){const _0x312cd3=_0x5a8ff0;this[_0x312cd3(0x212)]()?Window_StatusBase[_0x312cd3(0xb6e)]['updatePadding']['call'](this):this[_0x312cd3(0x1d3)]=0x8;},Window_BattleStatus[_0x5a8ff0(0xb6e)]['loadWindowskin']=function(){const _0x145187=_0x5a8ff0,_0x17fe77=VisuMZ[_0x145187(0xbb3)][_0x145187(0xba1)][_0x145187(0x22e)];_0x17fe77[_0x145187(0x7f3)]?this[_0x145187(0x5dc)]=ImageManager[_0x145187(0x2b7)](_0x17fe77[_0x145187(0x7f3)]):Window_StatusBase[_0x145187(0xb6e)]['loadWindowskin'][_0x145187(0x31b)](this);},Window_BattleStatus['prototype'][_0x5a8ff0(0x661)]=function(_0x5d4661){const _0x5bb653=_0x5a8ff0,_0x2644d1=VisuMZ[_0x5bb653(0xbb3)][_0x5bb653(0xba1)]['BattleLayout'];if(_0x2644d1[_0x5bb653(0x533)])return;Window_StatusBase['prototype'][_0x5bb653(0x661)][_0x5bb653(0x31b)](this,_0x5d4661);},Window_BattleStatus['prototype'][_0x5a8ff0(0x78f)]=function(){const _0x1fd0e7=_0x5a8ff0;this[_0x1fd0e7(0x738)]=!![];},Window_BattleStatus[_0x5a8ff0(0xb6e)]['update']=function(){const _0x2bbcba=_0x5a8ff0;Window_StatusBase[_0x2bbcba(0xb6e)][_0x2bbcba(0x25f)][_0x2bbcba(0x31b)](this),this[_0x2bbcba(0x11c)](),this[_0x2bbcba(0x92d)]();if(this['battleLayoutStyle']()===_0x2bbcba(0xbad))this['updateBorderStyle']();},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x11c)]=function(){const _0x44f120=_0x5a8ff0;if($gameTemp[_0x44f120(0x714)]())this[_0x44f120(0x4a3)](),this['_requestRefresh']=![],$gameTemp[_0x44f120(0x42a)]();else this[_0x44f120(0x738)]&&(this[_0x44f120(0x738)]=![],this[_0x44f120(0x38a)](),this[_0x44f120(0xbe6)]());},Window_BattleStatus[_0x5a8ff0(0xb6e)]['show']=function(){const _0x20f654=_0x5a8ff0;Window_StatusBase['prototype'][_0x20f654(0x996)][_0x20f654(0x31b)](this);if(!$gameSystem[_0x20f654(0xa92)]())this[_0x20f654(0x38a)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb7d)]=function(){const _0x34a1fb=_0x5a8ff0;if(this[_0x34a1fb(0x18c)]===Window_BattleStatus)return;Window_StatusBase[_0x34a1fb(0xb6e)][_0x34a1fb(0xb7d)][_0x34a1fb(0x31b)](this);},Window_BattleStatus['prototype'][_0x5a8ff0(0xa6e)]=function(_0x3cb723){const _0x305e00=_0x5a8ff0,_0x465142=this[_0x305e00(0x483)]();switch(_0x465142){case'xp':case'portrait':break;case _0x305e00(0x22f):case _0x305e00(0x1e1):case _0x305e00(0xbad):default:return Window_StatusBase[_0x305e00(0xb6e)]['drawBackgroundRect'][_0x305e00(0x31b)](this,_0x3cb723);break;}},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus['prototype'][_0x5a8ff0(0x134)],Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x134)]=function(_0x59182c){const _0x3fb978=_0x5a8ff0,_0x41b9d6=this[_0x3fb978(0x483)]();switch(_0x41b9d6){case _0x3fb978(0x1e1):this[_0x3fb978(0x167)](_0x59182c);break;case'xp':this[_0x3fb978(0x918)](_0x59182c);break;case _0x3fb978(0x9e7):this[_0x3fb978(0x736)](_0x59182c);break;case _0x3fb978(0x22f):case _0x3fb978(0xbad):default:VisuMZ[_0x3fb978(0xbb3)][_0x3fb978(0x94d)][_0x3fb978(0x31b)](this,_0x59182c);break;}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1a5)]=function(_0x1a1493){const _0x2cc982=_0x5a8ff0,_0x324501=this[_0x2cc982(0x483)]();if(!$gameSystem[_0x2cc982(0xa92)]())this[_0x2cc982(0x4fc)](_0x1a1493);switch(_0x324501){case'list':this[_0x2cc982(0x554)](_0x1a1493);break;case'xp':case _0x2cc982(0x9e7):case _0x2cc982(0x22f):case _0x2cc982(0xbad):default:this[_0x2cc982(0x45e)](_0x1a1493);break;}},Window_BattleStatus['prototype']['refreshCursor']=function(){const _0x4f7cdc=_0x5a8ff0,_0xe57249=this[_0x4f7cdc(0x483)]();if(['xp'][_0x4f7cdc(0x597)](_0xe57249)&&!$gameSystem[_0x4f7cdc(0xa92)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x4f7cdc(0xb6e)]['refreshCursor'][_0x4f7cdc(0x31b)](this);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4fc)]=function(_0x33a232){const _0x5b2cfa=_0x5a8ff0,_0x1e51b9=this[_0x5b2cfa(0x749)](_0x33a232)[_0x5b2cfa(0x407)]();if(!_0x1e51b9)return;const _0xcbbc7b=this['battleLayoutStyle'](),_0x25f784=this[_0x5b2cfa(0xa37)](_0x33a232);let _0x53d9b4=Math[_0x5b2cfa(0xb41)](_0x25f784['x']+_0x25f784[_0x5b2cfa(0x3fa)]/0x2)+this[_0x5b2cfa(0x1d3)];[_0x5b2cfa(0x1e1)][_0x5b2cfa(0x597)](_0xcbbc7b)&&(_0x53d9b4=_0x25f784[_0x5b2cfa(0x3fa)]/$gameParty[_0x5b2cfa(0x211)]()['length'],_0x53d9b4*=_0x33a232,_0x53d9b4+=_0x25f784[_0x5b2cfa(0x3fa)]/$gameParty[_0x5b2cfa(0x211)]()['length']/0x2);let _0x198b87=Math[_0x5b2cfa(0xb41)](this[_0x5b2cfa(0x2dd)](_0x33a232,_0x1e51b9,_0x25f784));_0x1e51b9[_0x5b2cfa(0x864)](_0x53d9b4,_0x198b87),this[_0x5b2cfa(0x585)](_0x1e51b9,0x1),_0x1e51b9[_0x5b2cfa(0x996)](),this[_0x5b2cfa(0x464)](),this[_0x5b2cfa(0xbe6)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)]['frontviewSpriteY']=function(_0x296130,_0x585970,_0xbb8325){const _0x47e912=_0x5a8ff0,_0x41b550=VisuMZ[_0x47e912(0xbb3)][_0x47e912(0xba1)][_0x47e912(0x22e)],_0x2d52e4=this[_0x47e912(0x483)]();if(_0x2d52e4==='xp'){const _0x389e86=_0x41b550[_0x47e912(0x8a7)];switch(_0x389e86['toLowerCase']()[_0x47e912(0xb20)]()){case _0x47e912(0x935):return _0xbb8325[_0x47e912(0x75c)]-_0x585970[_0x47e912(0x8a1)][_0x47e912(0x75c)]/0x4;break;case _0x47e912(0x5a5):const _0x4f043a=_0x41b550[_0x47e912(0x19d)];return(_0xbb8325[_0x47e912(0x75c)]+(_0x585970[_0x47e912(0x75c)]||_0x4f043a))/0x2;break;case _0x47e912(0x115):return 0x0;case _0x47e912(0xa4b):default:return this[_0x47e912(0x394)](_0xbb8325);break;}}else{if(_0x2d52e4===_0x47e912(0x9e7)){}}return _0x585970[_0x47e912(0x75c)];},Sprite_Name[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa1c)]=function(){return 0x24;},Sprite_Name[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3f7)]=function(){const _0x23b168=_0x5a8ff0,_0xddba50=this['name'](),_0x2d9fbc=this['bitmapWidth'](),_0x23872f=this['bitmapHeight']();this[_0x23b168(0x824)](),this['bitmap'][_0x23b168(0x9c3)](),this[_0x23b168(0x103)][_0x23b168(0x1c4)](_0xddba50,0x4,0x0,_0x2d9fbc,_0x23872f,_0x23b168(0x814));},Bitmap[_0x5a8ff0(0xb6e)]['drawTextTopAligned']=function(_0x4f9374,_0x4d5abc,_0x1d2ece,_0x5a16c,_0x2bf09f,_0x322607){const _0x46bb24=_0x5a8ff0;TextManager[_0x46bb24(0x956)]&&(_0x4f9374=TextManager['parseLocalizedText'](_0x4f9374));const _0x8904b=this[_0x46bb24(0x8a6)],_0xdb9dbd=_0x8904b[_0x46bb24(0x6ca)];_0x5a16c=_0x5a16c||0xffffffff;let _0x4f2d86=_0x4d5abc,_0x177346=Math[_0x46bb24(0xb41)](_0x1d2ece+0x18/0x2+this[_0x46bb24(0x649)]*0.35);_0x322607===_0x46bb24(0x5a5)&&(_0x4f2d86+=_0x5a16c/0x2),_0x322607===_0x46bb24(0x198)&&(_0x4f2d86+=_0x5a16c),_0x8904b[_0x46bb24(0xb3d)](),_0x8904b[_0x46bb24(0xa9e)]=this[_0x46bb24(0x2ec)](),_0x8904b[_0x46bb24(0x3a5)]=_0x322607,_0x8904b['textBaseline']=_0x46bb24(0x265),_0x8904b[_0x46bb24(0x6ca)]=0x1,this[_0x46bb24(0x6d0)](_0x4f9374,_0x4f2d86,_0x177346,_0x5a16c),_0x8904b['globalAlpha']=_0xdb9dbd,this[_0x46bb24(0x11f)](_0x4f9374,_0x4f2d86,_0x177346,_0x5a16c),_0x8904b[_0x46bb24(0x68a)](),this[_0x46bb24(0x57f)][_0x46bb24(0x25f)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)]['nameY']=function(_0x5c645d){const _0x5969b9=_0x5a8ff0;return this[_0x5969b9(0x4d0)](_0x5c645d)-this[_0x5969b9(0x572)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x167)]=function(_0x572f57){const _0x1ce9a0=_0x5a8ff0;if(!VisuMZ[_0x1ce9a0(0xbb3)][_0x1ce9a0(0xba1)]['BattleLayout'][_0x1ce9a0(0x2cd)])return;const _0x21d099=this[_0x1ce9a0(0x749)](_0x572f57),_0x8718ea=this[_0x1ce9a0(0xa37)](_0x572f57);_0x8718ea[_0x1ce9a0(0x3fa)]=ImageManager[_0x1ce9a0(0x8b8)],_0x8718ea['height']-=0x2,this['drawActorFace'](_0x21d099,_0x8718ea['x']+0x1,_0x8718ea['y']+0x1,_0x8718ea[_0x1ce9a0(0x3fa)],_0x8718ea['height']);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x554)]=function(_0x12ecb3){const _0x19ef57=_0x5a8ff0,_0x329b70=VisuMZ['BattleCore'][_0x19ef57(0xba1)][_0x19ef57(0x22e)],_0x200ed3=$dataSystem['optDisplayTp']?0x4:0x3,_0x73c187=_0x200ed3*0x80+(_0x200ed3-0x1)*0x8+0x4,_0x322f72=this['actor'](_0x12ecb3),_0x245c1=this[_0x19ef57(0xa37)](_0x12ecb3);let _0x2bec3c=_0x245c1['x']+this[_0x19ef57(0x1d3)];_0x329b70[_0x19ef57(0x2cd)]?_0x2bec3c=_0x245c1['x']+ImageManager[_0x19ef57(0x8b8)]+0x8:_0x2bec3c+=ImageManager[_0x19ef57(0x80b)];const _0x1e3fce=Math[_0x19ef57(0xb41)](Math[_0x19ef57(0x60d)](_0x245c1['x']+_0x245c1[_0x19ef57(0x3fa)]-_0x73c187,_0x2bec3c)),_0x2e3ddd=Math[_0x19ef57(0xb41)](_0x245c1['y']+(_0x245c1['height']-Sprite_Name['prototype'][_0x19ef57(0xa1c)]())/0x2),_0x353c1f=Math[_0x19ef57(0xb41)](_0x1e3fce-ImageManager['iconWidth']/0x2-0x4),_0x24675e=Math[_0x19ef57(0xb41)](_0x245c1['y']+(_0x245c1[_0x19ef57(0x75c)]-ImageManager[_0x19ef57(0x782)])/0x2+ImageManager[_0x19ef57(0x782)]/0x2);let _0x5d9723=_0x1e3fce+0x88;const _0x351e63=_0x2e3ddd;this[_0x19ef57(0x758)](_0x322f72,_0x1e3fce-0x4+(_0x329b70['TpbGaugeOffsetX']||0x0),_0x2e3ddd+(_0x329b70[_0x19ef57(0x35c)]||0x0)),this[_0x19ef57(0x8b5)](_0x322f72,_0x1e3fce+(_0x329b70[_0x19ef57(0x47a)]||0x0),_0x2e3ddd+(_0x329b70[_0x19ef57(0x2d0)]||0x0)),this['placeStateIcon'](_0x322f72,_0x353c1f+(_0x329b70[_0x19ef57(0x22c)]||0x0),_0x24675e+(_0x329b70[_0x19ef57(0x85a)]||0x0)),this['placeGauge'](_0x322f72,'hp',_0x5d9723+0x88*0x0+(_0x329b70[_0x19ef57(0x446)]||0x0),_0x351e63+(_0x329b70[_0x19ef57(0x5c9)]||0x0)),this[_0x19ef57(0xb68)](_0x322f72,'mp',_0x5d9723+0x88*0x1+(_0x329b70[_0x19ef57(0x4c8)]||0x0),_0x351e63+(_0x329b70[_0x19ef57(0x558)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x19ef57(0xb68)](_0x322f72,'tp',_0x5d9723+0x88*0x2+(_0x329b70[_0x19ef57(0xb95)]||0x0),_0x351e63+(_0x329b70[_0x19ef57(0x3bb)]||0x0));},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x918)]=function(_0xec4573){const _0x59f633=_0x5a8ff0;if(!$gameSystem['isSideView']())return;VisuMZ['BattleCore'][_0x59f633(0x94d)][_0x59f633(0x31b)](this,_0xec4573);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x45e)]=function(_0xd4b513){const _0x25efe0=_0x5a8ff0,_0x3b2be0=VisuMZ['BattleCore'][_0x25efe0(0xba1)]['BattleLayout'],_0x78be94=this['actor'](_0xd4b513),_0x577b16=this[_0x25efe0(0xa37)](_0xd4b513),_0x785e92=Math[_0x25efe0(0xb41)](_0x577b16['x']+(_0x577b16['width']-0x80)/0x2),_0x3676cd=this['nameY'](_0x577b16);let _0x5620bc=_0x785e92-ImageManager[_0x25efe0(0x80b)]/0x2-0x4,_0x5e31bf=_0x3676cd+ImageManager[_0x25efe0(0x782)]/0x2;_0x5620bc-ImageManager[_0x25efe0(0x80b)]/0x2<_0x577b16['x']&&(_0x5620bc=_0x785e92+ImageManager[_0x25efe0(0x80b)]/0x2-0x4,_0x5e31bf=_0x3676cd-ImageManager['iconHeight']/0x2);const _0x382967=_0x785e92,_0xfa4392=this[_0x25efe0(0x4d0)](_0x577b16);this[_0x25efe0(0x758)](_0x78be94,_0x785e92+(_0x3b2be0[_0x25efe0(0x39a)]||0x0),_0x3676cd+(_0x3b2be0[_0x25efe0(0x35c)]||0x0)),this['placeActorName'](_0x78be94,_0x785e92+(_0x3b2be0['NameOffsetX']||0x0),_0x3676cd+(_0x3b2be0['NameOffsetY']||0x0)),this['placeStateIcon'](_0x78be94,_0x5620bc+(_0x3b2be0[_0x25efe0(0x22c)]||0x0),_0x5e31bf+(_0x3b2be0[_0x25efe0(0x85a)]||0x0)),this[_0x25efe0(0xb68)](_0x78be94,'hp',_0x382967+(_0x3b2be0[_0x25efe0(0x446)]||0x0),_0xfa4392+(_0x3b2be0[_0x25efe0(0x5c9)]||0x0)),this['placeGauge'](_0x78be94,'mp',_0x382967+(_0x3b2be0[_0x25efe0(0x4c8)]||0x0),_0xfa4392+this[_0x25efe0(0x572)]()+(_0x3b2be0['MpGaugeOffsetY']||0x0)),$dataSystem['optDisplayTp']&&this[_0x25efe0(0xb68)](_0x78be94,'tp',_0x382967+(_0x3b2be0[_0x25efe0(0xb95)]||0x0),_0xfa4392+this[_0x25efe0(0x572)]()*0x2+(_0x3b2be0[_0x25efe0(0x3bb)]||0x0));},Window_BattleStatus['prototype'][_0x5a8ff0(0x98d)]=function(_0x103489){const _0xe70616=_0x5a8ff0;if(!VisuMZ[_0xe70616(0xbb3)][_0xe70616(0xba1)][_0xe70616(0x22e)][_0xe70616(0x605)])return![];if(_0x103489[_0xe70616(0x600)]())return!![];return Imported[_0xe70616(0xc12)]&&_0x103489[_0xe70616(0x3e8)]();},Game_Actor[_0x5a8ff0(0xb6e)]['getBattlePortraitOffsetX']=function(){const _0x3e7ca4=_0x5a8ff0;if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x3e7ca4(0x749)]()[_0x3e7ca4(0x494)][_0x3e7ca4(0x6d8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x5a8ff0(0xb6e)]['getBattlePortraitOffsetY']=function(){const _0x3b8b74=_0x5a8ff0;if(this[_0x3b8b74(0x749)]()[_0x3b8b74(0x494)][_0x3b8b74(0x6d8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x3b8b74(0x494)][_0x3b8b74(0x6d8)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x736)]=function(_0x527bf2){const _0x2e4c27=_0x5a8ff0,_0x2afae9=this[_0x2e4c27(0x749)](_0x527bf2);if(this[_0x2e4c27(0x98d)](_0x2afae9)){const _0xce07b2=_0x2e4c27(0xa1e)[_0x2e4c27(0x907)](_0x2afae9[_0x2e4c27(0x7c3)]()),_0x16802a=this[_0x2e4c27(0xb76)](_0xce07b2,Sprite),_0x47cf28=_0x2afae9[_0x2e4c27(0x69c)]();_0x47cf28!==''?_0x16802a[_0x2e4c27(0x103)]=ImageManager['loadPicture'](_0x47cf28):_0x16802a[_0x2e4c27(0x103)]=ImageManager[_0x2e4c27(0x21e)];const _0x3c6434=this['itemRect'](_0x527bf2);_0x16802a[_0x2e4c27(0x50e)]['x']=0.5,_0x16802a[_0x2e4c27(0x50e)]['y']=0x1;let _0x2cbc98=Math[_0x2e4c27(0xb41)](_0x3c6434['x']+_0x3c6434[_0x2e4c27(0x3fa)]/0x2)+this[_0x2e4c27(0x1d3)];_0x2cbc98+=_0x2afae9[_0x2e4c27(0xaf3)]();let _0x5d7fc5=Math[_0x2e4c27(0xb41)](this[_0x2e4c27(0x75c)]);_0x5d7fc5+=_0x2afae9['getBattlePortraitOffsetY'](),_0x16802a[_0x2e4c27(0x511)](_0x2cbc98,_0x5d7fc5);const _0xe50fed=VisuMZ[_0x2e4c27(0xbb3)][_0x2e4c27(0xba1)][_0x2e4c27(0x22e)][_0x2e4c27(0x45b)];_0x16802a[_0x2e4c27(0x90a)]['x']=_0xe50fed,_0x16802a['scale']['y']=_0xe50fed,_0x16802a[_0x2e4c27(0x996)]();}else{const _0x2d1e0f=this[_0x2e4c27(0xa31)](_0x527bf2);this[_0x2e4c27(0x5a0)](_0x2afae9,_0x2d1e0f['x'],_0x2d1e0f['y'],_0x2d1e0f[_0x2e4c27(0x3fa)],_0x2d1e0f[_0x2e4c27(0x75c)]);}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb76)]=function(_0x2fc874,_0xd30ecc){const _0x370103=_0x5a8ff0,_0x4616f7=this[_0x370103(0x221)];if(_0x4616f7[_0x2fc874])return _0x4616f7[_0x2fc874];else{const _0x244c2d=new _0xd30ecc();return _0x4616f7[_0x2fc874]=_0x244c2d,this[_0x370103(0x489)](_0x244c2d),this[_0x370103(0x489)](this[_0x370103(0x5df)]),_0x244c2d;}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x853)]=function(){const _0x4756f0=_0x5a8ff0;this['_createCursorArea'](),this[_0x4756f0(0x1af)](),Window_StatusBase[_0x4756f0(0xb6e)][_0x4756f0(0x853)][_0x4756f0(0x31b)](this),this[_0x4756f0(0x9ac)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)]['_createCursorArea']=function(){const _0x171e54=_0x5a8ff0;this[_0x171e54(0x5df)]=new Sprite(),this['_cursorArea'][_0x171e54(0xaeb)]=[new PIXI[(_0x171e54(0xaeb))]['AlphaFilter']()],this[_0x171e54(0x5df)]['filterArea']=new Rectangle(),this[_0x171e54(0x5df)][_0x171e54(0x511)](this[_0x171e54(0x7be)],this['_padding']),this[_0x171e54(0xa57)](this[_0x171e54(0x5df)]);},Window_BattleStatus['prototype'][_0x5a8ff0(0x1af)]=function(){const _0x3eff7d=_0x5a8ff0;this[_0x3eff7d(0x780)]=new Sprite(),this[_0x3eff7d(0xa57)](this[_0x3eff7d(0x780)]);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x464)]=function(){const _0x15618d=_0x5a8ff0;this['_effectsContainer']&&this[_0x15618d(0xa57)](this[_0x15618d(0x780)]);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9ac)]=function(){const _0x1db2aa=_0x5a8ff0;this[_0x1db2aa(0x1f4)]=new Sprite(),this['addChild'](this[_0x1db2aa(0x1f4)]);},Window_BattleStatus['prototype']['_createCursorSprite']=function(){const _0x3f0046=_0x5a8ff0;this[_0x3f0046(0x403)]=new Sprite();for(let _0x2f428d=0x0;_0x2f428d<0x9;_0x2f428d++){this[_0x3f0046(0x403)][_0x3f0046(0xa57)](new Sprite());}this[_0x3f0046(0x5df)]['addChild'](this[_0x3f0046(0x403)]);},Window_BattleStatus[_0x5a8ff0(0xb6e)]['_updateClientArea']=function(){const _0x4d27ea=_0x5a8ff0;Window_StatusBase[_0x4d27ea(0xb6e)][_0x4d27ea(0x565)][_0x4d27ea(0x31b)](this),this[_0x4d27ea(0xbf3)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)]['_updateCursorArea']=function(){const _0x1b72d7=_0x5a8ff0,_0x4994e9=this['_padding'];this['_cursorArea']['move'](_0x4994e9,_0x4994e9),this[_0x1b72d7(0x5df)]['x']=_0x4994e9-this[_0x1b72d7(0x1fc)]['x'],this[_0x1b72d7(0x5df)]['y']=_0x4994e9-this[_0x1b72d7(0x1fc)]['y'],this['innerWidth']>0x0&&this['innerHeight']>0x0?this[_0x1b72d7(0x5df)][_0x1b72d7(0xb22)]=this[_0x1b72d7(0x7b3)]():this[_0x1b72d7(0x5df)]['visible']=![];},Window_BattleStatus[_0x5a8ff0(0xb6e)]['_updateFilterArea']=function(){const _0x172e3f=_0x5a8ff0;Window_StatusBase[_0x172e3f(0xb6e)][_0x172e3f(0xa18)][_0x172e3f(0x31b)](this),this[_0x172e3f(0x5ee)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)]['_updateCursorFilterArea']=function(){const _0x689a79=_0x5a8ff0,_0x989427=this['_cursorArea'][_0x689a79(0x128)][_0x689a79(0x818)](new Point(0x0,0x0)),_0x2d1d56=this[_0x689a79(0x5df)][_0x689a79(0x24f)];_0x2d1d56['x']=_0x989427['x']+this['origin']['x'],_0x2d1d56['y']=_0x989427['y']+this[_0x689a79(0x1fc)]['y'],_0x2d1d56[_0x689a79(0x3fa)]=this['innerWidth'],_0x2d1d56[_0x689a79(0x75c)]=this[_0x689a79(0x894)];},Window_BattleStatus[_0x5a8ff0(0xb6e)]['refreshActorPortrait']=function(_0x4da858){const _0x6dba23=_0x5a8ff0;if(this[_0x6dba23(0x483)]()!==_0x6dba23(0x9e7))return;this[_0x6dba23(0x736)](_0x4da858['index']());},Window_BattleStatus['prototype'][_0x5a8ff0(0x7f2)]=function(_0x3b2f51,_0x1eeb97){const _0x258f32=_0x5a8ff0;if(!this['_damageContainer'])return;if(!_0x3b2f51)return;if(!_0x1eeb97)return;const _0x5e0187=this['itemRect'](_0x1eeb97[_0x258f32(0xc16)]());_0x5e0187['x']+=_0x5e0187[_0x258f32(0x3fa)]/0x2+this[_0x258f32(0x1d3)],_0x3b2f51['x']=_0x5e0187['x'],_0x3b2f51['y']=_0x5e0187['y'],this[_0x258f32(0x1f4)][_0x258f32(0xa57)](_0x3b2f51);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5ed)]=function(_0x4d600f){const _0x3ab1b8=_0x5a8ff0;if(!this[_0x3ab1b8(0x1f4)])return;if(!_0x4d600f)return;this[_0x3ab1b8(0x1f4)][_0x3ab1b8(0x297)](_0x4d600f);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5ea)]=function(){const _0x1d7cc1=_0x5a8ff0;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x1d7cc1(0x7b8)])this[_0x1d7cc1(0x13a)]();this[_0x1d7cc1(0x608)](),this[_0x1d7cc1(0x57b)]();},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x253)]=function(){const _0x5b9a55=_0x5a8ff0;if(this[_0x5b9a55(0x18c)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ[_0x5b9a55(0xbb3)][_0x5b9a55(0xba1)][_0x5b9a55(0x22e)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x5a8ff0(0xb6e)]['createBorderStylePortraitSprite']=function(){const _0x3734c9=_0x5a8ff0;this[_0x3734c9(0x7b8)]=new Sprite();const _0x3313e9=SceneManager[_0x3734c9(0x973)],_0x378ee5=_0x3313e9[_0x3734c9(0xf8)][_0x3734c9(0x70f)](_0x3313e9[_0x3734c9(0x437)]);_0x3313e9['addChildAt'](this['_borderPortraitSprite'],_0x378ee5),this[_0x3734c9(0x7b8)]['anchor']['x']=0.5,this[_0x3734c9(0x7b8)]['anchor']['y']=0x1;const _0x2fd7fe=VisuMZ['BattleCore']['Settings'][_0x3734c9(0x22e)]['PortraitScaleBorderStyle'];this[_0x3734c9(0x7b8)]['scale']['x']=_0x2fd7fe,this[_0x3734c9(0x7b8)]['scale']['y']=_0x2fd7fe,this['_borderPortraitSprite']['y']=this['y']+this[_0x3734c9(0x75c)],this[_0x3734c9(0x89c)]=0x0;},Window_BattleStatus['prototype'][_0x5a8ff0(0x52f)]=function(){const _0x52d3a3=_0x5a8ff0;return BattleManager[_0x52d3a3(0x6e5)]();},Window_BattleStatus['prototype'][_0x5a8ff0(0x608)]=function(){const _0x1bf71c=_0x5a8ff0;this[_0x1bf71c(0x7b8)][_0x1bf71c(0xb22)]=this[_0x1bf71c(0x52f)]();const _0x32a52a=BattleManager[_0x1bf71c(0x749)](),_0x1c9307=_0x32a52a?_0x32a52a[_0x1bf71c(0x69c)]()||'':'';if(_0x32a52a===this[_0x1bf71c(0x7b8)][_0x1bf71c(0x749)]&&_0x1c9307===this[_0x1bf71c(0x7b8)]['lastFilename'])return;this[_0x1bf71c(0x7b8)][_0x1bf71c(0x749)]=_0x32a52a||this['_borderPortraitSprite'][_0x1bf71c(0x749)],this[_0x1bf71c(0x7b8)][_0x1bf71c(0xa80)]=_0x1c9307;if(!_0x32a52a)return;else{if(_0x1c9307===''){this[_0x1bf71c(0x7b8)][_0x1bf71c(0x103)]=ImageManager[_0x1bf71c(0x21e)],this[_0x1bf71c(0x7b8)][_0x1bf71c(0xa80)]='';return;}else{const _0x3bf4df=ImageManager['loadPicture'](_0x1c9307);this[_0x1bf71c(0x7b8)][_0x1bf71c(0x485)]=0x0,_0x3bf4df['addLoadListener'](this[_0x1bf71c(0x54c)][_0x1bf71c(0x164)](this,_0x3bf4df));}}},Window_BattleStatus[_0x5a8ff0(0xb6e)]['processBorderActor']=function(_0x13528a){const _0x3cd528=_0x5a8ff0;this[_0x3cd528(0x89c)]=0x14,this[_0x3cd528(0x7b8)][_0x3cd528(0x103)]=_0x13528a;SceneManager[_0x3cd528(0x973)]['isRightInputMode']()?(this[_0x3cd528(0x7b8)]['x']=0x0,this[_0x3cd528(0xc18)]=Math[_0x3cd528(0x447)](_0x13528a[_0x3cd528(0x3fa)]/0x2)):(this[_0x3cd528(0x7b8)]['x']=this['width'],this['_borderPortraitTargetX']=this['width']*0x3/0x4);this[_0x3cd528(0x7b8)]['opacity']=0x0,this[_0x3cd528(0x7b8)]['y']=this['y']+this[_0x3cd528(0x75c)];const _0xdf7851=BattleManager[_0x3cd528(0x749)]();_0xdf7851&&(this[_0x3cd528(0xc18)]+=_0xdf7851[_0x3cd528(0xaf3)](),this[_0x3cd528(0x7b8)]['y']+=_0xdf7851[_0x3cd528(0x60b)]());},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x57b)]=function(){const _0x33e915=_0x5a8ff0;if(this[_0x33e915(0x89c)]>0x0){const _0x14c3a6=this['_borderPortraitDuration'],_0x46233b=this[_0x33e915(0x7b8)];_0x46233b['x']=(_0x46233b['x']*(_0x14c3a6-0x1)+this[_0x33e915(0xc18)])/_0x14c3a6,_0x46233b[_0x33e915(0x485)]=(_0x46233b['opacity']*(_0x14c3a6-0x1)+0xff)/_0x14c3a6,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x92d)]=function(){const _0x37db0e=_0x5a8ff0;return;this['_effectsContainer']&&(this[_0x37db0e(0x780)]['x']=this['x'],this[_0x37db0e(0x780)]['y']=this['y']),this[_0x37db0e(0x1f4)]&&(this['_damageContainer']['x']=this['x'],this[_0x37db0e(0x1f4)]['y']=this['y']);},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa8f)]=function(){const _0xf12ed5=_0x5a8ff0,_0x4aec87=VisuMZ[_0xf12ed5(0xbb3)]['Settings'][_0xf12ed5(0x22e)];if(_0x4aec87[_0xf12ed5(0x540)]){const _0x22d736=new Sprite();_0x22d736['bitmap']=ImageManager[_0xf12ed5(0x2b7)](_0x4aec87['StatusWindowAttachmentBack']),_0x22d736['x']=_0x4aec87[_0xf12ed5(0x36d)]||0x0,_0x22d736['y']=_0x4aec87[_0xf12ed5(0x28b)]||0x0,this['addChildToBack'](_0x22d736),this['_backAttachmentSprite']=_0x22d736;}if(_0x4aec87[_0xf12ed5(0xa77)]){const _0x5a884c=new Sprite();_0x5a884c[_0xf12ed5(0x103)]=ImageManager['loadSystem'](_0x4aec87[_0xf12ed5(0xa77)]),_0x5a884c['x']=_0x4aec87['StatusWindowAttachmentFrontOffsetX']||0x0,_0x5a884c['y']=_0x4aec87[_0xf12ed5(0x94e)]||0x0,this['addChild'](_0x5a884c),this[_0xf12ed5(0x860)]=_0x5a884c;}},Window_BattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbe6)]=function(){const _0x26051d=_0x5a8ff0;this[_0x26051d(0x860)]&&this[_0x26051d(0xa57)](this[_0x26051d(0x860)]),this[_0x26051d(0x505)]&&this['addChildToBack'](this[_0x26051d(0x505)]);},Window_BattleActor['prototype'][_0x5a8ff0(0x4eb)]=function(){const _0x5b25a6=_0x5a8ff0;return this[_0x5b25a6(0x2b9)]();},Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b9)]=function(){const _0x159b12=_0x5a8ff0,_0x3b7d76=BattleManager[_0x159b12(0x778)]();if(!_0x3b7d76)return!![];if(!_0x3b7d76[_0x159b12(0x12a)]())return!![];const _0x284223=this[_0x159b12(0x749)](this['index']()),_0x466387=_0x3b7d76[_0x159b12(0x12a)]()[_0x159b12(0x494)];if(_0x3b7d76['isForNotUser']()){if(_0x284223===BattleManager[_0x159b12(0x749)]())return![];}if(_0x3b7d76[_0x159b12(0xb59)]()){if(!_0x284223[_0x159b12(0x46a)]())return![];}if(_0x3b7d76[_0x159b12(0x6c2)]()){if(!_0x284223['isAlive']())return![];}return!![];},Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8ab)]=function(_0x5d8d9a){const _0x4063a1=_0x5a8ff0;this[_0x4063a1(0x7a2)]=_0x5d8d9a;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xbf4)]=Window_BattleActor[_0x5a8ff0(0xb6e)]['processTouch'],Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5d3)]=function(){const _0x3090c4=_0x5a8ff0;Window_BattleStatus[_0x3090c4(0xb6e)][_0x3090c4(0x5d3)][_0x3090c4(0x31b)](this),this[_0x3090c4(0x7a2)]?this[_0x3090c4(0x7f5)]():VisuMZ[_0x3090c4(0xbb3)][_0x3090c4(0xbf4)]['call'](this);},Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7f5)]=function(){const _0x1aedc2=_0x5a8ff0,_0x261b6f=SceneManager[_0x1aedc2(0x973)]['_enemyWindow'];if(!_0x261b6f)return;this[_0x1aedc2(0xf4)]=![];const _0x262027=this['hitIndex']();if(_0x262027>=0x0){this[_0x1aedc2(0x5e3)](_0x262027);if(TouchInput['isClicked']()){const _0x19ae1f=$gameParty[_0x1aedc2(0x2c0)]()[_0x262027],_0x20ebf1=_0x261b6f[_0x1aedc2(0xae6)][_0x1aedc2(0x70f)](_0x19ae1f);_0x20ebf1>=0x0&&(_0x261b6f[_0x1aedc2(0x5e3)](_0x20ebf1),_0x261b6f[_0x1aedc2(0x185)]());}}},Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb30)]=function(){const _0x100ca7=_0x5a8ff0;this['_enemyWindowMode']&&(this[_0x100ca7(0x4a7)]++,this[_0x100ca7(0x728)]=!![]);const _0xba0bb=Window_BattleStatus[_0x100ca7(0xb6e)]['_makeCursorAlpha'][_0x100ca7(0x31b)](this);return this['_enemyWindowMode']&&(this['active']=![]),_0xba0bb;},VisuMZ['BattleCore'][_0x5a8ff0(0xb46)]=Window_BattleActor[_0x5a8ff0(0xb6e)]['show'],Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x996)]=function(){const _0x5bee3b=_0x5a8ff0;VisuMZ[_0x5bee3b(0xbb3)]['Window_BattleActor_show'][_0x5bee3b(0x31b)](this);const _0x27a660=BattleManager[_0x5bee3b(0x778)]();if(_0x27a660){const _0x3039be=$gameParty[_0x5bee3b(0x4c4)]();_0x27a660['canSingleOrMultipleSelect']()&&_0x3039be[_0x5bee3b(0x6b9)]>0x1&&this[_0x5bee3b(0xba6)](_0x5bee3b(0x72f),this['selectAllActors']['bind'](this));}},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleActor_hide']=Window_BattleActor['prototype'][_0x5a8ff0(0xb7d)],Window_BattleActor[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb7d)]=function(){const _0x199447=_0x5a8ff0;VisuMZ[_0x199447(0xbb3)][_0x199447(0x577)][_0x199447(0x31b)](this),delete this[_0x199447(0x25e)][_0x199447(0x370)],delete this[_0x199447(0x25e)]['pagedown'];},Window_BattleActor['prototype'][_0x5a8ff0(0x181)]=function(){const _0x4c3e24=_0x5a8ff0,_0x46e532=BattleManager[_0x4c3e24(0x778)]();if(_0x46e532)_0x46e532[_0x4c3e24(0x742)](_0x4c3e24(0xb70));this[_0x4c3e24(0x185)]();},VisuMZ['BattleCore']['Window_BattleEnemy_initialize']=Window_BattleEnemy['prototype'][_0x5a8ff0(0x4aa)],Window_BattleEnemy['prototype'][_0x5a8ff0(0x4aa)]=function(_0x3ca7a1){const _0x461733=_0x5a8ff0;this[_0x461733(0xbc5)]=null,VisuMZ['BattleCore']['Window_BattleEnemy_initialize'][_0x461733(0x31b)](this,_0x3ca7a1);if(Imported[_0x461733(0x18e)]){if(VisuMZ[_0x461733(0x355)][_0x461733(0x978)]<1.12){let _0x3325cb='';_0x3325cb+=_0x461733(0x93e),_0x3325cb+='in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20',_0x3325cb+=_0x461733(0xacc),alert(_0x3325cb),SceneManager[_0x461733(0xad2)]();}}},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1e8)]=function(){const _0x1dbbd5=_0x5a8ff0;return this[_0x1dbbd5(0x6b0)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x302)]=Window_BattleEnemy[_0x5a8ff0(0xb6e)]['show'],Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x996)]=function(){const _0x58bdaa=_0x5a8ff0;VisuMZ['BattleCore'][_0x58bdaa(0x302)][_0x58bdaa(0x31b)](this),this['y']=Graphics[_0x58bdaa(0x75c)]*0xa,this['meetsSelectFrontviewActorConditions']()&&this[_0x58bdaa(0xb34)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb7d)],Window_BattleEnemy[_0x5a8ff0(0xb6e)]['hide']=function(){const _0x49f62c=_0x5a8ff0;VisuMZ[_0x49f62c(0xbb3)][_0x49f62c(0xa6a)][_0x49f62c(0x31b)](this),$gameParty[_0x49f62c(0x5e3)](null),delete this['_handlers'][_0x49f62c(0x370)],delete this[_0x49f62c(0x25e)][_0x49f62c(0x72f)];},Window_BattleEnemy[_0x5a8ff0(0xb6e)]['validTargets']=function(){const _0x59dc1a=_0x5a8ff0;let _0x14d3ee=$gameTroop[_0x59dc1a(0x4c4)]();const _0x2a423f=BattleManager[_0x59dc1a(0x778)]();if(_0x2a423f){_0x2a423f[_0x59dc1a(0x5a9)]()&&_0x14d3ee[_0x59dc1a(0x6b9)]>0x1&&this[_0x59dc1a(0xba6)](_0x59dc1a(0x370),this[_0x59dc1a(0xb11)][_0x59dc1a(0x164)](this));if(_0x2a423f[_0x59dc1a(0x7fc)]()){const _0x575080=$gameParty[_0x59dc1a(0x4c4)]();_0x14d3ee=_0x14d3ee[_0x59dc1a(0xb5d)](_0x575080),_0x2a423f[_0x59dc1a(0x5a9)]()&&_0x575080['length']>0x1&&this[_0x59dc1a(0xba6)](_0x59dc1a(0x72f),this[_0x59dc1a(0x181)][_0x59dc1a(0x164)](this));}}return _0x14d3ee;},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x38a)]=function(){const _0x2db67a=_0x5a8ff0;this[_0x2db67a(0xae6)]=this['validTargets'](),this[_0x2db67a(0x235)](),Window_Selectable[_0x2db67a(0xb6e)][_0x2db67a(0x38a)][_0x2db67a(0x31b)](this);},Window_BattleEnemy['prototype'][_0x5a8ff0(0x235)]=function(){const _0x37d311=_0x5a8ff0;this[_0x37d311(0xae6)][_0x37d311(0x46d)]((_0x1abc96,_0x30deab)=>{const _0x2301d0=_0x37d311;if(_0x1abc96[_0x2301d0(0x34b)]()!==_0x30deab['isActor']()){if(_0x1abc96['isEnemy']())return-0x1;if(_0x30deab['isEnemy']())return 0x1;}if(_0x1abc96['isActor']()&&_0x30deab[_0x2301d0(0x34b)]())return _0x1abc96['index']()-_0x30deab[_0x2301d0(0xc16)]();return _0x1abc96['battler']()[_0x2301d0(0x7bd)]===_0x30deab[_0x2301d0(0x407)]()[_0x2301d0(0x7bd)]?_0x1abc96['battler']()[_0x2301d0(0x4b6)]-_0x30deab['battler']()[_0x2301d0(0x4b6)]:_0x1abc96['battler']()['_baseX']-_0x30deab[_0x2301d0(0x407)]()[_0x2301d0(0x7bd)];}),SceneManager['isBattleFlipped']()&&this[_0x37d311(0xae6)][_0x37d311(0x666)]();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9bf)]=function(){const _0x42eb40=_0x5a8ff0,_0x5cc9fd=VisuMZ['BattleCore']['Settings']['Enemy'];_0x5cc9fd[_0x42eb40(0x254)]?this[_0x42eb40(0xb35)]():this[_0x42eb40(0x268)]();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb35)]=function(){const _0x2dfdf0=_0x5a8ff0,_0x1b92e4=BattleManager['inputtingAction']();if(_0x1b92e4&&_0x1b92e4[_0x2dfdf0(0x7fc)]()){if(_0x1b92e4[_0x2dfdf0(0x786)]()){if(this['_lastActor']&&this[_0x2dfdf0(0xae6)][_0x2dfdf0(0x597)](this[_0x2dfdf0(0x16b)])){const _0x20625a=this[_0x2dfdf0(0xae6)]['indexOf'](this[_0x2dfdf0(0x16b)]);return this[_0x2dfdf0(0x8e7)](_0x20625a);}else return this[_0x2dfdf0(0x268)]();}}if(this[_0x2dfdf0(0xbc5)]&&this[_0x2dfdf0(0xae6)][_0x2dfdf0(0x597)](this[_0x2dfdf0(0xbc5)])){const _0x38d85c=this[_0x2dfdf0(0xae6)]['indexOf'](this['_lastEnemy']);this[_0x2dfdf0(0x8e7)](_0x38d85c);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x268)]=function(){const _0x11827d=_0x5a8ff0,_0x4831d3=BattleManager[_0x11827d(0x778)]();if(_0x4831d3&&_0x4831d3[_0x11827d(0x7fc)]()){const _0x1309c3=$gameParty[_0x11827d(0x4c4)]()[0x0];let _0x3b593e=this['_enemies'][_0x11827d(0x70f)](_0x1309c3);const _0x203c65=_0x4831d3[_0x11827d(0x12a)]()[_0x11827d(0x9e4)];if(_0x203c65[_0x11827d(0x6d8)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x11827d(0x8e7)](_0x3b593e);return;}else{if(_0x203c65[_0x11827d(0x6d8)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x11827d(0x8e7)](_0x3b593e-0x1);return;}}}const _0x5dded2=VisuMZ[_0x11827d(0xbb3)][_0x11827d(0xba1)][_0x11827d(0x85b)];let _0x140c9a=![];$gameSystem[_0x11827d(0xa92)]()?_0x140c9a=_0x5dded2[_0x11827d(0x1d8)]:_0x140c9a=_0x5dded2['FrontViewSelect'],this[_0x11827d(0x8e7)](_0x140c9a?this[_0x11827d(0x6b0)]()-0x1:0x0);},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x611)]=function(){const _0x446a4a=_0x5a8ff0;Window_Selectable[_0x446a4a(0xb6e)][_0x446a4a(0x611)][_0x446a4a(0x31b)](this);if(!this['enemy']())return;if(this[_0x446a4a(0xb15)]()[_0x446a4a(0x172)]())this[_0x446a4a(0xbc5)]=this[_0x446a4a(0xb15)]();if(this['enemy']()['isActor']())this[_0x446a4a(0x16b)]=this[_0x446a4a(0xb15)]();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5e3)]=function(_0x594211){const _0x1c50ea=_0x5a8ff0;Window_Selectable[_0x1c50ea(0xb6e)][_0x1c50ea(0x5e3)][_0x1c50ea(0x31b)](this,_0x594211),$gameTroop[_0x1c50ea(0x5e3)](this[_0x1c50ea(0xb15)]()),$gameParty[_0x1c50ea(0x5e3)](this[_0x1c50ea(0xb15)]());if(!this[_0x1c50ea(0xb15)]())return;if(this['meetsSelectFrontviewActorConditions']()){const _0x3c1527=SceneManager[_0x1c50ea(0x973)][_0x1c50ea(0xade)];this[_0x1c50ea(0xb15)]()[_0x1c50ea(0x34b)]()?_0x3c1527['select'](this[_0x1c50ea(0xb15)]()['index']()):_0x3c1527[_0x1c50ea(0xbbf)]();}},Window_BattleEnemy['prototype'][_0x5a8ff0(0x595)]=function(){const _0x4c5f0d=_0x5a8ff0;if(!this[_0x4c5f0d(0xb22)])return![];if($gameSystem[_0x4c5f0d(0xa92)]())return![];const _0x55146e=SceneManager[_0x4c5f0d(0x973)][_0x4c5f0d(0x483)](),_0x777991=['default',_0x4c5f0d(0x1e1),'xp',_0x4c5f0d(0x9e7),'border'];return _0x777991['includes'](_0x55146e);},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb34)]=function(){const _0x39ba2a=_0x5a8ff0,_0xcc6922=SceneManager[_0x39ba2a(0x973)][_0x39ba2a(0xade)];_0xcc6922[_0x39ba2a(0x996)](),_0xcc6922[_0x39ba2a(0x8ab)](!![]),_0xcc6922[_0x39ba2a(0x38a)](),_0xcc6922['deselect']();const _0x17f5d8=SceneManager[_0x39ba2a(0x973)][_0x39ba2a(0x483)](),_0xe4a9b=['xp',_0x39ba2a(0x9e7),'border'];if(_0xe4a9b[_0x39ba2a(0x597)](_0x17f5d8)){const _0x132796=SceneManager[_0x39ba2a(0x973)][_0x39ba2a(0x694)];_0x132796['scale']['y']=0x0;}},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x912)]=function(){const _0x3b4f37=_0x5a8ff0,_0x34e564=SceneManager[_0x3b4f37(0x973)][_0x3b4f37(0xade)];_0x34e564[_0x3b4f37(0xb7d)](),_0x34e564[_0x3b4f37(0x8ab)](![]),_0x34e564[_0x3b4f37(0xbbf)]();const _0x3f0634=SceneManager[_0x3b4f37(0x973)][_0x3b4f37(0x694)];_0x3f0634[_0x3b4f37(0x90a)]['y']=0x1;},Window_BattleEnemy['prototype'][_0x5a8ff0(0xb11)]=function(){const _0x148075=_0x5a8ff0,_0x38265c=BattleManager[_0x148075(0x778)]();if(_0x38265c)_0x38265c[_0x148075(0x742)](_0x148075(0x5be));this[_0x148075(0x185)]();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x181)]=function(){const _0x5d9772=_0x5a8ff0,_0x1f9744=BattleManager['inputtingAction']();if(_0x1f9744)_0x1f9744[_0x5d9772(0x742)](_0x5d9772(0xb70));this[_0x5d9772(0x185)]();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4eb)]=function(){return this['isActionSelectionValid']();},Window_BattleEnemy[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b9)]=function(){const _0x5b79b6=_0x5a8ff0,_0x43b6f7=BattleManager['inputtingAction']();if(!_0x43b6f7)return!![];if(!_0x43b6f7[_0x5b79b6(0x12a)]())return!![];const _0x1d74ea=this['enemy'](),_0x162a13=_0x43b6f7[_0x5b79b6(0x12a)]()[_0x5b79b6(0x494)];if(_0x43b6f7[_0x5b79b6(0x750)]()){if(_0x1d74ea===BattleManager[_0x5b79b6(0x749)]())return![];}return!![];},Window_BattleItem[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x597)]=function(_0x5b7459){const _0x39c521=_0x5a8ff0;if(!_0x5b7459)return![];return _0x5b7459[_0x39c521(0x158)]===0x0||_0x5b7459['occasion']===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x5a8ff0(0xb6e)]=Object['create'](Window_Base[_0x5a8ff0(0xb6e)]),Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x5a8ff0(0x4aa)]=function(_0x1fa51d){const _0x584717=_0x5a8ff0;Window_Base[_0x584717(0xb6e)]['initialize']['call'](this,_0x1fa51d),this[_0x584717(0x29c)](this[_0x584717(0x1ab)]()),this[_0x584717(0x38a)]();},Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1ab)]=function(){const _0x2696d5=_0x5a8ff0;return VisuMZ[_0x2696d5(0xbb3)][_0x2696d5(0xba1)]['AutoBattle'][_0x2696d5(0x990)];},Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x38a)]=function(){const _0x106b06=_0x5a8ff0;this[_0x106b06(0x916)][_0x106b06(0x9c3)]();const _0x51fe04=VisuMZ[_0x106b06(0xbb3)][_0x106b06(0xba1)][_0x106b06(0x4be)][_0x106b06(0x5b7)],_0x3141dc=_0x51fe04[_0x106b06(0x907)](this[_0x106b06(0x9df)](),this[_0x106b06(0xba2)]()),_0x2e92cc=this[_0x106b06(0xa17)](_0x3141dc)[_0x106b06(0x3fa)],_0x31bc12=Math[_0x106b06(0x87f)]((this[_0x106b06(0xb3f)]-_0x2e92cc)/0x2);this[_0x106b06(0x1a9)](_0x3141dc,_0x31bc12,0x0,_0x2e92cc);},Window_AutoBattleCancel['prototype'][_0x5a8ff0(0x9df)]=function(){const _0x31c832=_0x5a8ff0;return Imported[_0x31c832(0x610)]?TextManager[_0x31c832(0xa6c)]('ok'):VisuMZ[_0x31c832(0xbb3)][_0x31c832(0xba1)][_0x31c832(0x4be)][_0x31c832(0x7d2)];},Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xba2)]=function(){const _0x2af6d8=_0x5a8ff0;return Imported[_0x2af6d8(0x610)]?TextManager['getInputButtonString'](_0x2af6d8(0xb8c)):VisuMZ[_0x2af6d8(0xbb3)][_0x2af6d8(0xba1)]['AutoBattle']['AutoBattleCancel'];},Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x506716=_0x5a8ff0;Window_Base['prototype'][_0x506716(0x25f)][_0x506716(0x31b)](this),this['updateVisibility'](),this[_0x506716(0x3ab)]();},Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x12f)]=function(){const _0x5cf761=_0x5a8ff0;this[_0x5cf761(0xb22)]=BattleManager[_0x5cf761(0x671)];},Window_AutoBattleCancel[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3ab)]=function(){const _0x3c8a27=_0x5a8ff0;if(!BattleManager[_0x3c8a27(0x671)])return;(Input[_0x3c8a27(0xc05)]('ok')||Input['isTriggered']('cancel')||TouchInput['isClicked']()||TouchInput['isCancelled']())&&(SoundManager[_0x3c8a27(0x867)](),BattleManager['_autoBattle']=![],Input[_0x3c8a27(0x9c3)](),TouchInput[_0x3c8a27(0x9c3)]());};function Window_EnemyName(){const _0x577345=_0x5a8ff0;this[_0x577345(0x4aa)](...arguments);}Window_EnemyName[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Window_StatusBase[_0x5a8ff0(0xb6e)]),Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Window_EnemyName,Window_EnemyName[_0x5a8ff0(0xb6e)]['initialize']=function(_0x8730a5){const _0x5af456=_0x5a8ff0;this[_0x5af456(0x740)]=_0x8730a5,this['_text']='';const _0x1b47fd=new Rectangle(0x0,0x0,Graphics[_0x5af456(0x650)],this[_0x5af456(0x4ef)]()*0x4);Window_StatusBase[_0x5af456(0xb6e)][_0x5af456(0x4aa)][_0x5af456(0x31b)](this,_0x1b47fd),this[_0x5af456(0x29c)](0x2),this[_0x5af456(0x4d8)]=0x0;},Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa46)]=function(){this['padding']=0x0;},Window_EnemyName[_0x5a8ff0(0xb6e)]['enemy']=function(){return $gameTroop['members']()[this['_enemyID']];},Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x5159e7=_0x5a8ff0;Window_StatusBase[_0x5159e7(0xb6e)][_0x5159e7(0x25f)][_0x5159e7(0x31b)](this),this[_0x5159e7(0xb15)]()&&this[_0x5159e7(0xb15)]()['name']()!==this[_0x5159e7(0x116)]&&(this[_0x5159e7(0x116)]=this[_0x5159e7(0xb15)]()[_0x5159e7(0xa4b)](),this['refresh']()),this[_0x5159e7(0x22a)](),this[_0x5159e7(0x5f4)]();},Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x22a)]=function(){const _0x3fe041=_0x5a8ff0;if(!this[_0x3fe041(0xb15)]()){if(this[_0x3fe041(0x4d8)]>0x0)this[_0x3fe041(0x4d8)]-=0x10;}else{if(this['enemy']()[_0x3fe041(0x46a)]()){if(this[_0x3fe041(0x4d8)]>0x0)this[_0x3fe041(0x4d8)]-=0x10;}else{if(SceneManager['_scene'][_0x3fe041(0x161)]&&SceneManager['_scene'][_0x3fe041(0x161)][_0x3fe041(0x728)]&&SceneManager[_0x3fe041(0x973)]['_enemyWindow'][_0x3fe041(0xae6)][_0x3fe041(0x597)](this[_0x3fe041(0xb15)]())){if(this[_0x3fe041(0x4d8)]<0xff)this['contentsOpacity']+=0x10;}else this['contentsOpacity']>0x0&&(this[_0x3fe041(0x4d8)]-=0x10);}}},Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5f4)]=function(){const _0x4c3f30=_0x5a8ff0;if(!this[_0x4c3f30(0xb15)]())return;SceneManager[_0x4c3f30(0x8a2)]()?this['x']=Graphics[_0x4c3f30(0x650)]-this[_0x4c3f30(0xb15)]()[_0x4c3f30(0x407)]()[_0x4c3f30(0x7bd)]:this['x']=this[_0x4c3f30(0xb15)]()[_0x4c3f30(0x407)]()[_0x4c3f30(0x7bd)];this['x']-=Math[_0x4c3f30(0xb41)](this['width']/0x2),this['y']=this[_0x4c3f30(0xb15)]()[_0x4c3f30(0x407)]()['_baseY']-Math['round'](this[_0x4c3f30(0x4ef)]()*1.5);const _0x4b512d=VisuMZ[_0x4c3f30(0xbb3)][_0x4c3f30(0xba1)]['Enemy'];this['x']+=_0x4b512d[_0x4c3f30(0x47a)]||0x0,this['y']+=_0x4b512d[_0x4c3f30(0x2d0)]||0x0;},Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x876)]=function(){const _0x5b3fdf=_0x5a8ff0;Window_Base[_0x5b3fdf(0xb6e)][_0x5b3fdf(0x876)]['call'](this),this[_0x5b3fdf(0x916)]['fontSize']=VisuMZ[_0x5b3fdf(0xbb3)][_0x5b3fdf(0xba1)][_0x5b3fdf(0x85b)][_0x5b3fdf(0x78b)];},Window_EnemyName[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x38a)]=function(){const _0x2cb4f3=_0x5a8ff0;Window_StatusBase['prototype'][_0x2cb4f3(0x38a)]['call'](this),this['contents']['clear']();if(!this['enemy']())return;this[_0x2cb4f3(0x8c3)]();},Window_EnemyName[_0x5a8ff0(0xb6e)]['drawEnemyName']=function(){const _0x34ef2d=_0x5a8ff0;this['_text']=this[_0x34ef2d(0xb15)]()[_0x34ef2d(0xa4b)]();const _0x52ec90=this[_0x34ef2d(0xa17)](this[_0x34ef2d(0x116)])[_0x34ef2d(0x3fa)],_0x1f68a3=Math[_0x34ef2d(0xb41)]((this[_0x34ef2d(0xb3f)]-_0x52ec90)/0x2);this[_0x34ef2d(0x1a9)](this[_0x34ef2d(0x116)],_0x1f68a3,0x0,_0x52ec90+0x8);},Window_BattleLog['prototype'][_0x5a8ff0(0x2fe)]=function(){const _0x46925a=_0x5a8ff0;return VisuMZ[_0x46925a(0xbb3)]['Settings'][_0x46925a(0x10f)]['MaxLines'];},Window_BattleLog[_0x5a8ff0(0xb6e)]['messageSpeed']=function(){const _0x5d4586=_0x5a8ff0;return VisuMZ['BattleCore'][_0x5d4586(0xba1)]['BattleLog'][_0x5d4586(0x974)];},Window_BattleLog[_0x5a8ff0(0xb6e)]['backColor']=function(){const _0x215934=_0x5a8ff0;return VisuMZ[_0x215934(0xbb3)][_0x215934(0xba1)][_0x215934(0x10f)][_0x215934(0x43a)];},Window_BattleLog['prototype'][_0x5a8ff0(0x806)]=function(){return![];},Window_BattleLog[_0x5a8ff0(0xb6e)]['actionEffect']=function(_0x163001,_0x50901f){const _0x456fda=_0x5a8ff0;this['unshift'](_0x456fda(0x328)),BattleManager['invokeAction'](_0x163001,_0x50901f),this['callNextMethod']();},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x557)]=function(_0x739417,_0x44f844,_0x24ac7f){const _0x444cc1=_0x5a8ff0;this[_0x444cc1(0xada)](_0x444cc1(0x328)),BattleManager[_0x444cc1(0x44c)](_0x739417,_0x44f844,_0x24ac7f),this[_0x444cc1(0x7b2)]();},Window_BattleLog['prototype'][_0x5a8ff0(0x328)]=function(){const _0x215d15=_0x5a8ff0;this[_0x215d15(0x7b2)]();},Window_BattleLog['prototype'][_0x5a8ff0(0x23b)]=function(_0xfc311c){const _0xc40fdb=_0x5a8ff0,_0x2ac3ea=Array[_0xc40fdb(0xb6e)][_0xc40fdb(0x152)][_0xc40fdb(0x31b)](arguments,0x1),_0x3fb030={'name':_0xfc311c,'params':_0x2ac3ea},_0xe3b425=this[_0xc40fdb(0x2f3)]['map'](_0x40daf8=>_0x40daf8['name'])[_0xc40fdb(0x70f)]('actionSplicePoint');_0xe3b425>=0x0?this[_0xc40fdb(0x2f3)][_0xc40fdb(0x192)](_0xe3b425,0x0,_0x3fb030):this[_0xc40fdb(0x2f3)][_0xc40fdb(0x23b)](_0x3fb030);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xada)]=function(_0x30c377){const _0x47cb74=_0x5a8ff0,_0x40596b=Array[_0x47cb74(0xb6e)]['slice'][_0x47cb74(0x31b)](arguments,0x1);this[_0x47cb74(0x2f3)][_0x47cb74(0xada)]({'name':_0x30c377,'params':_0x40596b});},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x15b)]=function(){const _0x5841a1=_0x5a8ff0;if(!$gameTemp[_0x5841a1(0x834)]())return;console['log'](this[_0x5841a1(0x2f3)][_0x5841a1(0x5d7)](_0x2aeabb=>_0x2aeabb[_0x5841a1(0xa4b)])[_0x5841a1(0x674)]('\x0a'));},VisuMZ['BattleCore']['Window_BattleLog_refresh']=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x38a)],Window_BattleLog['prototype']['refresh']=function(){const _0x1ea5eb=_0x5a8ff0;this[_0x1ea5eb(0x738)]=!![];},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleLog_update']=Window_BattleLog[_0x5a8ff0(0xb6e)]['update'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x158e67=_0x5a8ff0;VisuMZ[_0x158e67(0xbb3)][_0x158e67(0x6ff)]['call'](this);if(this[_0x158e67(0x738)])this[_0x158e67(0x550)]();},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x550)]=function(){const _0x3c8011=_0x5a8ff0;this[_0x3c8011(0x738)]=![],VisuMZ['BattleCore'][_0x3c8011(0x17a)][_0x3c8011(0x31b)](this);},Window_BattleLog['prototype'][_0x5a8ff0(0xb08)]=function(_0x5cbf0e){const _0x2ce5f8=_0x5a8ff0;let _0x21db40=VisuMZ['BattleCore'][_0x2ce5f8(0xba1)][_0x2ce5f8(0x10f)][_0x2ce5f8(0x373)][_0x2ce5f8(0x44e)]()[_0x2ce5f8(0xb20)](),_0x45bae5=this[_0x2ce5f8(0xb4a)][_0x5cbf0e];if(_0x45bae5[_0x2ce5f8(0x6d8)](/<LEFT>/i))_0x21db40=_0x2ce5f8(0x814);else{if(_0x45bae5['match'](/<CENTER>/i))_0x21db40='center';else _0x45bae5[_0x2ce5f8(0x6d8)](/<RIGHT>/i)&&(_0x21db40=_0x2ce5f8(0x198));}_0x45bae5=_0x45bae5[_0x2ce5f8(0xa45)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x45bae5=_0x45bae5[_0x2ce5f8(0xa45)](/\\I\[0\]/gi,'');const _0x39546a=this['lineRect'](_0x5cbf0e);this[_0x2ce5f8(0x916)][_0x2ce5f8(0x8df)](_0x39546a['x'],_0x39546a['y'],_0x39546a[_0x2ce5f8(0x3fa)],_0x39546a[_0x2ce5f8(0x75c)]);const _0x5f1d45=this[_0x2ce5f8(0xa17)](_0x45bae5)['width'];let _0x3845ad=_0x39546a['x'];if(_0x21db40===_0x2ce5f8(0x5a5))_0x3845ad+=(_0x39546a[_0x2ce5f8(0x3fa)]-_0x5f1d45)/0x2;else _0x21db40===_0x2ce5f8(0x198)&&(_0x3845ad+=_0x39546a[_0x2ce5f8(0x3fa)]-_0x5f1d45);this[_0x2ce5f8(0x1a9)](_0x45bae5,_0x3845ad,_0x39546a['y'],_0x5f1d45+0x8);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xaaf)]=function(_0xf1b618){const _0xac71d9=_0x5a8ff0;this['_lines'][_0xac71d9(0x23b)](_0xf1b618),this['refresh'](),this[_0xac71d9(0x7b2)]();},Window_BattleLog[_0x5a8ff0(0xb6e)]['updateWaitMode']=function(){const _0x5b9745=_0x5a8ff0;let _0x121e74=![];switch(this[_0x5b9745(0x5d2)]){case _0x5b9745(0x70e):_0x121e74=this['_spriteset'][_0x5b9745(0x3cd)]();break;case _0x5b9745(0x61c):_0x121e74=this['_spriteset'][_0x5b9745(0x349)]();break;case _0x5b9745(0x5eb):_0x121e74=this[_0x5b9745(0x566)][_0x5b9745(0x969)]();break;case _0x5b9745(0x36b):_0x121e74=this['_spriteset'][_0x5b9745(0x27c)]();break;case _0x5b9745(0x581):_0x121e74=this[_0x5b9745(0x566)][_0x5b9745(0x14d)]();break;case'opacity':_0x121e74=this[_0x5b9745(0x566)][_0x5b9745(0x21a)]();break;}return!_0x121e74&&(this[_0x5b9745(0x5d2)]=''),_0x121e74;},Window_BattleLog['prototype'][_0x5a8ff0(0x385)]=function(){const _0x559b06=_0x5a8ff0;this[_0x559b06(0x66a)](_0x559b06(0x5eb));},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8f3)]=function(){const _0x5cf95a=_0x5a8ff0;this[_0x5cf95a(0x66a)](_0x5cf95a(0x36b));},Window_BattleLog[_0x5a8ff0(0xb6e)]['waitForJump']=function(){const _0x145dba=_0x5a8ff0;this[_0x145dba(0x66a)](_0x145dba(0x581));},Window_BattleLog[_0x5a8ff0(0xb6e)]['waitForOpacity']=function(){const _0xa5c0b8=_0x5a8ff0;this[_0xa5c0b8(0x66a)]('opacity');},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x77f)]=function(){const _0x127077=_0x5a8ff0,_0x1fc2c6=VisuMZ[_0x127077(0xbb3)][_0x127077(0xba1)]['BattleLog'];if(!_0x1fc2c6['StartTurnShow'])return;this[_0x127077(0x23b)]('addText',_0x1fc2c6[_0x127077(0xb4c)][_0x127077(0x907)]($gameTroop[_0x127077(0x503)]())),this[_0x127077(0x23b)]('waitCount',_0x1fc2c6[_0x127077(0x9d2)]),this[_0x127077(0x23b)]('clear');};var $subject,$action,$targets;Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x797)]=function(_0x401f4d,_0x4e1c0d,_0x41209e){const _0x5a04f0=_0x5a8ff0;$subject=_0x401f4d,$action=_0x4e1c0d,$targets=_0x41209e,this['isCustomActionSequence'](_0x4e1c0d)?BattleManager[_0x5a04f0(0x922)]():this[_0x5a04f0(0x836)](_0x401f4d,_0x4e1c0d,_0x41209e);},Window_BattleLog['prototype']['isCustomActionSequence']=function(_0x142abe){const _0x537e1a=_0x5a8ff0;if(!SceneManager[_0x537e1a(0x5c8)]())return![];if(!_0x142abe)return![];if(!_0x142abe[_0x537e1a(0x12a)]())return![];if(_0x142abe[_0x537e1a(0x12a)]()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x142abe[_0x537e1a(0x12a)]()))return!![];return![];},Window_BattleLog['prototype'][_0x5a8ff0(0x836)]=function(_0x536b41,_0x446087,_0x330a1b){const _0x20139c=_0x5a8ff0;this[_0x20139c(0x159)](_0x536b41,_0x446087,_0x330a1b),this[_0x20139c(0x4dc)](_0x536b41,_0x446087,_0x330a1b),this[_0x20139c(0x10d)](_0x536b41,_0x446087,_0x330a1b);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x708)]=function(_0x249ef8,_0x3d39e9){const _0x202f4a=_0x5a8ff0,_0x2edada=VisuMZ[_0x202f4a(0xbb3)][_0x202f4a(0xba1)][_0x202f4a(0x10f)];_0x2edada[_0x202f4a(0xa65)]&&this[_0x202f4a(0x23b)](_0x202f4a(0xaaf),_0x202f4a(0x45f)[_0x202f4a(0x907)](DataManager[_0x202f4a(0x866)](_0x3d39e9)));if(DataManager[_0x202f4a(0x2b4)](_0x3d39e9)){if(_0x2edada[_0x202f4a(0xf6)])this[_0x202f4a(0x4e7)](_0x3d39e9['message1'],_0x249ef8,_0x3d39e9);if(_0x2edada[_0x202f4a(0x256)])this[_0x202f4a(0x4e7)](_0x3d39e9[_0x202f4a(0x465)],_0x249ef8,_0x3d39e9);}else{if(_0x2edada[_0x202f4a(0x1a4)])this[_0x202f4a(0x4e7)](TextManager[_0x202f4a(0x306)],_0x249ef8,_0x3d39e9);}},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x159)]=function(_0x3577cd,_0x4a8abe,_0x388d61){const _0x2e2459=_0x5a8ff0,_0x438712=_0x4a8abe[_0x2e2459(0x12a)]();this[_0x2e2459(0x708)](_0x3577cd,_0x438712),this['push']('applyImmortal',_0x3577cd,_0x388d61,!![]),this[_0x2e2459(0x23b)](_0x2e2459(0x304),_0x3577cd,_0x4a8abe),this[_0x2e2459(0x23b)](_0x2e2459(0x3d1)),this[_0x2e2459(0x23b)](_0x2e2459(0x73f),_0x3577cd,_0x4a8abe),this[_0x2e2459(0x23b)]('waitForAnimation');},Window_BattleLog['prototype'][_0x5a8ff0(0x4dc)]=function(_0x287c8a,_0x264c9f,_0x1268ab){const _0xa2356f=_0x5a8ff0;if(this['isMeleeSingleTargetAction'](_0x264c9f))this['autoMeleeSingleTargetActionSet'](_0x287c8a,_0x264c9f,_0x1268ab);else{if(this[_0xa2356f(0x257)](_0x264c9f))this[_0xa2356f(0x1a0)](_0x287c8a,_0x264c9f,_0x1268ab);else _0x264c9f[_0xa2356f(0x1d6)]()?this[_0xa2356f(0x965)](_0x287c8a,_0x264c9f,_0x1268ab):this[_0xa2356f(0x6aa)](_0x287c8a,_0x264c9f,_0x1268ab);}},Window_BattleLog['prototype'][_0x5a8ff0(0x361)]=function(_0x45c553,_0x33b7e8,_0x42e3dd,_0x3721bb){const _0x4b1ae1=_0x5a8ff0;if(_0x33b7e8){const _0x4b157b=_0x45c553[_0x4b1ae1(0x407)]();this[_0x4b1ae1(0x23b)](_0x4b1ae1(0x8b4),[_0x45c553],_0x42e3dd,_0x3721bb),this[_0x4b1ae1(0x23b)](_0x4b1ae1(0x343),_0x45c553,_0x4b157b[_0x4b1ae1(0x603)],_0x4b157b[_0x4b1ae1(0x27a)],_0x3721bb,![],_0x4b1ae1(0x65b)),this[_0x4b1ae1(0x23b)](_0x4b1ae1(0x5bd),[_0x45c553],_0x4b1ae1(0x85f)),this['push'](_0x4b1ae1(0x3d1)),this[_0x4b1ae1(0x23b)]('requestMotion',[_0x45c553],_0x4b1ae1(0xa50));}},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x426)]=function(_0x2b7d3b){const _0x41474a=_0x5a8ff0;if(!_0x2b7d3b[_0x41474a(0x191)]())return![];if(!_0x2b7d3b[_0x41474a(0x651)]())return![];if(!_0x2b7d3b[_0x41474a(0x606)]())return![];return VisuMZ[_0x41474a(0xbb3)][_0x41474a(0xba1)][_0x41474a(0x828)][_0x41474a(0x47c)];},Window_BattleLog['prototype'][_0x5a8ff0(0x724)]=function(_0x5d6544,_0x537222,_0x72b189){const _0x48ef74=_0x5a8ff0,_0xf337f4=_0x5d6544[_0x48ef74(0x798)]()[_0x48ef74(0xb69)]<0x2,_0x46e2e0=0x14,_0x4cc82c=0x30;let _0x27549e=!![];_0x72b189[_0x48ef74(0x6b9)]>0x0&&_0x5d6544['isActor']()===_0x72b189[0x0][_0x48ef74(0x34b)]()&&(_0x27549e=![]);_0xf337f4&&_0x27549e&&(this[_0x48ef74(0x23b)](_0x48ef74(0x8b4),[_0x5d6544],_0x4cc82c,_0x46e2e0),this[_0x48ef74(0x23b)](_0x48ef74(0x142),_0x5d6544,_0x72b189,'front\x20base',_0x46e2e0,!![],_0x48ef74(0x65b),!![]),this['push'](_0x48ef74(0x5bd),[_0x5d6544],_0x48ef74(0xa50)),this[_0x48ef74(0x23b)](_0x48ef74(0x3d1)));let _0x3444af=_0x537222[_0x48ef74(0x701)]()?this[_0x48ef74(0x590)](_0x5d6544):0x1;for(let _0x358847=0x0;_0x358847<_0x3444af;_0x358847++){_0x537222[_0x48ef74(0x701)]()&&_0x5d6544['isActor']()&&this[_0x48ef74(0x23b)](_0x48ef74(0x725),_0x5d6544,_0x358847),_0x537222[_0x48ef74(0x12a)]()[_0x48ef74(0x759)]<0x0?this[_0x48ef74(0x965)](_0x5d6544,_0x537222,_0x72b189):this['wholeActionSet'](_0x5d6544,_0x537222,_0x72b189);}_0x537222[_0x48ef74(0x701)]()&&_0x5d6544[_0x48ef74(0x34b)]()&&this[_0x48ef74(0x23b)]('clearActiveWeaponSet',_0x5d6544),this['push'](_0x48ef74(0x2ac),_0x5d6544,_0x72b189,![]),this['addMeleeReturnActionSet'](_0x5d6544,_0xf337f4,_0x4cc82c,_0x46e2e0);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x257)]=function(_0x337550){const _0x6501e9=_0x5a8ff0;if(!_0x337550['isPhysical']())return![];if(!_0x337550['isForAll']())return![];if(!_0x337550[_0x6501e9(0x606)]())return![];return VisuMZ[_0x6501e9(0xbb3)][_0x6501e9(0xba1)][_0x6501e9(0x828)][_0x6501e9(0xaea)];},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x1a0)]=function(_0x565486,_0x17ea40,_0x277922){const _0x4b942b=_0x5a8ff0,_0x548e02=_0x565486[_0x4b942b(0x798)]()[_0x4b942b(0xb69)]<0x2,_0x5c2dc7=0x14,_0xc2f3cc=0x30;if(_0x548e02){this[_0x4b942b(0x23b)](_0x4b942b(0x8b4),[_0x565486],_0xc2f3cc,_0x5c2dc7);const _0x5b804f=_0x277922[_0x4b942b(0x6b9)]>0x1?'front\x20center':'front\x20base';this[_0x4b942b(0x23b)]('performMoveToTargets',_0x565486,_0x277922,_0x5b804f,_0x5c2dc7,!![],_0x4b942b(0x65b),!![]),this[_0x4b942b(0x23b)](_0x4b942b(0x5bd),[_0x565486],'walk'),this[_0x4b942b(0x23b)](_0x4b942b(0x3d1));}let _0x4e3bdf=_0x17ea40[_0x4b942b(0x701)]()?this[_0x4b942b(0x590)](_0x565486):0x1;for(let _0x262d4c=0x0;_0x262d4c<_0x4e3bdf;_0x262d4c++){_0x17ea40[_0x4b942b(0x701)]()&&_0x565486[_0x4b942b(0x34b)]()&&this['push'](_0x4b942b(0x725),_0x565486,_0x262d4c),this['wholeActionSet'](_0x565486,_0x17ea40,_0x277922);}_0x17ea40['isAttack']()&&_0x565486['isActor']()&&this[_0x4b942b(0x23b)]('clearActiveWeaponSet',_0x565486),this['push']('applyImmortal',_0x565486,_0x277922,![]),this['addMeleeReturnActionSet'](_0x565486,_0x548e02,_0xc2f3cc,_0x5c2dc7);},Window_BattleLog['prototype']['targetActionSet']=function(_0x30fdcf,_0x3a6d19,_0x3f2ab7){const _0x3a3d8f=_0x5a8ff0,_0x4f11c5=_0x3a6d19[_0x3a3d8f(0x12a)]();for(const _0x5c7346 of _0x3f2ab7){if(!_0x5c7346)continue;this[_0x3a3d8f(0x23b)](_0x3a3d8f(0x7e7),_0x30fdcf,_0x3a6d19),this[_0x3a3d8f(0x23b)](_0x3a3d8f(0x340),Sprite_Battler['_motionSpeed']),this['push'](_0x3a3d8f(0x412),_0x30fdcf,[_0x5c7346],_0x4f11c5['animationId']),this[_0x3a3d8f(0x23b)](_0x3a3d8f(0x340),0x18),this['push'](_0x3a3d8f(0x820),_0x30fdcf,_0x5c7346);}},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6aa)]=function(_0x135cba,_0x4d7519,_0x4d3258){const _0x38f996=_0x5a8ff0,_0xb4a72b=_0x4d7519[_0x38f996(0x12a)]();let _0x3b5362=_0x4d7519['isAttack']()?0x1+_0x135cba[_0x38f996(0x476)]():0x1;while(_0x3b5362--){this['push'](_0x38f996(0x7e7),_0x135cba,_0x4d7519),this[_0x38f996(0x23b)](_0x38f996(0x340),Sprite_Battler[_0x38f996(0x87a)]),this[_0x38f996(0x23b)]('showAnimation',_0x135cba,_0x4d3258['clone'](),_0xb4a72b['animationId']),this[_0x38f996(0x23b)](_0x38f996(0x385));}for(const _0x29c91c of _0x4d3258){if(!_0x29c91c)continue;this[_0x38f996(0x23b)]('actionEffect',_0x135cba,_0x29c91c);}},Window_BattleLog['prototype'][_0x5a8ff0(0x10d)]=function(_0x2d0cca,_0x4ce2cb,_0x1f8a5b){const _0x485f90=_0x5a8ff0,_0x347867=_0x4ce2cb[_0x485f90(0x12a)]();this[_0x485f90(0x23b)]('applyImmortal',_0x2d0cca,_0x1f8a5b,![]),this[_0x485f90(0x23b)](_0x485f90(0x80c)),this['push'](_0x485f90(0x4f1)),this[_0x485f90(0x23b)]('clear'),this[_0x485f90(0x23b)](_0x485f90(0x9c6),_0x2d0cca),this[_0x485f90(0x23b)](_0x485f90(0x3d1));},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4ed)]=function(_0x35a226){$subject=null,$action=null,$targets=[];},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x5a8ff0(0xb6e)]['displayCurrentState'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3c6)]=function(_0x174627){const _0x5349e4=_0x5a8ff0;if(!VisuMZ[_0x5349e4(0xbb3)]['Settings'][_0x5349e4(0x10f)][_0x5349e4(0x6bb)])return;VisuMZ[_0x5349e4(0xbb3)][_0x5349e4(0x9c7)]['call'](this,_0x174627);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x450)]=function(_0x183697){const _0x27aa46=_0x5a8ff0;this['push'](_0x27aa46(0x9d7),_0x183697);VisuMZ[_0x27aa46(0xbb3)][_0x27aa46(0xba1)]['ActionSequence'][_0x27aa46(0xc0c)]&&this['push'](_0x27aa46(0x412),_0x183697,[BattleManager[_0x27aa46(0xbee)]],-0x1);if(!VisuMZ[_0x27aa46(0xbb3)]['Settings'][_0x27aa46(0x10f)][_0x27aa46(0x19f)])return;this[_0x27aa46(0x23b)](_0x27aa46(0xaaf),TextManager[_0x27aa46(0x6e7)]['format'](_0x183697[_0x27aa46(0xa4b)]()));const _0x43360b=VisuMZ[_0x27aa46(0xbb3)][_0x27aa46(0xba1)][_0x27aa46(0x10f)][_0x27aa46(0x998)]??0x0;if(_0x43360b>0x0)this[_0x27aa46(0x23b)](_0x27aa46(0x340),_0x43360b);;},Window_BattleLog[_0x5a8ff0(0xb6e)]['displayReflection']=function(_0x205223){const _0x277cb7=_0x5a8ff0;this[_0x277cb7(0x23b)](_0x277cb7(0x645),_0x205223);if(!VisuMZ['BattleCore'][_0x277cb7(0xba1)][_0x277cb7(0x10f)]['ShowReflect'])return;this[_0x277cb7(0x23b)]('addText',TextManager['magicReflection'][_0x277cb7(0x907)](_0x205223['name']()));const _0x5d40e9=VisuMZ[_0x277cb7(0xbb3)][_0x277cb7(0xba1)][_0x277cb7(0x10f)][_0x277cb7(0x3e7)]??0x0;if(_0x5d40e9>0x0)this[_0x277cb7(0x23b)](_0x277cb7(0x340),_0x5d40e9);;},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x817)]=function(_0x47a261,_0x2cb420){const _0x36f28e=_0x5a8ff0;if(VisuMZ[_0x36f28e(0xbb3)][_0x36f28e(0xba1)][_0x36f28e(0x828)][_0x36f28e(0x86a)]){const _0x3b5fdf=_0x2cb420[_0x36f28e(0x12a)]();this[_0x36f28e(0x23b)](_0x36f28e(0x412),_0x47a261,[_0x47a261],_0x3b5fdf[_0x36f28e(0x759)]);}},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x546)]=function(_0x1c99e6,_0x5be7b8){const _0x280c7d=_0x5a8ff0;this[_0x280c7d(0x23b)](_0x280c7d(0x82f),_0x1c99e6,_0x5be7b8);if(!VisuMZ[_0x280c7d(0xbb3)]['Settings'][_0x280c7d(0x10f)][_0x280c7d(0x857)])return;const _0x1d28e5=_0x1c99e6[_0x280c7d(0xa4b)](),_0x41759b=TextManager[_0x280c7d(0x1c3)][_0x280c7d(0x907)](_0x1d28e5,_0x5be7b8[_0x280c7d(0xa4b)]());this['push'](_0x280c7d(0xaaf),_0x41759b);const _0x2bef7f=VisuMZ[_0x280c7d(0xbb3)]['Settings'][_0x280c7d(0x10f)][_0x280c7d(0x59a)]??0x0;if(_0x2bef7f>0x0)this[_0x280c7d(0x23b)](_0x280c7d(0x340),_0x2bef7f);;},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleLog_displayActionResults']=Window_BattleLog['prototype'][_0x5a8ff0(0x276)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x276)]=function(_0x44e471,_0x1d80fc){const _0x3c11a3=_0x5a8ff0;VisuMZ[_0x3c11a3(0xbb3)]['Window_BattleLog_displayActionResults']['call'](this,_0x44e471,_0x1d80fc);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x338)]=Window_BattleLog['prototype']['displayFailure'],Window_BattleLog['prototype'][_0x5a8ff0(0xb44)]=function(_0x2a9dd7){const _0x3f19f0=_0x5a8ff0;if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x3f19f0(0x729)])return;VisuMZ[_0x3f19f0(0xbb3)]['Window_BattleLog_displayFailure'][_0x3f19f0(0x31b)](this,_0x2a9dd7);},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb49)]=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x61a)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x61a)]=function(_0x50c5b3){const _0x22b2f7=_0x5a8ff0;if(!VisuMZ[_0x22b2f7(0xbb3)]['Settings']['BattleLog'][_0x22b2f7(0xa7f)])return;VisuMZ[_0x22b2f7(0xbb3)]['Window_BattleLog_displayCritical'][_0x22b2f7(0x31b)](this,_0x50c5b3);},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleLog_displayMiss']=Window_BattleLog[_0x5a8ff0(0xb6e)]['displayMiss'],Window_BattleLog['prototype'][_0x5a8ff0(0x2a5)]=function(_0x44754f){const _0x26b801=_0x5a8ff0;!VisuMZ[_0x26b801(0xbb3)][_0x26b801(0xba1)]['BattleLog'][_0x26b801(0x518)]?this[_0x26b801(0x23b)]('performMiss',_0x44754f):VisuMZ['BattleCore'][_0x26b801(0x283)][_0x26b801(0x31b)](this,_0x44754f);},VisuMZ['BattleCore']['Window_BattleLog_displayEvasion']=Window_BattleLog['prototype'][_0x5a8ff0(0xfc)],Window_BattleLog[_0x5a8ff0(0xb6e)]['displayEvasion']=function(_0x53e849){const _0x489fa5=_0x5a8ff0;!VisuMZ[_0x489fa5(0xbb3)]['Settings']['BattleLog'][_0x489fa5(0x518)]?_0x53e849[_0x489fa5(0xa41)]()['physical']?this[_0x489fa5(0x23b)](_0x489fa5(0xa0a),_0x53e849):this[_0x489fa5(0x23b)]('performMagicEvasion',_0x53e849):VisuMZ[_0x489fa5(0xbb3)]['Window_BattleLog_displayEvasion'][_0x489fa5(0x31b)](this,_0x53e849);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x177)]=function(_0x342652){const _0x2b90cd=_0x5a8ff0;_0x342652['result']()[_0x2b90cd(0x6fa)]&&(_0x342652[_0x2b90cd(0xa04)]=0x0,_0x342652[_0x2b90cd(0xa41)]()[_0x2b90cd(0x710)]>0x0&&!_0x342652['result']()[_0x2b90cd(0x188)]&&(_0x342652['_lastHpDamage']=_0x342652[_0x2b90cd(0xa41)]()[_0x2b90cd(0x710)],this[_0x2b90cd(0x23b)](_0x2b90cd(0x3bc),_0x342652)),_0x342652[_0x2b90cd(0xa41)]()[_0x2b90cd(0x710)]<0x0&&this['push']('performRecovery',_0x342652),VisuMZ[_0x2b90cd(0xbb3)][_0x2b90cd(0xba1)][_0x2b90cd(0x10f)][_0x2b90cd(0xacd)]&&this[_0x2b90cd(0x23b)](_0x2b90cd(0xaaf),this['makeHpDamageText'](_0x342652)));},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x137)]=Window_BattleLog['prototype'][_0x5a8ff0(0x562)],Window_BattleLog['prototype']['displayMpDamage']=function(_0x302be8){const _0x31e942=_0x5a8ff0;if(!VisuMZ[_0x31e942(0xbb3)][_0x31e942(0xba1)]['BattleLog'][_0x31e942(0x381)])return;VisuMZ['BattleCore'][_0x31e942(0x137)][_0x31e942(0x31b)](this,_0x302be8);},VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x67f)],Window_BattleLog['prototype'][_0x5a8ff0(0x67f)]=function(_0x21928a){const _0x45f554=_0x5a8ff0;if(!VisuMZ[_0x45f554(0xbb3)][_0x45f554(0xba1)][_0x45f554(0x10f)]['ShowTpDmg'])return;VisuMZ[_0x45f554(0xbb3)]['Window_BattleLog_displayTpDamage'][_0x45f554(0x31b)](this,_0x21928a);},Window_BattleLog[_0x5a8ff0(0xb6e)]['displayAffectedStatus']=function(_0x2d4d91){const _0x3b9679=_0x5a8ff0;_0x2d4d91['result']()[_0x3b9679(0x2b5)]()&&(this['push']('pushBaseLine'),this[_0x3b9679(0xb8b)](_0x2d4d91),this[_0x3b9679(0x929)](_0x2d4d91),this[_0x3b9679(0x23b)]('waitForNewLine'));},Window_BattleLog['prototype'][_0x5a8ff0(0x2a2)]=function(_0x1371f7){const _0x4395b1=_0x5a8ff0,_0x4d8990=_0x1371f7[_0x4395b1(0xa41)](),_0x51cde4=_0x4d8990[_0x4395b1(0x264)]();for(const _0x504a5b of _0x51cde4){const _0x3793fc=_0x1371f7['isActor']()?_0x504a5b[_0x4395b1(0x682)]:_0x504a5b['message2'];_0x3793fc&&VisuMZ[_0x4395b1(0xbb3)][_0x4395b1(0xba1)][_0x4395b1(0x10f)]['ShowAddedState']&&(this[_0x4395b1(0x23b)](_0x4395b1(0x139)),this[_0x4395b1(0x23b)](_0x4395b1(0x99a)),this[_0x4395b1(0x23b)](_0x4395b1(0xaaf),_0x3793fc[_0x4395b1(0x907)](_0x1371f7[_0x4395b1(0xa4b)]())),this[_0x4395b1(0x23b)]('wait')),_0x504a5b['id']===_0x1371f7['deathStateId']()&&this[_0x4395b1(0x23b)]('performCollapse',_0x1371f7);}},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x94a)]=function(_0x17c24b){const _0x42766a=_0x5a8ff0;if(!VisuMZ[_0x42766a(0xbb3)][_0x42766a(0xba1)]['BattleLog']['ShowRemovedState'])return;const _0x43bd5b=_0x17c24b[_0x42766a(0xa41)](),_0x5efd28=_0x43bd5b[_0x42766a(0x663)]();for(const _0x5b8dbd of _0x5efd28){_0x5b8dbd['message4']&&(this[_0x42766a(0x23b)](_0x42766a(0x139)),this[_0x42766a(0x23b)](_0x42766a(0x99a)),this[_0x42766a(0x23b)](_0x42766a(0xaaf),_0x5b8dbd[_0x42766a(0x42d)][_0x42766a(0x907)](_0x17c24b[_0x42766a(0xa4b)]())),this['push']('wait'));}},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x929)]=function(_0x21702){const _0x112c0f=_0x5a8ff0,_0x4c4eba=VisuMZ['BattleCore'][_0x112c0f(0xba1)][_0x112c0f(0x10f)],_0x8d212a=_0x21702[_0x112c0f(0xa41)]();if(_0x4c4eba[_0x112c0f(0x915)])this['displayBuffs'](_0x21702,_0x8d212a['addedBuffs'],TextManager[_0x112c0f(0x388)]);if(_0x4c4eba[_0x112c0f(0x110)])this[_0x112c0f(0x80e)](_0x21702,_0x8d212a[_0x112c0f(0x5bf)],TextManager[_0x112c0f(0xb42)]);if(_0x4c4eba['ShowRemovedBuff'])this[_0x112c0f(0x80e)](_0x21702,_0x8d212a[_0x112c0f(0x90c)],TextManager['buffRemove']);},Window_BattleLog['prototype']['displayBuffs']=function(_0x12d3ff,_0x5aef24,_0x235512){const _0x3104f3=_0x5a8ff0;for(const _0x4b9f52 of _0x5aef24){const _0x4ac8cd=_0x235512[_0x3104f3(0x907)](_0x12d3ff['name'](),TextManager[_0x3104f3(0xa9c)](_0x4b9f52));this['push'](_0x3104f3(0x139)),this[_0x3104f3(0x23b)](_0x3104f3(0x99a)),this['push']('addText',_0x4ac8cd),this[_0x3104f3(0x23b)](_0x3104f3(0x914));}},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x243)]=Window_BattleLog['prototype'][_0x5a8ff0(0x9c3)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9c3)]=function(){const _0x3c82fe=_0x5a8ff0;VisuMZ[_0x3c82fe(0xbb3)][_0x3c82fe(0x243)][_0x3c82fe(0x31b)](this),this[_0x3c82fe(0x7b2)]();},VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x99a)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x99a)]=function(){const _0x405260=_0x5a8ff0;VisuMZ[_0x405260(0xbb3)][_0x405260(0x7ee)][_0x405260(0x31b)](this),this[_0x405260(0x7b2)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x984)]=Window_BattleLog[_0x5a8ff0(0xb6e)]['popBaseLine'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x139)]=function(){const _0x2b71e3=_0x5a8ff0;VisuMZ[_0x2b71e3(0xbb3)][_0x2b71e3(0x984)][_0x2b71e3(0x31b)](this),this[_0x2b71e3(0x550)](),this['callNextMethod']();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x822)]=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9f8)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9f8)]=function(_0xad7697){const _0xed6054=_0x5a8ff0;VisuMZ[_0xed6054(0xbb3)]['Window_BattleLog_popupDamage'][_0xed6054(0x31b)](this,_0xad7697),this[_0xed6054(0x7b2)]();},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x80c)]=function(){const _0x20efb0=_0x5a8ff0;let _0x123258=0x0;this[_0x20efb0(0x9c8)][_0x20efb0(0x6b9)]>0x0&&(_0x123258=this[_0x20efb0(0x9c8)][this['_baseLineStack'][_0x20efb0(0x6b9)]-0x1]),this[_0x20efb0(0xb4a)][_0x20efb0(0x6b9)]>_0x123258?this[_0x20efb0(0x914)]():this[_0x20efb0(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xa15)]=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x304)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x304)]=function(_0x18191a,_0x561dd4){const _0x378155=_0x5a8ff0;VisuMZ['BattleCore']['Window_BattleLog_performActionStart']['call'](this,_0x18191a,_0x561dd4),this[_0x378155(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleLog_performAction']=Window_BattleLog['prototype']['performAction'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7e7)]=function(_0x1b17a1,_0xf3162d){const _0x293ce1=_0x5a8ff0;VisuMZ[_0x293ce1(0xbb3)]['Window_BattleLog_performAction'][_0x293ce1(0x31b)](this,_0x1b17a1,_0xf3162d),this[_0x293ce1(0x7b2)]();},VisuMZ['BattleCore'][_0x5a8ff0(0x612)]=Window_BattleLog[_0x5a8ff0(0xb6e)]['performActionEnd'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9c6)]=function(_0x43bb4f){const _0x1ec51d=_0x5a8ff0;VisuMZ[_0x1ec51d(0xbb3)]['Window_BattleLog_performActionEnd'][_0x1ec51d(0x31b)](this,_0x43bb4f);for(const _0x2aaa75 of BattleManager[_0x1ec51d(0x33a)]()){if(!_0x2aaa75)continue;if(_0x2aaa75['isDead']())continue;_0x2aaa75[_0x1ec51d(0x7ac)]();}this['callNextMethod']();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x86e)]=Window_BattleLog['prototype'][_0x5a8ff0(0x3bc)],Window_BattleLog['prototype'][_0x5a8ff0(0x3bc)]=function(_0xce102f){const _0x2db2aa=_0x5a8ff0;VisuMZ[_0x2db2aa(0xbb3)][_0x2db2aa(0x86e)][_0x2db2aa(0x31b)](this,_0xce102f),this['callNextMethod']();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb31)]=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7d5)],Window_BattleLog[_0x5a8ff0(0xb6e)]['performMiss']=function(_0x305aec){const _0x3c6e2e=_0x5a8ff0;VisuMZ[_0x3c6e2e(0xbb3)][_0x3c6e2e(0xb31)]['call'](this,_0x305aec),this[_0x3c6e2e(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x3dc)]=Window_BattleLog[_0x5a8ff0(0xb6e)]['performRecovery'],Window_BattleLog['prototype'][_0x5a8ff0(0x760)]=function(_0x3268c4){const _0x2b1826=_0x5a8ff0;VisuMZ[_0x2b1826(0xbb3)][_0x2b1826(0x3dc)]['call'](this,_0x3268c4),this[_0x2b1826(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x6f2)]=Window_BattleLog[_0x5a8ff0(0xb6e)]['performEvasion'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa0a)]=function(_0x4e5a3c){const _0x5401bc=_0x5a8ff0;VisuMZ[_0x5401bc(0xbb3)][_0x5401bc(0x6f2)][_0x5401bc(0x31b)](this,_0x4e5a3c),this[_0x5401bc(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xbd4)]=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x911)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x911)]=function(_0x42b416){const _0x50e636=_0x5a8ff0;VisuMZ[_0x50e636(0xbb3)][_0x50e636(0xbd4)][_0x50e636(0x31b)](this,_0x42b416),this[_0x50e636(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x1a1)]=Window_BattleLog[_0x5a8ff0(0xb6e)]['performCounter'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9d7)]=function(_0x4005f7){const _0xc67a91=_0x5a8ff0;VisuMZ['BattleCore']['Window_BattleLog_performCounter'][_0xc67a91(0x31b)](this,_0x4005f7),this[_0xc67a91(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)]['Window_BattleLog_performReflection']=Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x645)],Window_BattleLog['prototype']['performReflection']=function(_0x23e3ab){const _0x37f0de=_0x5a8ff0;VisuMZ[_0x37f0de(0xbb3)]['Window_BattleLog_performReflection'][_0x37f0de(0x31b)](this,_0x23e3ab),this[_0x37f0de(0x7b2)]();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype'][_0x5a8ff0(0x82f)],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x82f)]=function(_0x4c5283,_0x4affff){const _0x3f259e=_0x5a8ff0;VisuMZ[_0x3f259e(0xbb3)][_0x3f259e(0x5c7)]['call'](this,_0x4c5283,_0x4affff),this[_0x3f259e(0x7b2)]();},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xb99)]=Window_BattleLog[_0x5a8ff0(0xb6e)]['performCollapse'],Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x13b)]=function(_0x159a05){const _0x318a2e=_0x5a8ff0;VisuMZ['BattleCore']['Window_BattleLog_performCollapse'][_0x318a2e(0x31b)](this,_0x159a05),this[_0x318a2e(0x7b2)]();},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x73f)]=function(_0x4947c9,_0x42af17){const _0x49e24f=_0x5a8ff0;_0x4947c9[_0x49e24f(0x73f)](_0x42af17),this[_0x49e24f(0x7b2)]();},Window_BattleLog[_0x5a8ff0(0xb6e)]['showEnemyAttackAnimation']=function(_0x284bcf,_0x394fdd){const _0x4c0621=_0x5a8ff0,_0x55ba09=_0x284bcf[_0x4c0621(0xbfe)]();_0x55ba09<=0x0?SoundManager[_0x4c0621(0x940)]():this['showNormalAnimation'](_0x394fdd,_0x55ba09);},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2ac)]=function(_0x1d55ef,_0x345b8a,_0xcb7b3){const _0x42f2ad=_0x5a8ff0,_0x46fb10=[_0x1d55ef][_0x42f2ad(0xb5d)](_0x345b8a);for(const _0x387c78 of _0x46fb10){if(!_0x387c78)continue;_0x387c78[_0x42f2ad(0x48b)](_0xcb7b3);}this[_0x42f2ad(0x7b2)]();},Window_BattleLog['prototype'][_0x5a8ff0(0x340)]=function(_0x36c102){const _0x1967f3=_0x5a8ff0;this[_0x1967f3(0x7c6)]=_0x36c102;},Window_BattleLog['prototype'][_0x5a8ff0(0x5bd)]=function(_0x4d5370,_0x52234f){const _0x36a314=_0x5a8ff0;for(const _0x4b7a8a of _0x4d5370){if(!_0x4b7a8a)continue;_0x4b7a8a['requestMotion'](_0x52234f);}this[_0x36a314(0x7b2)]();},Window_BattleLog['prototype']['performMoveToPoint']=function(_0x220abf,_0xd7752c,_0x4fdbef,_0x5b497a,_0x335835,_0x318ceb){const _0x387196=_0x5a8ff0;_0x220abf[_0x387196(0x3cf)](_0xd7752c,_0x4fdbef,_0x5b497a,_0x335835,_0x318ceb,-0x1),this[_0x387196(0x7b2)]();},Window_BattleLog[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x142)]=function(_0x34daed,_0x87b833,_0xfdbe89,_0x522c16,_0xeec3d,_0xc845ad,_0x38fdcb){const _0x170372=_0x5a8ff0,_0x497abd=Math[_0x170372(0x60d)](..._0x87b833[_0x170372(0x5d7)](_0x1950d5=>_0x1950d5['battler']()[_0x170372(0x7bd)]-_0x1950d5[_0x170372(0x407)]()[_0x170372(0x787)]()/0x2)),_0x145fd2=Math[_0x170372(0x6dd)](..._0x87b833['map'](_0x3eed13=>_0x3eed13[_0x170372(0x407)]()['_baseX']+_0x3eed13[_0x170372(0x407)]()[_0x170372(0x787)]()/0x2)),_0xa25467=Math[_0x170372(0x60d)](..._0x87b833[_0x170372(0x5d7)](_0x5c85a8=>_0x5c85a8[_0x170372(0x407)]()[_0x170372(0x4b6)]-_0x5c85a8[_0x170372(0x407)]()[_0x170372(0xb45)]())),_0xa722d2=Math[_0x170372(0x6dd)](..._0x87b833[_0x170372(0x5d7)](_0x2ab43a=>_0x2ab43a[_0x170372(0x407)]()['_baseY'])),_0x56cacc=_0x87b833['filter'](_0x50108d=>_0x50108d[_0x170372(0x34b)]())[_0x170372(0x6b9)],_0x57f841=_0x87b833[_0x170372(0x6e0)](_0x271d5e=>_0x271d5e['isEnemy']())[_0x170372(0x6b9)];let _0x49a4c=0x0,_0x4d1176=0x0;if(_0xfdbe89[_0x170372(0x6d8)](/front/i))_0x49a4c=_0x56cacc>=_0x57f841?_0x497abd:_0x145fd2;else{if(_0xfdbe89[_0x170372(0x6d8)](/middle/i))_0x49a4c=(_0x497abd+_0x145fd2)/0x2,_0x38fdcb=-0x1;else _0xfdbe89[_0x170372(0x6d8)](/back/i)&&(_0x49a4c=_0x56cacc>=_0x57f841?_0x145fd2:_0x497abd);}if(_0xfdbe89[_0x170372(0x6d8)](/head/i))_0x4d1176=_0xa25467;else{if(_0xfdbe89[_0x170372(0x6d8)](/center/i)){_0x4d1176=(_0xa25467+_0xa722d2)/0x2;if(_0x34daed[_0x170372(0x407)]())_0x4d1176+=_0x34daed['battler']()[_0x170372(0x75c)]/0x2;}else _0xfdbe89[_0x170372(0x6d8)](/base/i)&&(_0x4d1176=_0xa722d2);}_0x34daed[_0x170372(0x3cf)](_0x49a4c,_0x4d1176,_0x522c16,_0xeec3d,_0xc845ad,_0x38fdcb),this[_0x170372(0x7b2)]();},Window_BattleLog['prototype'][_0x5a8ff0(0x8b4)]=function(_0x473c9c,_0x430115,_0x1c0515){const _0x3d8f06=_0x5a8ff0;for(const _0x4194f4 of _0x473c9c){if(!_0x4194f4)continue;_0x4194f4[_0x3d8f06(0x138)](_0x430115,_0x1c0515);}this[_0x3d8f06(0x7b2)]();};function Window_BattleMultiTarget(){const _0x4a29bd=_0x5a8ff0;this[_0x4a29bd(0x4aa)](...arguments);}Window_BattleMultiTarget[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Window_Command[_0x5a8ff0(0xb6e)]),Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Window_BattleMultiTarget,VisuMZ[_0x5a8ff0(0xbb3)]['Settings']['MultiTarget']=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x67e)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)]['MultiTarget'][_0x5a8ff0(0x2d4)]??0x118,Window_BattleMultiTarget[_0x5a8ff0(0x4af)]=VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x67e)][_0x5a8ff0(0x108)]??0x2,Window_BattleMultiTarget[_0x5a8ff0(0x712)]=VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0x67e)][_0x5a8ff0(0x891)]??!![],Window_BattleMultiTarget[_0x5a8ff0(0x9e2)]=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)]['MultiTarget']['AllActorsText']??_0x5a8ff0(0x17e),Window_BattleMultiTarget[_0x5a8ff0(0x356)]=VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x67e)][_0x5a8ff0(0x404)]??_0x5a8ff0(0x9e5),Window_BattleMultiTarget[_0x5a8ff0(0xb4b)]=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)]['MultiTarget'][_0x5a8ff0(0x854)]??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x67e)][_0x5a8ff0(0x94b)]??0x0,Window_BattleMultiTarget[_0x5a8ff0(0x925)]=VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x67e)][_0x5a8ff0(0x69f)]??0x0,Window_BattleMultiTarget[_0x5a8ff0(0x934)]=VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0x67e)][_0x5a8ff0(0x706)]??0x0,Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(_0x4b40db,_0x3b1ae1){const _0x378b4e=_0x5a8ff0;this[_0x378b4e(0x4a5)]=_0x3b1ae1,Window_Command[_0x378b4e(0xb6e)][_0x378b4e(0x4aa)][_0x378b4e(0x31b)](this,_0x4b40db),this['setBackgroundType'](Window_BattleMultiTarget[_0x378b4e(0x4af)]),this['deactivate'](),this['hide'](),this[_0x378b4e(0xbbf)]();},Window_BattleMultiTarget['prototype']['forActor']=function(){const _0x2d0da8=_0x5a8ff0;return this[_0x2d0da8(0x4a5)];},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)]['makeCommandList']=function(){const _0x469d8d=_0x5a8ff0;let _0x9f2a4d=this[_0x469d8d(0x805)]()?Window_BattleMultiTarget[_0x469d8d(0x9e2)]:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported[_0x469d8d(0x610)]&&Window_BattleMultiTarget[_0x469d8d(0x712)]){this['_buttonKey']=this[_0x469d8d(0x805)]()?_0x469d8d(0x72f):_0x469d8d(0x370),this[_0x469d8d(0x8cb)]=TextManager['getInputButtonString'](this[_0x469d8d(0x955)]);const _0x5b30c5=VisuMZ[_0x469d8d(0x208)]['Settings'][_0x469d8d(0xa75)]['TextFmt'];_0x9f2a4d=_0x5b30c5[_0x469d8d(0x907)](this[_0x469d8d(0x8cb)],_0x9f2a4d);}this[_0x469d8d(0x141)](_0x9f2a4d,_0x469d8d(0x5e5));},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)]['drawItem']=function(_0x56ecc2){const _0x405917=_0x5a8ff0,_0x598e75=this[_0x405917(0x1c2)](_0x56ecc2);this[_0x405917(0x766)](),this[_0x405917(0x4bd)](this[_0x405917(0x63d)](_0x56ecc2));const _0x1ae26e=this[_0x405917(0x3d8)](_0x56ecc2),_0x575b6a=this[_0x405917(0xa17)](_0x1ae26e)['width'],_0x468e4a=_0x598e75['x']+Math[_0x405917(0x87f)]((_0x598e75['width']-_0x575b6a)/0x2);this[_0x405917(0x1a9)](_0x1ae26e,_0x468e4a,_0x598e75['y'],_0x598e75['width']);},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x207f3f=_0x5a8ff0;Window_Command[_0x207f3f(0xb6e)][_0x207f3f(0x25f)][_0x207f3f(0x31b)](this),this[_0x207f3f(0x12f)](),this[_0x207f3f(0x6cd)]();},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x12f)]=function(){const _0x4ebf17=_0x5a8ff0;this['visible']=this[_0x4ebf17(0x250)]();},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x250)]=function(){const _0x4af804=_0x5a8ff0,_0x103444=BattleManager[_0x4af804(0x778)](),_0x2c1320=_0x103444&&_0x103444[_0x4af804(0x5a9)]();if(!_0x2c1320)return![];const _0x4cab30=SceneManager[_0x4af804(0x973)];if(this[_0x4af804(0x805)]()){if(_0x4cab30[_0x4af804(0xade)]['active']&&_0x4cab30[_0x4af804(0xade)][_0x4af804(0x25e)][_0x4af804(0x72f)])return!![];if(_0x4cab30['_enemyWindow'][_0x4af804(0x728)]&&_0x4cab30[_0x4af804(0x161)][_0x4af804(0x25e)][_0x4af804(0x72f)])return!![];}else{if(_0x4cab30['_enemyWindow'][_0x4af804(0x728)]&&_0x4cab30[_0x4af804(0x161)]['_handlers'][_0x4af804(0x370)])return!![];}return![];},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6cd)]=function(){const _0xf3da5d=_0x5a8ff0;if(!Imported[_0xf3da5d(0x610)])return;this['_buttonText']!==TextManager[_0xf3da5d(0xa6c)](this['_buttonKey'])&&this[_0xf3da5d(0x38a)]();},Window_BattleMultiTarget[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5d3)]=function(){const _0x3fba5e=_0x5a8ff0;if(this[_0x3fba5e(0xb22)]&&TouchInput[_0x3fba5e(0xbbc)]()){const _0x4b490d=this['hitIndex']();if(_0x4b490d>=0x0){const _0x5d5fef=this['forActor']()?_0x3fba5e(0x72f):_0x3fba5e(0x370);Input['virtualClick'](_0x5d5fef);}}};function Window_DamageCounter(){this['initialize'](...arguments);}Window_DamageCounter[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Window_Base[_0x5a8ff0(0xb6e)]),Window_DamageCounter['prototype']['constructor']=Window_DamageCounter,Window_DamageCounter[_0x5a8ff0(0xa78)]={'enabled':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x448)]??!![],'customFontFace':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x393)]??'','textAlign':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)]['ComboWindow']['TextAlign']??_0x5a8ff0(0x814),'hitsDmgFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)]['hitsDmgFmt']??_0x5a8ff0(0xbc2),'hitsHealFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)]['hitsHealFmt']??_0x5a8ff0(0x1df),'totalDmgFmt':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x6be)]??'\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','totalHealFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)]['ComboWindow'][_0x5a8ff0(0x756)]??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x1e7)]??-0x2,'fadeShiftY':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x1e2)]??0x0,'positionOffsetX':VisuMZ['BattleCore']['Settings'][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x7ed)]??0x0,'positionOffsetY':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)]['PosOffsetY']??0x0,'updateDuration':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x7d8)]??0x14,'minimumStayDuration':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x512)]??0x28,'minimumHits':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)]['ComboWindow'][_0x5a8ff0(0x765)]??0x1,'opacitySpeed':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0x8f5)][_0x5a8ff0(0x821)]??0x10},Window_DamageCounter['prototype'][_0x5a8ff0(0x4aa)]=function(_0x190d67){const _0xccc873=_0x5a8ff0;this[_0xccc873(0x730)]=0x0,Window_Base[_0xccc873(0xb6e)][_0xccc873(0x4aa)]['call'](this,_0x190d67),this[_0xccc873(0x880)]=_0x190d67['x'],this['_targetY']=_0x190d67['y'],this[_0xccc873(0xb07)](),this[_0xccc873(0x29c)](0x2);},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb07)]=function(){const _0x2b48d6=_0x5a8ff0;this[_0x2b48d6(0x214)]=0x0,this[_0x2b48d6(0x2d8)]=0x0,this[_0x2b48d6(0x59e)]=0x0,this[_0x2b48d6(0x7b4)]=0x0,this[_0x2b48d6(0xbab)]=0x0;},Window_DamageCounter['prototype']['resetFontSettings']=function(){const _0xb14abf=_0x5a8ff0;Window_Base[_0xb14abf(0xb6e)][_0xb14abf(0x876)]['call'](this);const _0x2740c6=Window_DamageCounter[_0xb14abf(0xa78)];_0x2740c6[_0xb14abf(0x920)]?this[_0xb14abf(0x916)][_0xb14abf(0x625)]=_0x2740c6[_0xb14abf(0x920)]:this[_0xb14abf(0x916)][_0xb14abf(0x625)]=$gameSystem[_0xb14abf(0x72a)]();};var $comboWindowReset=function(){const _0x3c2d00=_0x5a8ff0;if(!SceneManager[_0x3c2d00(0x5c8)]())return;const _0x278cbc=SceneManager[_0x3c2d00(0x973)][_0x3c2d00(0x7a0)];if(_0x278cbc)_0x278cbc['resetCounter']();};Window_DamageCounter['prototype']['increaseHits']=function(_0x48fa02){const _0x54972e=_0x5a8ff0;this[_0x54972e(0x7b4)]+=Math[_0x54972e(0xb41)](_0x48fa02);const _0x2870bc=Window_DamageCounter[_0x54972e(0xa78)];this[_0x54972e(0x214)]=_0x2870bc[_0x54972e(0x7d8)],this[_0x54972e(0x7b4)]>=_0x2870bc[_0x54972e(0x765)]&&(this[_0x54972e(0x730)]=_0x2870bc[_0x54972e(0x512)]);};var $comboWindowIncreaseHits=function(_0x22583d){const _0x708f6c=_0x5a8ff0;if(!SceneManager[_0x708f6c(0x5c8)]())return;const _0x56076c=SceneManager[_0x708f6c(0x973)][_0x708f6c(0x7a0)];if(_0x56076c)_0x56076c[_0x708f6c(0x7b9)](_0x22583d);};Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa84)]=function(_0x3c23a9){const _0x4373f7=_0x5a8ff0;this['_targetDamage']+=Math[_0x4373f7(0xb41)](_0x3c23a9);const _0xf7fcef=Window_DamageCounter['SETTINGS'];this[_0x4373f7(0x214)]=_0xf7fcef[_0x4373f7(0x7d8)],this[_0x4373f7(0x7b4)]>=_0xf7fcef['minimumHits']&&(this[_0x4373f7(0x730)]=_0xf7fcef[_0x4373f7(0x512)]);};var $comboWindowIncreaseDamage=function(_0x370a47){const _0x2869cd=_0x5a8ff0;if(!SceneManager[_0x2869cd(0x5c8)]())return;const _0x458cf3=SceneManager[_0x2869cd(0x973)][_0x2869cd(0x7a0)];if(_0x458cf3)_0x458cf3[_0x2869cd(0xa84)](_0x370a47);},$comboWindowIncreaseHealing=function(_0x32961f){const _0x3b8ad9=_0x5a8ff0;if(!SceneManager[_0x3b8ad9(0x5c8)]())return;const _0x1eeb41=SceneManager['_scene'][_0x3b8ad9(0x7a0)];if(_0x1eeb41)_0x1eeb41[_0x3b8ad9(0xa84)](-_0x32961f);};VisuMZ['BattleCore'][_0x5a8ff0(0x11e)]=Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x179)],Scene_Battle[_0x5a8ff0(0xb6e)]['createAllWindows']=function(){const _0x1c2d85=_0x5a8ff0;this[_0x1c2d85(0x359)](),VisuMZ[_0x1c2d85(0xbb3)]['Scene_Battle_createAllWindows_ComboWindow'][_0x1c2d85(0x31b)](this);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x359)]=function(){const _0x3cc3d8=_0x5a8ff0;if(!Window_DamageCounter[_0x3cc3d8(0xa78)][_0x3cc3d8(0x789)])return;const _0x227bd0=this['damageCounterWindowRect'](),_0xa6d666=new Window_DamageCounter(_0x227bd0);this[_0x3cc3d8(0x3e2)](_0xa6d666),this['_damageCounterWindow']=_0xa6d666;},Scene_Battle['prototype'][_0x5a8ff0(0x17f)]=function(){const _0x1aa582=_0x5a8ff0;if(VisuMZ[_0x1aa582(0xbb3)][_0x1aa582(0xba1)][_0x1aa582(0x8f5)]['ComboWindow_RectJS'])return VisuMZ['BattleCore'][_0x1aa582(0xba1)]['ComboWindow'][_0x1aa582(0xab2)][_0x1aa582(0x31b)](this);const _0xc6602c=Math['ceil'](Graphics['width']/0x4),_0x4604a7=this[_0x1aa582(0x58b)](0x2,!![]),_0x5e2a89=0x0+this[_0x1aa582(0x823)](),_0x1034a2=Math[_0x1aa582(0xb41)](Graphics[_0x1aa582(0x830)]*0x1/0x3)+this[_0x1aa582(0x91d)]();return new Rectangle(_0x5e2a89,_0x1034a2,_0xc6602c,_0x4604a7);},Scene_Battle[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x823)]=function(){const _0x5e525a=_0x5a8ff0;return Window_DamageCounter['SETTINGS'][_0x5e525a(0x126)];},Scene_Battle['prototype'][_0x5a8ff0(0x91d)]=function(){const _0x37841e=_0x5a8ff0;return Window_DamageCounter[_0x37841e(0xa78)][_0x37841e(0x938)];},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x426bb7=_0x5a8ff0;Window_Base[_0x426bb7(0xb6e)][_0x426bb7(0x25f)][_0x426bb7(0x31b)](this),this[_0x426bb7(0x15e)](),this[_0x426bb7(0x22a)]();},Window_DamageCounter['prototype'][_0x5a8ff0(0x15e)]=function(){const _0x24f1e5=_0x5a8ff0;if(this[_0x24f1e5(0x214)]<=0x0)return;const _0x55bc9a=this[_0x24f1e5(0x214)];this['_totalHits']=this[_0x24f1e5(0x7b4)],this[_0x24f1e5(0x59e)]=(this['_totalDamage']*(_0x55bc9a-0x1)+this[_0x24f1e5(0xbab)])/_0x55bc9a,this[_0x24f1e5(0x214)]--,this[_0x24f1e5(0x214)]<=0x0&&(this[_0x24f1e5(0x2d8)]=this[_0x24f1e5(0x7b4)],this[_0x24f1e5(0x59e)]=this[_0x24f1e5(0xbab)]),this['refresh']();},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x22a)]=function(){const _0x308d3f=_0x5a8ff0,_0x44e58e=Window_DamageCounter[_0x308d3f(0xa78)],_0x3c19c4=this[_0x308d3f(0x250)](),_0x46985b=_0x44e58e[_0x308d3f(0x821)]||0x1;if(_0x3c19c4&&this['contentsOpacity']<0xff)this[_0x308d3f(0x4d8)]+=_0x46985b;else!_0x3c19c4&&this[_0x308d3f(0x4d8)]>0x0&&(this[_0x308d3f(0x4d8)]-=_0x46985b,this['x']+=_0x44e58e['fadeShiftX']||0x0,this['y']+=_0x44e58e['fadeShiftY']||0x0);},Window_DamageCounter['prototype'][_0x5a8ff0(0x250)]=function(){const _0x2d3075=_0x5a8ff0,_0x5729c7=Window_DamageCounter[_0x2d3075(0xa78)];if(this[_0x2d3075(0x7b4)]>=_0x5729c7[_0x2d3075(0x765)])return!![];if(this[_0x2d3075(0x730)]-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x5a8ff0(0x56d)]=Game_Action[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x659)],Game_Action['prototype'][_0x5a8ff0(0x659)]=function(_0x5eeafb,_0x118be9){const _0x321674=_0x5a8ff0;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x118be9),VisuMZ[_0x321674(0xbb3)][_0x321674(0x56d)][_0x321674(0x31b)](this,_0x5eeafb,_0x118be9);},VisuMZ[_0x5a8ff0(0xbb3)]['BattleManager_endAction_ComboWindow']=BattleManager[_0x5a8ff0(0x4ed)],BattleManager[_0x5a8ff0(0x4ed)]=function(){const _0x4f18a9=_0x5a8ff0;$comboWindowReset(),VisuMZ['BattleCore'][_0x4f18a9(0xa55)][_0x4f18a9(0x31b)](this);},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x38a)]=function(){const _0x5a6d2e=_0x5a8ff0;this[_0x5a6d2e(0x916)][_0x5a6d2e(0x9c3)](),this[_0x5a6d2e(0x175)](),this['x']=this[_0x5a6d2e(0x880)],this['y']=this[_0x5a6d2e(0xbb8)];},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x7e3)]=function(){const _0xbe4c73=_0x5a8ff0,_0x3f354e=Window_DamageCounter['SETTINGS'];return _0x3f354e[_0xbe4c73(0x3a5)]||_0xbe4c73(0x814);},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x33f)]=function(){const _0x579063=_0x5a8ff0,_0x3140be=Window_DamageCounter[_0x579063(0xa78)];let _0x4be620=this['_totalDamage']>=0x0?_0x3140be[_0x579063(0x402)]:_0x3140be['hitsHealFmt'];return _0x4be620[_0x579063(0x907)](Math['abs'](Math[_0x579063(0x447)](this[_0x579063(0x2d8)])));},Window_DamageCounter['prototype']['damageText']=function(){const _0x4beddf=_0x5a8ff0,_0x473628=Window_DamageCounter['SETTINGS'];let _0x294970=this[_0x4beddf(0x59e)]>=0x0?_0x473628[_0x4beddf(0x6be)]:_0x473628[_0x4beddf(0x756)];return _0x294970[_0x4beddf(0x907)](Math[_0x4beddf(0x444)](Math[_0x4beddf(0xb41)](this['_totalDamage'])));},Window_DamageCounter[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x175)]=function(){const _0x25972b=_0x5a8ff0;if(VisuMZ[_0x25972b(0xbb3)]['Settings'][_0x25972b(0x8f5)]['ComboWindow_DrawJS'])return VisuMZ[_0x25972b(0xbb3)][_0x25972b(0xba1)]['ComboWindow'][_0x25972b(0x792)][_0x25972b(0x31b)](this);let _0x16b5d4=0x0,_0x21f2a4=0x0;const _0x2b728e=this[_0x25972b(0x33f)](),_0x58b93b=this[_0x25972b(0xa17)](_0x2b728e);if(this['textAlignment']()===_0x25972b(0x198))_0x16b5d4=this[_0x25972b(0xb3f)]-this['itemPadding']()-_0x58b93b[_0x25972b(0x3fa)];else this[_0x25972b(0x7e3)]()===_0x25972b(0x5a5)?_0x16b5d4=Math[_0x25972b(0x87f)]((this[_0x25972b(0xb3f)]-_0x58b93b[_0x25972b(0x3fa)])/0x2):_0x16b5d4=this[_0x25972b(0x282)]();this[_0x25972b(0x1a9)](_0x2b728e,_0x16b5d4,_0x21f2a4),_0x21f2a4+=Math[_0x25972b(0x447)](this[_0x25972b(0x4ef)]()*0x2/0x3);const _0x22387c=this[_0x25972b(0x941)](),_0x245ec8=this[_0x25972b(0xa17)](_0x22387c);if(this[_0x25972b(0x7e3)]()==='right')_0x16b5d4=this['innerWidth']-this[_0x25972b(0x282)]()-_0x245ec8['width'];else this[_0x25972b(0x7e3)]()===_0x25972b(0x5a5)?_0x16b5d4=Math['floor']((this[_0x25972b(0xb3f)]-_0x245ec8[_0x25972b(0x3fa)])/0x2):_0x16b5d4=this[_0x25972b(0x282)]();this[_0x25972b(0x1a9)](_0x22387c,_0x16b5d4,_0x21f2a4);};function _0x4eb7(_0xc1d4a2,_0x53a02e){const _0x53b83f=_0x53b8();return _0x4eb7=function(_0x4eb72a,_0x402b92){_0x4eb72a=_0x4eb72a-0xf2;let _0x2199cf=_0x53b83f[_0x4eb72a];return _0x2199cf;},_0x4eb7(_0xc1d4a2,_0x53a02e);}function Window_InBattleStatus(){const _0xe42c86=_0x5a8ff0;this[_0xe42c86(0x4aa)](...arguments);}Window_InBattleStatus['prototype']=Object[_0x5a8ff0(0x8d3)](Window_StatusBase[_0x5a8ff0(0xb6e)]),Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18c)]=Window_InBattleStatus,Window_InBattleStatus['SETTINGS']={'bgType':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x9f1)]??0x0,'statusGraphic':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x781)]??'face','statusHelpDesc':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x5de)]??_0x5a8ff0(0x536),'pageButtons':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x189)]??!![],'pageButtonPosition':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x908)]??_0x5a8ff0(0x814),'pageOffsetX':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x6ed)]??0x0,'pageOffsetY':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0xaac)]??0x0,'buffValueFmt':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)]['buffValueFmt']??_0x5a8ff0(0x3a4),'debuffValueFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)]['debuffValueFmt']??_0x5a8ff0(0xbd0),'enemyStatus':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x80a)]??!![],'enemyShowLevel':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x5f7)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ['BattleCore']['Settings'][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x500)]??'???','enemyShowParametersAlways':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0xa3c)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x4b7)]??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x468)]??!![]},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x4aa)]=function(_0x2d6ed5){const _0x54ef9c=_0x5a8ff0;Window_StatusBase[_0x54ef9c(0xb6e)][_0x54ef9c(0x4aa)][_0x54ef9c(0x31b)](this,_0x2d6ed5),this[_0x54ef9c(0x29c)](Window_InBattleStatus[_0x54ef9c(0xa78)][_0x54ef9c(0x1ab)]),this[_0x54ef9c(0xb90)](),this[_0x54ef9c(0x183)](),this[_0x54ef9c(0x32c)]();},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x2b2)]=function(_0x321c77){const _0x1a1100=_0x5a8ff0;this['_battler']=_0x321c77,this['refresh'](),this['_statesWindow']&&this[_0x1a1100(0x56c)][_0x1a1100(0x2b2)](_0x321c77);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6f6)]=function(){const _0x2f34be=_0x5a8ff0;Window_StatusBase[_0x2f34be(0xb6e)]['open'][_0x2f34be(0x31b)](this);if(this[_0x2f34be(0x56c)])this[_0x2f34be(0x56c)][_0x2f34be(0x6f6)]();this[_0x2f34be(0x6fe)](),Imported[_0x2f34be(0x65e)]&&SceneManager[_0x2f34be(0x870)](null);},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['close']=function(){const _0x1ab7d6=_0x5a8ff0;Window_StatusBase[_0x1ab7d6(0xb6e)][_0x1ab7d6(0x69e)]['call'](this);if(this['_statesWindow'])this['_statesWindow'][_0x1ab7d6(0x69e)]();},Window_InBattleStatus['prototype'][_0x5a8ff0(0x573)]=function(_0x5dc017){this['_returnWindow']=_0x5dc017;},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x18a)]=function(){const _0x2ce6b7=_0x5a8ff0;return this[_0x2ce6b7(0x555)]||SceneManager[_0x2ce6b7(0x973)][_0x2ce6b7(0x773)];},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x294)]=function(){const _0x548993=_0x5a8ff0;Window_StatusBase[_0x548993(0xb6e)][_0x548993(0x294)]['call'](this),this[_0x548993(0xa2c)]();},Window_InBattleStatus['prototype'][_0x5a8ff0(0xa2c)]=function(){const _0x1abd34=_0x5a8ff0;for(const _0x508c17 of $gameParty[_0x1abd34(0x2c0)]()){if(!_0x508c17)continue;_0x508c17[_0x1abd34(0xa81)]()&&ImageManager[_0x1abd34(0x53a)](_0x508c17['characterName']()),_0x508c17[_0x1abd34(0x30f)]()&&ImageManager[_0x1abd34(0x3b2)](_0x508c17['battlerName']()),Imported[_0x1abd34(0xc12)]&&_0x508c17['getMenuImage']()&&ImageManager[_0x1abd34(0x97e)](_0x508c17[_0x1abd34(0x3e8)]());}},Window_InBattleStatus['prototype'][_0x5a8ff0(0xb90)]=function(){const _0x396af6=_0x5a8ff0;this[_0x396af6(0x8f4)]=new Sprite(),this[_0x396af6(0x8f4)][_0x396af6(0x50e)]['x']=0.5,this[_0x396af6(0x8f4)][_0x396af6(0x50e)]['y']=0x1,this['addChild'](this['_enemySprite']);},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['createStatesWindow']=function(){const _0x26ab3b=_0x5a8ff0,_0x4cb1fb=this[_0x26ab3b(0x30d)](),_0xd9a35f=new Window_InBattleStatusStates(_0x4cb1fb);this['addChild'](_0xd9a35f),_0xd9a35f[_0x26ab3b(0x1d0)](SceneManager['_scene'][_0x26ab3b(0xa6d)]),this[_0x26ab3b(0x56c)]=_0xd9a35f;},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x30d)]=function(){const _0x567f8b=_0x5a8ff0,_0x548206=Window_InBattleStatusStates[_0x567f8b(0xa78)]['maxWidth'],_0x2656e6=Math[_0x567f8b(0x60d)](_0x548206,Math[_0x567f8b(0x87f)](this[_0x567f8b(0x3fa)]/0x2)),_0x31d5f8=Graphics[_0x567f8b(0x650)]>0x44c?this[_0x567f8b(0x75c)]:this[_0x567f8b(0x4ef)]()*0x4+this['padding']*0x2,_0x2913d7=this['width']-_0x2656e6,_0x14b767=this[_0x567f8b(0x75c)]-_0x31d5f8;return new Rectangle(_0x2913d7,_0x14b767,_0x2656e6,_0x31d5f8);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x32c)]=function(){const _0x5dd131=_0x5a8ff0;if(!ConfigManager['touchUI'])return;if(!Window_InBattleStatus[_0x5dd131(0xa78)][_0x5dd131(0x189)])return;this['_pageupButton']=new Sprite_Button(_0x5dd131(0x370)),this[_0x5dd131(0xae7)]['x']=this['pageButtonX']()+Window_InBattleStatus[_0x5dd131(0xa78)]['pageOffsetX'],this['_pageupButton']['y']=this[_0x5dd131(0xb7c)]()+Window_InBattleStatus['SETTINGS']['pageOffsetY'];const _0x1d556a=this['_pageupButton']['x']+this[_0x5dd131(0xae7)][_0x5dd131(0x3fa)];this[_0x5dd131(0x9bc)]=new Sprite_Button(_0x5dd131(0x72f)),this[_0x5dd131(0x9bc)]['x']=_0x1d556a+0x4,this[_0x5dd131(0x9bc)]['y']=this['_pageupButton']['y'],this[_0x5dd131(0xa57)](this[_0x5dd131(0xae7)]),this[_0x5dd131(0xa57)](this[_0x5dd131(0x9bc)]),this[_0x5dd131(0xae7)]['setClickHandler'](this['previousActor'][_0x5dd131(0x164)](this)),this[_0x5dd131(0x9bc)][_0x5dd131(0x33b)](this['nextActor'][_0x5dd131(0x164)](this));},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb29)]=function(){const _0xee7c46=_0x5a8ff0;if(Graphics[_0xee7c46(0x650)]>0x44c&&Graphics['boxHeight']>0x2bc){if(Window_InBattleStatus[_0xee7c46(0xa78)]['pageButtonPosition']==='left'){let _0x1b1fc8=Math[_0xee7c46(0x447)]((-this['x']-0x64)/0x2);if(_0x1b1fc8>=-0x64)_0x1b1fc8=this['padding'];return _0x1b1fc8;}else{const _0x25dbe8=Graphics[_0xee7c46(0x650)]-this['x']-this[_0xee7c46(0x3fa)];let _0x4265c4=Math[_0xee7c46(0x87f)]((_0x25dbe8-0x64)/0x2)+this[_0xee7c46(0x3fa)];return _0x4265c4;}}else return this[_0xee7c46(0x3fa)]-0x64-this['padding']/0x2;},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['pageButtonY']=function(){const _0x6bedfc=_0x5a8ff0;return Graphics[_0x6bedfc(0x650)]>0x44c&&Graphics[_0x6bedfc(0x830)]>0x2bc?this[_0x6bedfc(0x75c)]-0x30-this['padding']:0x30+this[_0x6bedfc(0x1d3)];},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x201)]=function(){const _0x257e06=_0x5a8ff0;let _0x19202f=this[_0x257e06(0x99f)]();if(_0x19202f[_0x257e06(0x6b9)]<=0x1&&!Window_InBattleStatus[_0x257e06(0xa78)][_0x257e06(0x80a)])return;let _0x28b1dc=_0x19202f['indexOf'](this[_0x257e06(0x1aa)]);_0x28b1dc--;_0x28b1dc<0x0&&(Window_InBattleStatus['SETTINGS']['enemyStatus']&&(_0x19202f=this[_0x257e06(0x99f)](!![])),_0x28b1dc=_0x19202f[_0x257e06(0x6b9)]-0x1);const _0x22a830=_0x19202f[_0x28b1dc];this[_0x257e06(0x2b2)](_0x22a830),SoundManager[_0x257e06(0xb50)]();},Window_InBattleStatus['prototype']['nextActor']=function(){const _0xc852d7=_0x5a8ff0;let _0x2b095c=this[_0xc852d7(0x99f)]();if(_0x2b095c['length']<=0x1&&!Window_InBattleStatus[_0xc852d7(0xa78)]['enemyStatus'])return;let _0x287ba5=_0x2b095c[_0xc852d7(0x70f)](this[_0xc852d7(0x1aa)]);_0x287ba5++;_0x287ba5>=_0x2b095c[_0xc852d7(0x6b9)]&&(Window_InBattleStatus['SETTINGS']['enemyStatus']&&(_0x2b095c=this[_0xc852d7(0x99f)](!![])),_0x287ba5=0x0);const _0x5b6c06=_0x2b095c[_0x287ba5];this['setBattler'](_0x5b6c06),SoundManager[_0xc852d7(0xb50)]();},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x99f)]=function(_0xee32e9){const _0x1c5f63=_0x5a8ff0;let _0x5bf95d=[];const _0x4d9908=_0xee32e9?this['_battler'][_0x1c5f63(0xa3a)]():this[_0x1c5f63(0x1aa)][_0x1c5f63(0x6b8)]();return _0x4d9908===$gameParty?_0x5bf95d=$gameParty[_0x1c5f63(0x211)]():_0x5bf95d=$gameTroop[_0x1c5f63(0x4c4)](),_0x5bf95d['remove'](null);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x25f)]=function(){const _0x33b289=_0x5a8ff0;Window_Base[_0x33b289(0xb6e)][_0x33b289(0x25f)][_0x33b289(0x31b)](this),this['processHandling']();},Window_InBattleStatus['prototype']['processHandling']=function(){const _0x12994=_0x5a8ff0;if(this[_0x12994(0xbc9)]()){if(this[_0x12994(0x95f)]())return this[_0x12994(0xba0)]();if(Input[_0x12994(0x4b5)](_0x12994(0x198)))return this[_0x12994(0x4a1)]();if(Input[_0x12994(0x4b5)](_0x12994(0x814)))return this[_0x12994(0x201)]();}},SoundManager[_0x5a8ff0(0xb50)]=function(){const _0x3cf4d1=_0x5a8ff0;this[_0x3cf4d1(0x9c1)](0x0);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbc9)]=function(){const _0xbeed3=_0x5a8ff0;return this[_0xbeed3(0x7b3)]()&&this[_0xbeed3(0xb22)];},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x95f)]=function(){const _0x34d23f=_0x5a8ff0;if(Input['isTriggered'](_0x34d23f(0xb8c)))return!![];if(TouchInput[_0x34d23f(0x576)]())return!![];return![];},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['processCancel']=function(){const _0x1c424d=_0x5a8ff0;SoundManager[_0x1c424d(0x867)](),this[_0x1c424d(0x988)](),this[_0x1c424d(0x56c)]&&(this[_0x1c424d(0x56c)][_0x1c424d(0xbbf)](),this[_0x1c424d(0x56c)]['deactivate']()),SceneManager[_0x1c424d(0x973)][_0x1c424d(0x568)]();},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6fe)]=function(){const _0x39e9e4=_0x5a8ff0;if(!this[_0x39e9e4(0xae7)])return;if(!this[_0x39e9e4(0x9bc)])return;const _0x1b6e69=$gameParty['battleMembers']()[_0x39e9e4(0x6b9)]>0x0||Window_InBattleStatus['SETTINGS'][_0x39e9e4(0x80a)];this[_0x39e9e4(0xae7)][_0x39e9e4(0xb22)]=_0x1b6e69,this[_0x39e9e4(0x9bc)][_0x39e9e4(0xb22)]=_0x1b6e69;},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x38a)]=function(){const _0x50c36a=_0x5a8ff0;Window_StatusBase[_0x50c36a(0xb6e)][_0x50c36a(0x38a)][_0x50c36a(0x31b)](this);if(this[_0x50c36a(0x8f4)])this[_0x50c36a(0x8f4)][_0x50c36a(0xb7d)]();this[_0x50c36a(0x916)]['clear'](),this['contentsBack'][_0x50c36a(0x9c3)]();if(!this[_0x50c36a(0x1aa)])return;this['drawBattlerData']();},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x734)]=function(){const _0x2faa31=_0x5a8ff0;if(VisuMZ[_0x2faa31(0xbb3)][_0x2faa31(0xba1)]['InBattleStatus']['StatusWindow_DrawJS'])return VisuMZ['BattleCore']['Settings'][_0x2faa31(0xbc8)]['StatusWindow_DrawJS']['call'](this);{const _0x46ea6b=this['colSpacing']()/0x2,_0x44ab27=ImageManager[_0x2faa31(0x87c)],_0x517316=_0x44ab27/0x2-this['lineHeight']()*1.5;this['drawActorGraphic'](this[_0x2faa31(0x1aa)],_0x46ea6b+0x1,0x0,ImageManager['faceWidth'],_0x44ab27),this[_0x2faa31(0x16e)](this[_0x2faa31(0x1aa)],_0x46ea6b+0xb4,_0x517316);}{let _0x2942e8=this['drawingAreaWidth'](),_0x35c250=0x0,_0xbaea4b=Math[_0x2faa31(0x447)](this['drawingAreaWidth']()/0x2),_0x4bfa32=0x0;const _0x3523c3=this[_0x2faa31(0x5cb)]();let _0x26d361=_0x35c250;const _0x596b3b=this[_0x2faa31(0x894)]-ImageManager[_0x2faa31(0x87c)],_0x5f5360=Math[_0x2faa31(0x447)](_0x3523c3[_0x2faa31(0x6b9)]/0x2)*this[_0x2faa31(0x4ef)]();let _0x581c8f=Math[_0x2faa31(0x447)]((_0x596b3b-_0x5f5360)/0x2)+ImageManager[_0x2faa31(0x87c)],_0x1503fa=Math[_0x2faa31(0x87f)](_0x2942e8/0x2);this[_0x2faa31(0x56c)]['y']!==0x0&&(this[_0x2faa31(0x56c)]['y']=_0x581c8f);for(const _0x3529dc of _0x3523c3){this[_0x2faa31(0x801)](_0x26d361,_0x581c8f,_0x1503fa,this[_0x2faa31(0x4ef)]()),this[_0x2faa31(0x23d)](_0x3529dc,_0x26d361,_0x581c8f,_0x1503fa),_0x4bfa32++,_0x4bfa32%0x2===0x0?(_0x26d361=_0x35c250,_0x581c8f+=this[_0x2faa31(0x4ef)]()):_0x26d361=_0xbaea4b;}}},Window_InBattleStatus['prototype'][_0x5a8ff0(0x37d)]=function(){const _0x4857ec=_0x5a8ff0;return VisuMZ[_0x4857ec(0xbb3)][_0x4857ec(0xba1)][_0x4857ec(0xbc8)][_0x4857ec(0x781)];},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x269)]=function(_0x1fd21a,_0xe0221b,_0x12c7b7,_0x25e99f,_0x256bc1){const _0x2f079e=_0x5a8ff0;if(_0x1fd21a['isActor']())switch(this[_0x2f079e(0x37d)]()){case _0x2f079e(0x927):break;case _0x2f079e(0x1cc):this[_0x2f079e(0x315)](_0x1fd21a,_0xe0221b,_0x12c7b7+0x1,_0x25e99f,_0x256bc1-0x2);break;case'svbattler':this[_0x2f079e(0xa5a)](_0x1fd21a,_0xe0221b,_0x12c7b7+0x1,_0x25e99f,_0x256bc1-0x2);break;default:this[_0x2f079e(0x743)](_0x1fd21a,_0xe0221b,_0x12c7b7,_0x25e99f,_0x256bc1);break;}else this['drawEnemyBattler'](_0x1fd21a,_0xe0221b,_0x12c7b7,_0x25e99f,_0x256bc1);},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['drawItemActorFace']=function(_0x3b58eb,_0x632a89,_0x412f5c,_0x18b09e,_0xfeaed9){const _0x4d4767=_0x5a8ff0;_0x18b09e=_0x18b09e||ImageManager[_0x4d4767(0x8b8)],_0xfeaed9=_0xfeaed9||ImageManager['faceHeight'];const _0x28d672=ImageManager[_0x4d4767(0x8b8)],_0x7e94b=_0xfeaed9-0x2,_0x24e6d4=_0x632a89+Math['floor']((_0x18b09e-_0x28d672)/0x2);this[_0x4d4767(0x18c)]===Window_MenuStatus&&this[_0x4d4767(0x4bd)](_0x3b58eb[_0x4d4767(0xbe9)]()),this[_0x4d4767(0x5a0)](_0x3b58eb,_0x24e6d4,_0x412f5c,_0x28d672,_0x7e94b),this[_0x4d4767(0x4bd)](!![]);},Window_InBattleStatus['prototype'][_0x5a8ff0(0x315)]=function(_0x1596ba,_0x56bfcb,_0x94b00e,_0x1cdbda,_0xf2a028){const _0x5f3fcd=_0x5a8ff0;_0x1cdbda=_0x1cdbda||ImageManager[_0x5f3fcd(0x8b8)],_0xf2a028=_0xf2a028||ImageManager[_0x5f3fcd(0x87c)];const _0x28227d=_0x1596ba['characterName'](),_0x28535f=_0x1596ba['characterIndex'](),_0x1ae538=ImageManager[_0x5f3fcd(0x53a)](_0x28227d),_0x27b706=ImageManager[_0x5f3fcd(0x619)](_0x28227d),_0x3dbaf5=_0x1ae538['width']/(_0x27b706?0x3:0xc),_0x5d7614=_0x1ae538['height']/(_0x27b706?0x4:0x8),_0x1712bc=_0x1cdbda,_0x392cc7=_0xf2a028-0x2,_0x3f9ba4=_0x56bfcb+Math['floor'](_0x1712bc/0x2),_0x46114d=_0x94b00e+Math['ceil']((_0xf2a028+_0x5d7614)/0x2);this[_0x5f3fcd(0x18c)]===Window_MenuStatus&&this[_0x5f3fcd(0x4bd)](_0x1596ba[_0x5f3fcd(0xbe9)]());const _0x1fbfea=Math[_0x5f3fcd(0x60d)](_0x1cdbda,_0x3dbaf5),_0x5691f5=Math[_0x5f3fcd(0x60d)](_0xf2a028,_0x5d7614),_0x274d54=Math[_0x5f3fcd(0x87f)](_0x56bfcb+Math[_0x5f3fcd(0x6dd)](_0x1cdbda-_0x3dbaf5,0x0)/0x2),_0x3b8568=Math[_0x5f3fcd(0x87f)](_0x94b00e+Math['max'](_0xf2a028-_0x5d7614,0x0)/0x2),_0x36a4e6=_0x27b706?0x0:_0x28535f,_0x1fbdc6=(_0x36a4e6%0x4*0x3+0x1)*_0x3dbaf5,_0x43afde=Math[_0x5f3fcd(0x87f)](_0x36a4e6/0x4)*0x4*_0x5d7614;this['contents'][_0x5f3fcd(0x230)](_0x1ae538,_0x1fbdc6,_0x43afde,_0x1fbfea,_0x5691f5,_0x274d54,_0x3b8568),this[_0x5f3fcd(0x4bd)](!![]);},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['drawItemActorSvBattler']=function(_0x907122,_0x2f401b,_0x3913d4,_0x46df48,_0x4afbd2,_0x44cae0){const _0x2e2e3c=_0x5a8ff0;_0x46df48=_0x46df48||ImageManager[_0x2e2e3c(0x8b8)],_0x4afbd2=_0x4afbd2||ImageManager[_0x2e2e3c(0x87c)];const _0x57c916=ImageManager[_0x2e2e3c(0x3b2)](_0x44cae0?_0x907122[_0x2e2e3c(0xaae)]():_0x907122[_0x2e2e3c(0x30f)]()),_0x4ef3e7=_0x57c916[_0x2e2e3c(0x3fa)]/ImageManager[_0x2e2e3c(0x887)],_0x4944b1=_0x57c916[_0x2e2e3c(0x75c)]/ImageManager['svActorVertCells'],_0x1de007=_0x46df48,_0x5bfbf2=_0x4afbd2-0x2,_0x246315=_0x2f401b+Math[_0x2e2e3c(0x87f)](_0x1de007/0x2),_0x302129=_0x3913d4+Math[_0x2e2e3c(0x447)]((_0x4afbd2+_0x4944b1)/0x2);this[_0x2e2e3c(0x18c)]===Window_MenuStatus&&this[_0x2e2e3c(0x4bd)](_0x907122[_0x2e2e3c(0xbe9)]());const _0x26eaa6=_0x907122[_0x2e2e3c(0x913)]&&_0x907122[_0x2e2e3c(0x913)](),_0x5d88f2=0x0,_0x389523=0x0,_0x3515f0=_0x26eaa6?_0x57c916['width']:_0x4ef3e7,_0x1a150a=_0x26eaa6?_0x57c916[_0x2e2e3c(0x75c)]:_0x4944b1,_0x51db2a=Math[_0x2e2e3c(0x60d)](0x1,_0x46df48/_0x3515f0,_0x4afbd2/_0x1a150a),_0x53dac2=_0x51db2a*_0x3515f0,_0x5b6e48=_0x51db2a*_0x1a150a,_0x578db6=Math[_0x2e2e3c(0x87f)](_0x2f401b+Math[_0x2e2e3c(0x6dd)](_0x46df48-_0x53dac2,0x0)/0x2),_0xddad67=Math['floor'](_0x3913d4+Math[_0x2e2e3c(0x6dd)](_0x4afbd2-_0x5b6e48,0x0)/0x2);this['contents'][_0x2e2e3c(0x230)](_0x57c916,_0x5d88f2,_0x389523,_0x3515f0,_0x1a150a,_0x578db6,_0xddad67,_0x53dac2,_0x5b6e48),this['changePaintOpacity'](!![]);},Window_InBattleStatus['prototype']['drawEnemyBattler']=function(_0x2fc762,_0x4e0d98,_0x2ad27f,_0x587f02,_0x5022fa){const _0x420126=_0x5a8ff0;if(_0x2fc762['hasSvBattler']()){this['drawItemActorSvBattler'](_0x2fc762,_0x4e0d98,_0x2ad27f+0x1,_0x587f02,_0x5022fa-0x2,!![]);return;}const _0x5d9f29=_0x2fc762['battlerName'](),_0x55d801=$gameSystem[_0x420126(0xa92)]()?ImageManager[_0x420126(0x8fc)](_0x5d9f29):ImageManager[_0x420126(0xc0b)](_0x5d9f29);_0x55d801[_0x420126(0xbcb)](this[_0x420126(0x131)][_0x420126(0x164)](this,_0x2fc762,_0x55d801,_0x4e0d98,_0x2ad27f,_0x587f02,_0x5022fa));},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['processDrawEnemyBattler']=function(_0x4bc10b,_0x19eb43,_0x55ef13,_0x466425,_0x3b0aa9,_0x42319c){const _0x228f05=_0x5a8ff0;if(this[_0x228f05(0x1aa)]!==_0x4bc10b)return;this[_0x228f05(0x8f4)][_0x228f05(0x996)](),this['_enemySprite'][_0x228f05(0x103)]=new Bitmap(_0x3b0aa9,_0x42319c);const _0x3faaad=_0x3b0aa9,_0x3b4a8e=_0x42319c,_0x4e93a4=Math['min'](_0x3faaad,_0x3b4a8e),_0x143052=this[_0x228f05(0x8f4)][_0x228f05(0x103)],_0x1634e8=Math[_0x228f05(0x60d)](0x1,_0x4e93a4/_0x19eb43[_0x228f05(0x3fa)],_0x4e93a4/_0x19eb43[_0x228f05(0x75c)]),_0x2a054f=_0x19eb43[_0x228f05(0x3fa)]*_0x1634e8,_0xe7fe55=_0x19eb43[_0x228f05(0x75c)]*_0x1634e8,_0x59f125=Math[_0x228f05(0xb41)]((_0x3faaad-_0x2a054f)/0x2),_0x239dbd=Math['round']((_0x3b4a8e-_0xe7fe55)/0x2);_0x143052[_0x228f05(0x230)](_0x19eb43,0x0,0x0,_0x19eb43[_0x228f05(0x3fa)],_0x19eb43[_0x228f05(0x75c)],_0x59f125,_0x239dbd,_0x2a054f,_0xe7fe55),this[_0x228f05(0x8f4)][_0x228f05(0x50e)]['x']=0.5,this[_0x228f05(0x8f4)][_0x228f05(0x50e)]['y']=0x1,this[_0x228f05(0x8f4)]['x']=_0x55ef13+_0x3b0aa9/0x2+this[_0x228f05(0x1d3)],this[_0x228f05(0x8f4)]['y']=_0x466425+_0x42319c+this[_0x228f05(0x1d3)],this[_0x228f05(0x8f4)]['setHue'](this[_0x228f05(0x1aa)][_0x228f05(0x896)]());},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xa63)]=function(_0x338895,_0x35f0e1,_0x36e116,_0x3d9a74){const _0x1e655b=_0x5a8ff0;if(_0x338895[_0x1e655b(0x172)]())_0x3d9a74=this[_0x1e655b(0xb3f)]-_0x35f0e1;Window_StatusBase[_0x1e655b(0xb6e)]['drawActorName'][_0x1e655b(0x31b)](this,_0x338895,_0x35f0e1,_0x36e116,_0x3d9a74);},Window_InBattleStatus['prototype'][_0x5a8ff0(0x7e9)]=function(_0x42ef4f,_0x3f92b8,_0x5de091,_0x5ea08d){const _0xff32db=_0x5a8ff0;if(!_0x42ef4f[_0xff32db(0x34b)]())return;Window_StatusBase[_0xff32db(0xb6e)][_0xff32db(0x7e9)][_0xff32db(0x31b)](this,_0x42ef4f,_0x3f92b8,_0x5de091,_0x5ea08d);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3bd)]=function(_0x5e6afb,_0x4ca809,_0x2fe9f1){const _0x356081=_0x5a8ff0;if(_0x5e6afb[_0x356081(0x172)]()&&!Window_InBattleStatus[_0x356081(0xa78)][_0x356081(0x5f7)])return;Window_StatusBase['prototype'][_0x356081(0x3bd)]['call'](this,_0x5e6afb,_0x4ca809,_0x2fe9f1);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x459)]=function(_0x13e46f,_0x172a2c,_0x14b0c3,_0x4d2864){const _0x18a81f=_0x5a8ff0;_0x13e46f['_hideAllIcons']=!![],Window_StatusBase[_0x18a81f(0xb6e)][_0x18a81f(0x459)]['call'](this,_0x13e46f,_0x172a2c,_0x14b0c3,_0x4d2864),_0x13e46f[_0x18a81f(0x1d9)]=undefined;},VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0x877)]=Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8f0)],Game_BattlerBase[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x8f0)]=function(){const _0xc7588c=_0x5a8ff0;if(this['_hideAllIcons'])return[];return VisuMZ[_0xc7588c(0xbb3)]['Game_BattlerBase_allIconsIBS']['call'](this);},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xb68)]=function(_0x3758cc,_0x493248,_0x134a68,_0x63f6c7){const _0x540a8e=_0x5a8ff0,_0x5e8cc6=_0x540a8e(0x510)[_0x540a8e(0x907)](_0x3758cc[_0x540a8e(0xb72)](),_0x493248);let _0x3b6276=![];if(_0x3758cc['isEnemy']()){const _0x446514=Window_InBattleStatus[_0x540a8e(0xa78)];if(_0x493248==='hp'&&_0x446514[_0x540a8e(0x2d2)])_0x3b6276=!![];if(_0x493248==='mp'&&_0x446514[_0x540a8e(0x537)])_0x3b6276=!![];if(_0x493248==='tp'&&_0x446514['enemyTpGaugeRate'])_0x3b6276=!![];}const _0x607536=this[_0x540a8e(0x40c)](_0x5e8cc6,_0x3b6276?Sprite_GaugeRate:Sprite_Gauge);_0x607536[_0x540a8e(0x681)](_0x3758cc,_0x493248),_0x607536['move'](_0x134a68,_0x63f6c7),_0x607536['show']();},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['drawingAreaWidth']=function(){const _0x4a332d=_0x5a8ff0,_0x3dbbdb=this['_statesWindow']?this[_0x4a332d(0x56c)]['width']:0x0;return this['innerWidth']-_0x3dbbdb+this[_0x4a332d(0x1d3)]*0x2;},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['displayedParams']=function(){const _0x1fc9c7=_0x5a8ff0;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x1fc9c7(0x208)][_0x1fc9c7(0xba1)][_0x1fc9c7(0x488)][_0x1fc9c7(0x4e2)]:[_0x1fc9c7(0x155),'MaxMP',_0x1fc9c7(0x40b),_0x1fc9c7(0x19b),'MAT','MDF',_0x1fc9c7(0x4fe),_0x1fc9c7(0x475)];},Window_InBattleStatus[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x23d)]=function(_0x4be21d,_0x249ab8,_0x2ca3fa,_0x771663){const _0x54bd32=_0x5a8ff0,_0x2c73e0=Window_InBattleStatus[_0x54bd32(0xa78)],_0x115425=Imported[_0x54bd32(0x610)];this[_0x54bd32(0x876)]();let _0x26ad53='',_0x400a1f=0x0,_0x550727=[_0x54bd32(0x784),'MAXMP',_0x54bd32(0x40b),_0x54bd32(0x19b),'MAT','MDF','AGI',_0x54bd32(0x475)][_0x54bd32(0x70f)](String(_0x4be21d)[_0x54bd32(0x692)]()[_0x54bd32(0xb20)]());if(_0x115425)_0x26ad53=TextManager[_0x54bd32(0x2c6)](_0x4be21d),_0x400a1f=VisuMZ[_0x54bd32(0x127)](_0x4be21d);else{if(_0x550727>=0x0&&_0x550727<0x8)_0x26ad53=TextManager[_0x54bd32(0xa9c)](_0x550727);}if(_0x550727>=0x0&&_0x550727<0x8){const _0x31034b=this['_battler'][_0x54bd32(0x415)][_0x550727];this[_0x54bd32(0x1aa)][_0x54bd32(0xa3f)](_0x31034b,_0x550727)!==0x0&&(_0x400a1f=this[_0x54bd32(0x1aa)][_0x54bd32(0xa3f)](_0x31034b,_0x550727));}if(_0x26ad53){let _0x22e11d=_0x54bd32(0x881)[_0x54bd32(0x907)](_0x26ad53,_0x400a1f);_0x771663<=0xd4&&(_0x22e11d=_0x54bd32(0x8f2)[_0x54bd32(0x907)](_0x26ad53));const _0x3d4c29=_0x771663<=0xd4?'\x20':'\x20\x20';this['drawTextEx'](_0x3d4c29+_0x22e11d,_0x249ab8,_0x2ca3fa);}this[_0x54bd32(0x766)]();let _0x5b33f8='';_0x115425?_0x5b33f8=this[_0x54bd32(0x1aa)]['paramValueByName'](_0x4be21d,!![]):_0x5b33f8=String(this['_battler'][_0x54bd32(0xa9c)](_0x550727));if(this[_0x54bd32(0x1aa)][_0x54bd32(0x172)]()){let _0x520549=!![];if(_0x2c73e0[_0x54bd32(0xa3c)])_0x520549=![];if(_0x2c73e0['enemyShowParametersIfBattleTest']&&BattleManager['isBattleTest']())_0x520549=![];if(_0x2c73e0[_0x54bd32(0x468)]&&$gameSystem[_0x54bd32(0x1a7)]()[_0x54bd32(0x597)](this['_battler'][_0x54bd32(0x2b8)]()))_0x520549=![];_0x520549&&(_0x5b33f8=_0x2c73e0[_0x54bd32(0x500)]);}if(_0x550727>=0x0&&_0x550727<0x8){if(this['_battler']['getParamBuffAndStateRate'](_0x550727)>0x1)_0x5b33f8=_0x2c73e0['buffValueFmt'][_0x54bd32(0x907)](_0x5b33f8),Imported['VisuMZ_1_SkillsStatesCore']?this['changeTextColor'](ColorManager[_0x54bd32(0x6a3)]()):this[_0x54bd32(0xaec)](ColorManager[_0x54bd32(0x1fe)]());else this[_0x54bd32(0x1aa)]['getParamBuffAndStateRate'](_0x550727)<0x1&&(_0x5b33f8=_0x2c73e0[_0x54bd32(0x216)][_0x54bd32(0x907)](_0x5b33f8),Imported[_0x54bd32(0x6a5)]?this['changeTextColor'](ColorManager[_0x54bd32(0xb73)]()):this[_0x54bd32(0xaec)](ColorManager[_0x54bd32(0x213)]()));}if(String(_0x5b33f8)){const _0x196297=_0x771663<=0xd4?'\x20':'\x20\x20';this[_0x54bd32(0x70d)](_0x5b33f8+_0x196297,_0x249ab8,_0x2ca3fa,_0x771663,'right');}},Window_InBattleStatus[_0x5a8ff0(0xb6e)]['drawDarkRect']=function(_0x3aabbd,_0x28f67a,_0x3ebe06,_0x1ff231){const _0x1168ca=_0x5a8ff0;_0x1ff231=_0x1ff231||this[_0x1168ca(0x4ef)](),this[_0x1168ca(0x835)][_0x1168ca(0x3b7)]=0xa0;const _0xec0fd=ColorManager['gaugeBackColor']();this['contentsBack'][_0x1168ca(0x396)](_0x3aabbd+0x1,_0x28f67a+0x1,_0x3ebe06-0x2,_0x1ff231-0x2,_0xec0fd),this[_0x1168ca(0x835)][_0x1168ca(0x3b7)]=0xff;},Game_BattlerBase[_0x5a8ff0(0xb6e)]['getParamBuffAndStateRate']=function(_0x4196cb){const _0x19b213=_0x5a8ff0;let _0x28cdf1=0x1;_0x28cdf1*=this[_0x19b213(0x687)](_0x4196cb);for(const _0xc58ac of this['states']()){if(!_0xc58ac)continue;for(const _0x26dce4 of _0xc58ac['traits']){if(!_0x26dce4)continue;if(_0x26dce4[_0x19b213(0xa07)]!==Game_BattlerBase[_0x19b213(0x727)])continue;if(_0x26dce4[_0x19b213(0x695)]!==_0x4196cb)continue;_0x28cdf1*=_0x26dce4['value'];}}return _0x28cdf1;};function Window_InBattleStatusStates(){const _0xac6c23=_0x5a8ff0;this[_0xac6c23(0x4aa)](...arguments);}Window_InBattleStatusStates[_0x5a8ff0(0xb6e)]=Object[_0x5a8ff0(0x8d3)](Window_Command[_0x5a8ff0(0xb6e)]),Window_InBattleStatusStates[_0x5a8ff0(0xb6e)]['constructor']=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x5a8ff0(0xa78)]={'maxWidth':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x331)]??0x180,'drawStates':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x477)]??!![],'drawBuffs':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x411)]??!![],'drawDebuffs':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)]['InBattleStatus'][_0x5a8ff0(0x75d)]??!![],'normalIcon':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x5aa)]??0x54,'normalText':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)]['InBattleStatus'][_0x5a8ff0(0x85e)]??'Normal','normalHelp':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x178)]??'Status\x20is\x20currently\x20normal.','stateHelpFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x3e6)]??'%1\x20%2','buffNameFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x8ae)]??_0x5a8ff0(0x7c1),'buffHelpFmt':VisuMZ[_0x5a8ff0(0xbb3)][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)]['buffHelpFmt']??_0x5a8ff0(0xb33),'debuffNameFmt':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x785)]??_0x5a8ff0(0x88e),'debuffHelpFmt':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x50f)]??_0x5a8ff0(0x109),'actionsFmt':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)]['InBattleStatus'][_0x5a8ff0(0x5ba)]??_0x5a8ff0(0x366),'turnsFmt':VisuMZ[_0x5a8ff0(0xbb3)]['Settings'][_0x5a8ff0(0xbc8)]['TurnsFmt']??'\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','passiveText':VisuMZ['BattleCore'][_0x5a8ff0(0xba1)][_0x5a8ff0(0xbc8)][_0x5a8ff0(0x2a9)]??_0x5a8ff0(0x251)},Window_InBattleStatusStates['prototype'][_0x5a8ff0(0x4aa)]=function(_0x3e1b8e){const _0x5706a2=_0x5a8ff0;this[_0x5706a2(0x1aa)]=null,Window_Command[_0x5706a2(0xb6e)][_0x5706a2(0x4aa)][_0x5706a2(0x31b)](this,_0x3e1b8e),this[_0x5706a2(0x988)](),this[_0x5706a2(0xbbf)](),this[_0x5706a2(0x29c)](0x2);},Window_InBattleStatusStates['prototype'][_0x5a8ff0(0x2b2)]=function(_0x1cbf52){const _0x4a6be6=_0x5a8ff0;this[_0x4a6be6(0x1aa)]=_0x1cbf52||null,this[_0x4a6be6(0x38a)](),this[_0x4a6be6(0x89a)](0x0),this['scrollTo'](0x0,0x0),this['activate']();},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x202)]=function(){},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3c3)]=function(){const _0x1b0160=_0x5a8ff0;if(!this['_battler'])return;this[_0x1b0160(0x6de)](),this[_0x1b0160(0x1db)](),this[_0x1b0160(0xc1c)](),this[_0x1b0160(0xbeb)]();},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x6de)]=function(){const _0x4f322a=_0x5a8ff0;if(!this[_0x4f322a(0x1aa)][_0x4f322a(0x172)]())return;if(!this[_0x4f322a(0x1aa)][_0x4f322a(0x679)]())return;const _0x128208=this['_battler']['getAspectData']()[_0x4f322a(0xa4b)],_0x58ce9b=this[_0x4f322a(0x1aa)][_0x4f322a(0x32a)]()['iconIndex'],_0x3b87d7=this[_0x4f322a(0x1aa)][_0x4f322a(0x32a)]()['nameColor'];let _0x50cead='';_0x3b87d7[_0x4f322a(0x6d8)](/#(.*?)/gi)&&Imported[_0x4f322a(0x13d)]?_0x50cead=_0x4f322a(0x28d)['format'](_0x58ce9b,_0x128208,_0x3b87d7):_0x50cead=_0x4f322a(0x166)['format'](_0x58ce9b,_0x128208,_0x3b87d7),this[_0x4f322a(0x141)](_0x50cead,_0x4f322a(0xbc7),!![]);},Window_InBattleStatusStates['prototype'][_0x5a8ff0(0x1db)]=function(){const _0x566358=_0x5a8ff0;if(!Window_InBattleStatusStates['SETTINGS'][_0x566358(0x477)])return;for(const _0x3b4c5 of this[_0x566358(0x1aa)][_0x566358(0x1f7)]()){if(!this[_0x566358(0x9de)](_0x3b4c5))continue;const _0x4f02e=this[_0x566358(0x3d2)](_0x3b4c5);this[_0x566358(0x141)](_0x4f02e,'state',!![],_0x3b4c5['id']);}},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x9de)]=function(_0x5357f2){const _0xb0b673=_0x5a8ff0;if(!_0x5357f2)return![];if(_0x5357f2[_0xb0b673(0xa4b)][_0xb0b673(0xb20)]()==='')return![];if(_0x5357f2[_0xb0b673(0xa4b)][_0xb0b673(0x597)](_0xb0b673(0x901)))return![];if(_0x5357f2['iconIndex']<=0x0)return![];if(_0x5357f2['excludeListing'])return![];return!![];},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x3d2)]=function(_0x4ef990){const _0x881a94=_0x5a8ff0;let _0x5f81fe=_0x4ef990[_0x881a94(0xbc3)],_0x1a1554=_0x4ef990[_0x881a94(0xa4b)],_0x4fa1ce='0';return Imported['VisuMZ_1_SkillsStatesCore']&&Imported['VisuMZ_1_MessageCore']&&(_0x4fa1ce=String(ColorManager[_0x881a94(0x3a7)](_0x4ef990))),_0x4fa1ce[_0x881a94(0x6d8)](/#(.*?)/gi)?_0x881a94(0x28d)[_0x881a94(0x907)](_0x5f81fe,_0x1a1554,_0x4fa1ce):_0x881a94(0x166)['format'](_0x5f81fe,_0x1a1554,_0x4fa1ce);},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xc1c)]=function(){const _0x2820a5=_0x5a8ff0;for(let _0x5284a3=0x0;_0x5284a3<0x8;_0x5284a3++){const _0x4d0718=this[_0x2820a5(0x117)](_0x5284a3);if(!_0x4d0718)continue;this[_0x2820a5(0x141)](_0x4d0718,_0x2820a5(0xa51),!![],_0x5284a3);}},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x117)]=function(_0x2d1548){const _0x5cebc1=_0x5a8ff0;if(!this['_battler'][_0x5cebc1(0xb55)](_0x2d1548)&&!this[_0x5cebc1(0x1aa)][_0x5cebc1(0x4dd)](_0x2d1548))return'';const _0x12f1d7=Window_InBattleStatusStates['SETTINGS'];if(this[_0x5cebc1(0x1aa)][_0x5cebc1(0xb55)](_0x2d1548)&&!_0x12f1d7[_0x5cebc1(0x411)])return'';if(this['_battler'][_0x5cebc1(0x4dd)](_0x2d1548)&&!_0x12f1d7[_0x5cebc1(0x75d)])return'';const _0x5d8725=this['_battler'][_0x5cebc1(0x415)][_0x2d1548];let _0x497571=this[_0x5cebc1(0x1aa)][_0x5cebc1(0xa3f)](_0x5d8725,_0x2d1548),_0x5184ce=TextManager['param'](_0x2d1548);_0x5d8725>0x0?_0x5184ce=_0x12f1d7[_0x5cebc1(0x8ae)][_0x5cebc1(0x907)](_0x5184ce):_0x5184ce=_0x12f1d7[_0x5cebc1(0x785)][_0x5cebc1(0x907)](_0x5184ce);let _0x2e9434=0x0;return Imported['VisuMZ_1_SkillsStatesCore']&&(_0x2e9434=_0x5d8725>0x0?ColorManager['buffColor']():ColorManager[_0x5cebc1(0xb73)]()),String(_0x2e9434)[_0x5cebc1(0x6d8)](/#(.*?)/gi)?_0x5cebc1(0x28d)[_0x5cebc1(0x907)](_0x497571,_0x5184ce,_0x2e9434):_0x5cebc1(0x166)[_0x5cebc1(0x907)](_0x497571,_0x5184ce,_0x2e9434);},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)]['addNormalStatus']=function(){const _0x3ae4a8=_0x5a8ff0;if(this['_list'][_0x3ae4a8(0x6b9)]>0x0)return;const _0x2cc29a=Window_InBattleStatusStates[_0x3ae4a8(0xa78)],_0x18f387=_0x2cc29a[_0x3ae4a8(0x5aa)],_0x1c4ea4=_0x2cc29a[_0x3ae4a8(0x85e)],_0x20121f=_0x3ae4a8(0xbe7)[_0x3ae4a8(0x907)](_0x18f387,_0x1c4ea4);this['addCommand'](_0x20121f,_0x3ae4a8(0x9ba));},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x943)]=function(_0x266b5f){const _0xa68cd5=_0x5a8ff0,_0xe2c23a=this[_0xa68cd5(0x1c2)](_0x266b5f);this['changePaintOpacity'](0xff),this[_0xa68cd5(0x1a9)](this[_0xa68cd5(0x3d8)](_0x266b5f),_0xe2c23a['x'],_0xe2c23a['y']),this['drawTurnsRemaining'](_0x266b5f,_0xe2c23a);},Window_InBattleStatusStates['prototype']['drawTurnsRemaining']=function(_0x390d39,_0x3d951c){const _0x1c882c=_0x5a8ff0;if(!Imported[_0x1c882c(0x6a5)])return;const _0x1129e5=this[_0x1c882c(0x948)](_0x390d39),_0x325ade=_0x3d951c['x']+0x2;if(_0x1129e5===_0x1c882c(0x6d2)){const _0x48c71c=$dataStates[this[_0x1c882c(0x8cf)][_0x390d39][_0x1c882c(0x543)]||0x0];this[_0x1c882c(0xb60)](this[_0x1c882c(0x1aa)],_0x48c71c,_0x325ade,_0x3d951c['y']),this[_0x1c882c(0xba8)](this[_0x1c882c(0x1aa)],_0x48c71c,_0x325ade,_0x3d951c['y']);}else{if(_0x1129e5===_0x1c882c(0xa51)){const _0x581697=this[_0x1c882c(0x8cf)][_0x390d39][_0x1c882c(0x543)];this[_0x1c882c(0xaf2)](this[_0x1c882c(0x1aa)],_0x581697,_0x325ade,_0x3d951c['y']),this['drawActorBuffRates'](this['_battler'],_0x581697,_0x325ade,_0x3d951c['y']);}}},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0xbdf)]=function(){const _0x308061=_0x5a8ff0,_0x15d8bb=this['currentSymbol']();let _0x379079='';if(_0x15d8bb==='aspect')_0x379079=this[_0x308061(0x1aa)][_0x308061(0x32a)]()[_0x308061(0x8fb)];else{if(_0x15d8bb===_0x308061(0x6d2))_0x379079=this[_0x308061(0x764)]();else{if(_0x15d8bb===_0x308061(0xa51))_0x379079=this[_0x308061(0x5ab)]();else _0x15d8bb===_0x308061(0x9ba)&&(_0x379079=Window_InBattleStatusStates[_0x308061(0xa78)]['normalHelp']);}}_0x379079?this[_0x308061(0xa6d)][_0x308061(0x8eb)](_0x379079):this[_0x308061(0xa6d)][_0x308061(0x9c3)]();},Window_InBattleStatusStates['prototype'][_0x5a8ff0(0x764)]=function(){const _0x58df6f=_0x5a8ff0,_0xbe1a6e=Window_InBattleStatusStates['SETTINGS'],_0x333543=this[_0x58df6f(0x372)]();let _0x194bb6='';const _0x3b32e1=$dataStates[_0x333543]||null;if(_0x3b32e1){const _0x24e1c8=_0xbe1a6e[_0x58df6f(0x3e6)];let _0x296b2d=_0x3b32e1['statusDescription']||_0x3b32e1[_0x58df6f(0x8fb)]||'';Imported[_0x58df6f(0x6a5)]&&(_0x296b2d=_0x296b2d[_0x58df6f(0x907)](this[_0x58df6f(0x1aa)][_0x58df6f(0x83e)](_0x333543)));let _0x32d57f='passive';if(this[_0x58df6f(0x1aa)][_0x58df6f(0x6ea)](_0x333543)){if(_0x3b32e1[_0x58df6f(0x8ad)]===0x0)_0x32d57f=_0x58df6f(0x927);if(_0x3b32e1['autoRemovalTiming']===0x1)_0x32d57f=_0x58df6f(0xadf);if(_0x3b32e1[_0x58df6f(0x8ad)]===0x2)_0x32d57f=_0x58df6f(0x3ec);}const _0x2d1b36=this[_0x58df6f(0x1aa)]['_stateTurns'][_0x333543]||0x0;let _0x118678=_0x58df6f(0x6df);Imported[_0x58df6f(0x6a5)]&&Imported[_0x58df6f(0x13d)]&&(_0x118678=ColorManager['stateColor'](_0x3b32e1),_0x118678['match'](/#(.*?)/gi)?_0x118678=_0x58df6f(0x7ba)['format'](_0x118678):_0x118678=_0x58df6f(0x82b)['format'](_0x118678)),_0x194bb6=_0x24e1c8[_0x58df6f(0x907)](_0x296b2d,this['makeTurnsText'](_0x32d57f,_0x2d1b36,_0x118678));}return _0x194bb6;},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x5ab)]=function(){const _0x264ce9=_0x5a8ff0,_0x30acf1=Window_InBattleStatusStates[_0x264ce9(0xa78)],_0x181f8c=this[_0x264ce9(0x372)]();let _0x1be642='';const _0x12c859=this[_0x264ce9(0x1aa)]['isBuffAffected'](_0x181f8c),_0x4bd935=_0x12c859?_0x264ce9(0xba4):_0x264ce9(0x50f),_0x2e43b3=_0x30acf1[_0x4bd935];let _0x5c4f4c=_0x264ce9(0x6df);Imported[_0x264ce9(0x6a5)]&&Imported[_0x264ce9(0x13d)]&&(_0x5c4f4c=_0x12c859?ColorManager[_0x264ce9(0x6a3)]():ColorManager[_0x264ce9(0xb73)](),_0x5c4f4c[_0x264ce9(0x6d8)](/#(.*?)/gi)?_0x5c4f4c=_0x264ce9(0x7ba)[_0x264ce9(0x907)](_0x5c4f4c):_0x5c4f4c=_0x264ce9(0x82b)[_0x264ce9(0x907)](_0x5c4f4c));const _0x42d2e2=this[_0x264ce9(0x1aa)]['_buffTurns'][_0x181f8c]||0x0;return _0x1be642=_0x2e43b3[_0x264ce9(0x907)](TextManager[_0x264ce9(0xa9c)](_0x181f8c),Math['floor'](this[_0x264ce9(0x1aa)][_0x264ce9(0x687)](_0x181f8c)*0x64)+'%',_0x5c4f4c,this[_0x264ce9(0x405)](_0x264ce9(0x3ec),_0x42d2e2,_0x5c4f4c)),_0x1be642;},Window_InBattleStatusStates[_0x5a8ff0(0xb6e)][_0x5a8ff0(0x405)]=function(_0x1b01b7,_0x5ee8e7,_0x50d842){const _0x4b0386=_0x5a8ff0,_0x453421=Window_InBattleStatusStates[_0x4b0386(0xa78)];let _0x26104b=_0x453421[_0x4b0386(0x2a9)];if(_0x1b01b7===_0x4b0386(0xadf))_0x26104b=_0x453421[_0x4b0386(0x5ba)];if(_0x1b01b7===_0x4b0386(0x3ec))_0x26104b=_0x453421[_0x4b0386(0x296)];if(_0x1b01b7==='none')return'';return _0x26104b[_0x4b0386(0x907)](_0x5ee8e7,_0x50d842);};